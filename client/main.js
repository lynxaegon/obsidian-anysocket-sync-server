/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/libs/Events.js
var require_Events = __commonJS({
  "src/libs/Events.js"(exports, module2) {
    module2.exports = class EventEmitter {
      constructor() {
        this.callbacks = {};
        this.callbacks_once = {};
      }
      on(event, cb) {
        if (!this.callbacks[event])
          this.callbacks[event] = [];
        this.callbacks[event].push(cb);
      }
      off(event, cb) {
        if (this.callbacks[event]) {
          this.callbacks[event] = this.callbacks[event].filter((item) => item !== cb);
        }
      }
      removeListener(event, cb) {
        this.off(event, cb);
      }
      removeAllListeners(event) {
        if (event === void 0) {
          this.callbacks = {};
        } else {
          delete this.callbacks[event];
        }
      }
      once(event, cb) {
        if (!this.callbacks_once[event])
          this.callbacks_once[event] = [];
        this.callbacks_once[event].push(cb);
      }
      emit(event, ...args) {
        let cbs = this.callbacks[event];
        if (cbs) {
          cbs.forEach((cb) => cb(...args));
        }
        cbs = this.callbacks_once[event];
        if (cbs) {
          cbs.forEach((cb) => cb(...args));
          delete this.callbacks_once[event];
        }
      }
    };
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AnySocketSyncPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/XSync.ts
var import_obsidian2 = require("obsidian");

// src/libs/AnysocketManager.ts
var import_obsidian = require("obsidian");

// src/libs/AnySocketLoader.ts
var AnySocketLoader = class {
  static load() {
    window.eval(`var AnySocket;AnySocket=(()=>{var e={147:(e,t,s)=>{const n=window.crypto||window.msCrypto;if(!n)throw new Error("Crypto is not supported in this browser!");const i=s(20),r="P-521";e.exports=new class{randomBytes(e){let t=new Uint8Array(e);for(let s=0;s<e;s+=65536)n.getRandomValues(t.subarray(s,s+Math.min(e-s,65536)));return t}createECDH(){return new Promise((async(e,t)=>{window.crypto.subtle.generateKey({name:"ECDH",namedCurve:r},!1,["deriveKey","deriveBits"]).then((function(t){e({generateKeys:()=>new Promise(((e,s)=>{window.crypto.subtle.exportKey("raw",t.publicKey).then((function(t){t=new Uint8Array(t),e(t)})).catch((function(e){s(e)}))})),computeSecret:e=>new Promise(((s,n)=>{window.crypto.subtle.importKey("raw",e,{name:"ECDH",namedCurve:r},!1,[]).then((function(e){window.crypto.subtle.deriveBits({name:"ECDH",namedCurve:r,public:e},t.privateKey,512).then((e=>{e=new Uint8Array(e),s(i.bufferToHex(e))}))})).catch((function(e){n(e)}))}))})})).catch((function(e){t(e)}))}))}pbkdf2Sync(e,t,s,n,r){let o={sha256:"SHA-256"};if(!o[r])throw new Error("Invalid algorithm "+r);return r=o[r],new Promise((async(o,c)=>{e instanceof CryptoKey||(e=await window.crypto.subtle.importKey("raw",i.utf8Encode(e),{name:"PBKDF2"},!1,["deriveKey","deriveBits"])),window.crypto.subtle.deriveBits({name:"PBKDF2",salt:i.utf8Encode(t),iterations:s,hash:{name:r}},e,8*n).then((function(e){o(new Uint8Array(e))})).catch((function(e){c(e)}))}))}}},954:e=>{e.exports=()=>()=>{}},69:()=>{},267:e=>{e.exports=class{constructor(){this.callbacks={},this.callbacks_once={}}on(e,t){this.callbacks[e]||(this.callbacks[e]=[]),this.callbacks[e].push(t)}off(e,t){this.callbacks[e]&&(this.callbacks[e]=this.callbacks[e].filter((e=>e!==t)))}removeListener(e,t){this.off(e,t)}removeAllListeners(e){void 0===e?this.callbacks={}:delete this.callbacks[e]}once(e,t){this.callbacks_once[e]||(this.callbacks_once[e]=[]),this.callbacks_once[e].push(t)}emit(e,...t){let s=this.callbacks[e];s&&s.forEach((e=>e(...t))),s=this.callbacks_once[e],s&&(s.forEach((e=>e(...t))),delete this.callbacks_once[e])}}},661:(e,t,s)=>{const n=s(510),i=s(20);n.encryptAES=(e,t)=>new Promise(((s,n)=>{window.crypto.subtle.importKey("raw",i.bufferFromHex(e),{name:"AES-CBC",length:256},!1,["encrypt"]).then((e=>{let r=window.crypto.getRandomValues(new Uint8Array(16));window.crypto.subtle.encrypt({name:"AES-CBC",iv:r},e,i.bufferFromString(t)).then((function(e){s(i.bufferToHex(r)+i.bufferToHex(new Uint8Array(e)))})).catch((function(e){n(e)}))})).catch(n)})),n.decryptAES=(e,t)=>new Promise(((s,n)=>{window.crypto.subtle.importKey("raw",i.bufferFromHex(e),{name:"AES-CBC",length:256},!1,["decrypt"]).then((e=>{window.crypto.subtle.decrypt({name:"AES-CBC",iv:i.bufferFromHex(t.substr(0,32))},e,i.bufferFromHex(t.substr(32))).then((function(e){s(i.bufferToString(new Uint8Array(e)))})).catch((e=>{n(e)}))})).catch((e=>{n(e)}))})),e.exports=n},20:e=>{e.exports={utf8Encode(e){let t=[],s=e.length,n=0;for(;n<s;){let s=e.codePointAt(n),i=0,r=0;for(s<=127?(i=0,r=0):s<=2047?(i=6,r=192):s<=65535?(i=12,r=224):s<=2097151&&(i=18,r=240),t.push(r|s>>i),i-=6;i>=0;)t.push(128|s>>i&63),i-=6;n+=s>=65536?2:1}return new Uint8Array(t)},bufferFromString(e){let t=new ArrayBuffer(e.length),s=new Uint8Array(t);for(let t=0,n=e.length;t<n;t++)s[t]=e.charCodeAt(t);return t},bufferToString(e){let t="";if(e){let s=new Uint8Array(e);for(let e=0;e<s.byteLength;e++)t+=String.fromCharCode(s[e])}return t},bufferToHex(e){return e.reduce(((e,t)=>e+this.i2hex(t)),"")},i2hex:e=>("0"+e.toString(16)).slice(-2),bufferFromHex(e){let t=new Uint8Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=parseInt(e.substring(s,s+2),16);return t},isBuffer:e=>!!(e.buffer instanceof ArrayBuffer&&e.BYTES_PER_ELEMENT)}},966:e=>{e.exports=class{constructor(...e){this.ws=new WebSocket(...e)}on(e,t){switch(e){case"open":this.ws.onopen=t;break;case"error":this.ws.onerror=t;break;case"message":this.ws.onmessage=e=>{t(e.data)};break;case"close":this.ws.onclose=t;break;default:throw new Error("Not implemented in browser! ("+e+")")}}send(...e){this.ws.send(e)}close(){this.ws.close()}terminate(){}}},506:(e,t,s)=>{const n=s(100),i=s(555);n.Transport={WS:s(866),HTTP:s(69)},n.Packer={pack:i.packBytes.bind(i),unpack:i.unpackBytes.bind(i)},e.exports=n},117:e=>{e.exports=class{constructor(){this.routes={_:[]},this.routesRegexp={_:[]},this._upgradeCallback=null,this._process=this._process.bind(this),this._processUpgrade=this._processUpgrade.bind(this)}on(e,t,s){return t instanceof RegExp?(this.routesRegexp[e]||(this.routesRegexp[e]=[]),this.routesRegexp[e].push({path:t,cb:s})):(this.routes[e]||(this.routes[e]={}),this.routes[e][t]=s),this}upgrade(e){return this._upgradeCallback=e,this}any(e,t){return this.on("_",e,t)}get(e,t){return this.on("get",e,t)}post(e,t){return this.on("post",e,t)}delete(e,t){return this.on("delete",e,t)}error(e){this.onError=e}_processUpgrade(e){try{if(!this._upgradeCallback)return;this._upgradeCallback(e)}catch(t){return this._finish(e,t)}}_process(e){try{if(this.routes._[e.url])return this.routes._[e.url](e),!0;if(this.routes[e.query.method]&&this.routes[e.query.method][e.url])return this.routes[e.query.method][e.url](e),!0;for(let t of this.routesRegexp._)if(t.path.test(e.url))return t.cb(e),!0;if(this.routesRegexp[e.query.method])for(let t of this.routesRegexp[e.query.method])if(t.path.test(e.url))return t.cb(e),!0}catch(t){return this._finish(e,t)}this._finish(e,new Error("No route for path: '"+e.url+"'"))}_finish(e,t){this.onError&&this.onError(e,t),e.isClosed()||e.status(404).end()}}},420:e=>{e.exports=class{constructor(e){this.anysocket=e}}},555:(e,t,s)=>{const n=s(20);e.exports=new class{packInt32(e){const t=new ArrayBuffer(4);return new DataView(t).setInt32(0,e,!1),String.fromCharCode.apply(String,new Uint8Array(t))}unpackInt32(e){const t=new ArrayBuffer(4),s=new Uint8Array(t);for(let t in e)s[t]=e.charCodeAt(t);return new DataView(t).getInt32(0)}packHex(e){let t="";for(let s=0;s<e.length;s+=2)t+=String.fromCharCode(parseInt(e.substr(s,2),16));return t}unpackHex(e){let t="";for(let s=0;s<e.length;s++){let n=Number(e.charCodeAt(s)).toString(16);t+=1===n.length?"0"+n:n}return t}packBytes(e){if(!(e instanceof ArrayBuffer||e instanceof Uint8Array))throw new Error("packBytes requires ArrayBuffer or UInt8Array");return n.bufferToString(e)}unpackBytes(e){return n.bufferFromString(e)}}},717:(e,t,s)=>{s(954)("AnyPacket");const n=Symbol("send function");e.exports=class{constructor(e,t,s){this.peer=e,this.seq=t.seq,this.msg=t.data,this[n]=s}reply(e){this[n](e,this.seq)}}},155:(e,t,s)=>{const n=s(954)("AnyPeer"),i=s(501),r=s(267),o=s(558),c=s(717),h=s(555),a=Symbol("private protocol"),u=Symbol("packets"),l=Symbol("links"),d=s(20),p=function(e){return!0===e||!1===e||"[object Boolean]"===toString.call(e)};e.exports=class extends r{constructor(e){super(),this[l]={},this[a]=e,this[u]={},this.id=e.peerID,this.connectionID=e.connectionID,this.syncedTime=null,this.options=e.options;const t={get:(e,s)=>{const n=e[s];return null!=n?n:(e.path||(e.path=[]),e.path.push(s),new Proxy(e,{get:t.get,apply:(e,t,s)=>{let n=e.path;return e.path=[],new Promise(((e,t)=>{let r=[];for(let e in s)d.isBuffer(s[e])&&(s[e]=h.packBytes(s[e]),r.push(e));const c=o.data({type:i.INTERNAL_PACKET_TYPE.RPC,method:n,params:s||null,bin:r}).setType(i.PACKET_TYPE.INTERNAL);this._send(c,!0).then((s=>{if(s.msg.error)t(s.msg);else{let t=s.msg.result;s.msg.bin&&(t=h.unpackBytes(t)),e(t)}})).catch((e=>{t(c.msg)}))}))}}))}};this.rpc=new Proxy((()=>{}),t),e.on("internal",this.onInternalComs.bind(this)),e.on("message",this.onMessage.bind(this)),e.on("e2e",(()=>{this.onE2E()})),e.on("disconnected",((e,t)=>{this.emit("disconnected",e,t)}))}isProxy(){return this[a].isProxy()}addLink(e){this[l][e.id]=e}removeLink(e){delete this[l][e.id]}getLinks(){return this[l]}getSyncedTime(e){return e=e||!1,new Promise(((t,s)=>{if(!e&&this.syncedTime)t(Object.assign({time:Date.now()+this.syncedTime.offset},this.syncedTime));else{let e=Date.now();this.sendInternal({type:i.INTERNAL_PACKET_TYPE.SYNCED_TIME,time:e},!0).then((e=>{const s=e.msg.o,n=e.msg.t,i=e.msg.t,r=Date.now();this.syncedTime={rtt:r-s-(i-n),offset:(n-s+(i-r))/2},t(Object.assign({time:Date.now()+this.syncedTime.offset},this.syncedTime))})).catch(s)}}))}e2e(){this[a].e2e()}isE2EEnabled(){return this[a].hasE2EEnabled()}send(e,t,s){const n=o.data(e).setType(i.PACKET_TYPE.LINK);return this._send(n,t,s)}forward(e){this[a].forward(e)}sendInternal(e,t,s){const n=o.data(e).setType(i.PACKET_TYPE.INTERNAL);return this._send(n,t,s)}onMessage(e,t){t.seq<0?this._resolveReply(t)||n("Dropped reply "+t.seq+". Delivered after Timeout"):this.emit("message",new c(this,t,this.send.bind(this)))}onE2E(){this.emit("e2e",this)}onInternalComs(e,t){t.seq<0?this._resolveReply(t)||n("Dropped reply "+t.seq+". Delivered after Timeout"):t.type==i.PACKET_TYPE.INTERNAL?this.emit("internal",new c(this,t,this.sendInternal.bind(this))):n("Dropped internal packet!",t)}disconnect(e){for(let e in this[u])clearTimeout(this[u][e].timeout),this[u][e].reject("Peer disconnected!");this[u]={},this[a].disconnect(e)}_send(e,t,s){return new Promise(((n,i)=>{this[a].isConnected()?(!p(t)&&t&&t>0&&e.setReplyTo(t),this[a].send(e),p(t)&&!0===t&&(this[u][e.seq]={time:(new Date).getTime(),resolve:n,reject:i,timeout:setTimeout((()=>{if(this[u][e.seq]){let t=this[u][e.seq];delete this[u][e.seq],this.disconnect("Missed reply timeout! Packet Type: "+o.TYPE._string(e.type)+" - "+e.seq),t.reject("Timeout!")}}),s||this[a].options.replyTimeout)})):i("Cannot send message. Peer is disconnected")}))}_recvForward(e){this[a]._recvPacketQueue.push({peer:this[a].peer,recv:e.msg,state:this[a].ENCRYPTION_STATE})}_resolveReply(e){if(e.seq*=-1,this[u][e.seq]){const t=this[u][e.seq];return delete this[u][e.seq],clearTimeout(t.timeout),t.resolve(new c(this,e,(()=>{n("Cannot reply to a reply packet!")}))),!0}return!1}}},288:(e,t,s)=>{const n=s(954)("AnyProtocol"),i=s(267),r=s(373),o=s(558),c=s(661),h=s(555),a=s(501),u=Symbol("secret key"),l=Symbol("private key"),d=Symbol("nonce"),p=Symbol("heartbeat timer"),T=Symbol("heartbeats missed"),E=Symbol("heartbeat ponged"),y=Symbol("authTimeout"),m=Symbol("e2eTimeout");e.exports=class extends i{constructor(e,t,s){super(),this._seq=0,this[u]=null,this[l]=null,this[d]=null,this[p]=0,this[T]=0,this[E]=!0,this[y]=!1,this[m]=!1,this.peerID=t.id,this.peer=t,this.options=Object.assign({authTimeout:5e3,e2eTimeout:5e3,replyTimeout:3e4,heartbeatInterval:5e3},s),this.connectionID=this.peer.connectionID,this.anysocket=e,this._packetQueue=r(this,this.processPacketQueue.bind(this),1),this._linkPacketQueue=r(this,this.processLinkPacketQueue.bind(this),1),this._recvPacketQueue=r(this,this.processRecvPacketQueue.bind(this),1),this._recvLinkPacketQueue=r(this,this.processRecvLinkPacketQueue.bind(this),1),this._packets={},this.changeState(a.PROTOCOL_STATES.ESTABLISHED),this.ENCRYPTION_STATE=a.PROTOCOL_ENCRYPTION.PLAIN,this.peer.on("message",((e,t)=>{this._recvPacketQueue.push({peer:e,recv:t,state:this.ENCRYPTION_STATE})})),this.peer.isClient()&&!this.peerID&&(this.changeState(a.PROTOCOL_STATES.AUTHING),this.send(o.data({id:this.anysocket.id,auth:this.anysocket.authPacket()}).setType(o.TYPE.AUTH))),this.peerID&&this.changeState(a.PROTOCOL_STATES.CONNECTED)}isProxy(){return!!this.peer.isProxy}isConnected(){return this.state!=a.PROTOCOL_STATES.DISCONNECTED}send(e){return 0==e.seq&&e.setSeq(this._getSeq()),e.type!=o.TYPE.HEARTBEAT&&this._heartbeat(),new Promise(((t,s)=>{const n=e=>{this.disconnect(e),s(e)};this.isLINKMessage(e.type)?this._linkPacketQueue.push({packet:e,resolve:t,reject:n}):this._send(e,t,n)}))}_send(e,t,s){n(this.peerID,">>>>",o.TYPE._string(e.type),e.seq),e.serialize(a.MAX_PACKET_SIZE,this._encrypt.bind(this)).then((e=>{for(let n=0;n<e.length;n++){const i={packet:e[n],reject:s};n==e.length-1&&(i.resolve=t),this._packetQueue.push(i)}})).catch(s)}forward(e){return new Promise(((t,s)=>{this._packetQueue.push({packet:this._encodeForwardPacket(e.to,e.from,e.msg),resolve:t,reject:s})}))}hasE2EEnabled(){return!!this[l]}e2e(){c.generateAESKey().then((e=>{this[l]=e.private,this[d]=e.nonce,this.changeState(a.PROTOCOL_STATES.SWITCHING_PROTOCOL),this.send(o.data({type:a.PROTOCOL_ENCRYPTION.E2EE,key:e.public,nonce:e.nonce}).setType(o.TYPE.SWITCH))})).catch((e=>{this.disconnect(e)}))}onPacket(e,t,s){return this._heartbeat(),new Promise(((e,i)=>{let r=!0;if(o.isForwardPacket(t))this.emit("forward",this.peerID,this._decodeForwardPacket(t)),e();else{let i=o.getSeq(t);this._packets[i]||(this._packets[i]=o.buffer());let h=this._packets[i];h.deserialize(t,s,this._decrypt.bind(this)).then((t=>{if(n(this.peerID,"<<<<",o.TYPE._string(h.type),h.seq),t){switch(delete this._packets[i],this.state){case a.PROTOCOL_STATES.ESTABLISHED:if(h.type==o.TYPE.AUTH){if(r=!1,!h.data.id||!this.anysocket.onAuth(h.data))return this.disconnect("Invalid Auth Packet!");this.peerID=h.data.id,this.send(o.data({id:this.anysocket.id,auth:this.anysocket.authPacket()}).setType(o.TYPE.AUTH)).then((()=>{this.changeState(a.PROTOCOL_STATES.CONNECTED),this.emit("ready",this)})),e()}break;case a.PROTOCOL_STATES.AUTHING:if(h.type==o.TYPE.AUTH){if(r=!1,this.changeState(a.PROTOCOL_STATES.CONNECTED),!h.data.id||!this.anysocket.onAuth(h.data))return this.disconnect("Invalid Auth Packet!");this.peerID=h.data.id,this.emit("ready",this),e()}break;case a.PROTOCOL_STATES.CONNECTED:h.type==o.TYPE.LINK?(r=!1,this.emit("message",this,{seq:h.seq,data:h.data}),e()):h.type==o.TYPE.INTERNAL?(r=!1,this.emit("internal",this,{seq:h.seq,type:h.type,data:h.data}),e()):h.type==o.TYPE.SWITCH?(r=!1,c.generateAESKey().then((t=>(this[l]=t.private,this[d]=h.data.nonce+t.nonce,c.getAESSessionKey(this[d],this.peerID,0).then((s=>(this[d]=s,c.computeAESsecret(this[l],h.data.key).then((s=>{this[u]=s,this.send(o.data({type:a.PROTOCOL_ENCRYPTION.E2EE,key:t.public,nonce:t.nonce}).setType(o.TYPE.SWITCH)).then((()=>{this.ENCRYPTION_STATE=a.PROTOCOL_ENCRYPTION.E2EE,this.changeState(a.PROTOCOL_STATES.CONNECTED),this.emit("e2e",this),e()}))})))))))).catch((e=>{this.disconnect(e)}))):h.type==o.TYPE.HEARTBEAT&&(r=!1,this._heartbeatPong(h.data),e());break;case a.PROTOCOL_STATES.SWITCHING_PROTOCOL:h.type==o.TYPE.SWITCH&&(r=!1,this[d]=this[d]+h.data.nonce,c.getAESSessionKey(this[d],this.anysocket.id,0).then((t=>(this[d]=t,c.computeAESsecret(this[l],h.data.key).then((t=>{this[u]=t,this.ENCRYPTION_STATE=a.PROTOCOL_ENCRYPTION.E2EE,this.changeState(a.PROTOCOL_STATES.CONNECTED),this.emit("e2e",this),e()}))))).catch((e=>{this.disconnect(e)})));break;case a.PROTOCOL_STATES.DISCONNECTED:r=!1,e()}if(r)return console.log("Invalid packet received! RECV:",h),this.disconnect("Invalid Packet!")}else e()}))}}))}changeState(e){switch(this.state=e,this.state){case a.PROTOCOL_STATES.ESTABLISHED:this[y]=setTimeout((()=>{this.disconnect("auth timed out")}),this.options.authTimeout),this._linkPacketQueue.pause(),this._recvLinkPacketQueue.pause();break;case a.PROTOCOL_STATES.AUTHING:clearTimeout(this[y]),this[y]=!1,this._linkPacketQueue.pause(),this._recvLinkPacketQueue.pause();break;case a.PROTOCOL_STATES.CONNECTED:clearTimeout(this[y]),this[y]=!1,clearTimeout(this[m]),this[m]=!1,this._linkPacketQueue.resume(),this._recvLinkPacketQueue.resume();break;case a.PROTOCOL_STATES.SWITCHING_PROTOCOL:this[m]=setTimeout((()=>{this.disconnect("e2e timed out")}),this.options.e2eTimeout),this._linkPacketQueue.pause(),this._recvLinkPacketQueue.pause();break;case a.PROTOCOL_STATES.DISCONNECTED:this._packetQueue.pause(),this._packetQueue.kill(),this._linkPacketQueue.pause(),this._linkPacketQueue.kill(),this._recvPacketQueue.pause(),this._recvPacketQueue.kill(),this._recvLinkPacketQueue.pause(),this._recvLinkPacketQueue.kill()}}disconnect(e){this.changeState(a.PROTOCOL_STATES.DISCONNECTED),this._heartbeat(),this.isProxy()?this.anysocket.unproxy(this.peer.id,this.peer.socket.id,e):this.peer.disconnect(e)}processPacketQueue(e,t){this.peer.send(e.packet).then((()=>{e.resolve&&e.resolve(),t(null,null)})).catch((s=>{e.reject(s),this._packetQueue.kill(),t(null,null)}))}processLinkPacketQueue(e,t){this._send(e.packet,e.resolve,e.reject),t(null,null)}processRecvPacketQueue(e,t){o.isForwardPacket(e.recv)?(this.emit("forward",this.peerID,this._decodeForwardPacket(e.recv)),t(null,null)):this.isLINKMessage(o.getType(e.recv))?(this._recvLinkPacketQueue.push(e),t(null,null)):this.onPacket(e.peer,e.recv,e.state).then((()=>{t(null,null)}))}processRecvLinkPacketQueue(e,t){this.onPacket(e.peer,e.recv,e.state).then((()=>{t(null,null)}))}_encrypt(e,t){return new Promise((s=>{switch(this.ENCRYPTION_STATE){case a.PROTOCOL_ENCRYPTION.PLAIN:s(e);break;case a.PROTOCOL_ENCRYPTION.E2EE:c.getAESSessionKey(this[u],this[d],t).then((t=>c.encryptAES(t,e).then(s))).catch((e=>{this.disconnect(e)}));break;default:throw new Error("[encrypt] Encryption state '"+this.ENCRYPTION_STATE+"' not implemented!")}}))}_decrypt(e,t,s){return new Promise((n=>{switch(e){case a.PROTOCOL_ENCRYPTION.PLAIN:n(t);break;case a.PROTOCOL_ENCRYPTION.E2EE:c.getAESSessionKey(this[u],this[d],s).then((e=>c.decryptAES(e,t).then(n))).catch((e=>{this.disconnect(e)}));break;default:throw new Error("[decrypt] Encryption state '"+e+"' not implemented!")}}))}_encodeForwardPacket(e,t,s){return o.TYPE.FORWARD+h.packHex(e)+h.packHex(t)+s}_decodeForwardPacket(e){return{to:h.unpackHex(e.substr(1,16)),from:h.unpackHex(e.substr(17,16)),msg:e.substr(33)}}_getSeq(){return this._seq>=2147483647&&(this._seq=0),this._seq++,this._seq}_heartbeat(){this.isProxy()||(clearTimeout(this[p]),this.state!=a.PROTOCOL_STATES.AUTHING&&this.state!=a.PROTOCOL_STATES.DISCONNECTED&&(this[p]=setTimeout((()=>{if(!this[E])return this[T]++,this[T]>=2?void this.disconnect("Missed Heartbeats"):void this._heartbeat();this[T]=0,this[E]=!1;const e=o.data(1).setType(o.TYPE.HEARTBEAT);this.send(e).catch((e=>{n("Heartbeat Error:",e),this.disconnect(e)}))}),this.options.heartbeatInterval)))}_heartbeatPong(e){if(1==e){const e=o.data(2).setType(o.TYPE.HEARTBEAT);this.send(e).catch((e=>{n("Heartbeat Error:",e),this.disconnect(e)}))}else this[E]=!0}isLINKMessage(e){return-1!=[o.TYPE.INTERNAL,o.TYPE.LINK].indexOf(e)}}},100:(e,t,s)=>{const n=s(954)("AnySocket"),i=s(69),r=s(267),o=s(661),c=s(20),h=s(501),a=s(69),u=s(117),l=Symbol("peers connected"),d=Symbol("ready peers"),p=Symbol("transports"),T=Symbol("onForward"),E=Symbol("onPeerConnected"),y=Symbol("onPeerReady"),m=Symbol("onPeerDisconnected"),f=Symbol("onPeerInternalMessage"),P=Symbol("findTransport"),k=Symbol("http bundle js"),w=Symbol("AnyMesh"),b=Symbol("HTTPServer"),C=s(155),_=s(420),S=s(288),g=s(366);class A extends r{constructor(){return super(),this._started=!1,this.id=o.uuidv4(),this.http=new u,n("AnySocketID:",this.id),this.rpc={},this[l]={},this[d]={},this[p]={},this[b]=null,this[w]=null,"undefined"==typeof window&&(this[k]=i.readFileSync("//../../dist/anysocket.browser.js")),this}filter(e){}broadcast(e,t){return t=t||!1,new Promise(((s,n)=>{const i=[];for(let r in this[d])r=this[d][r],i.push(r.send(e,t)),Promise.all(i).then(s).catch(n)}))}mesh(){if(this._started)throw new Error("Cannot enable Mesh while AnySocket is running. You must first stop AnySocket!");this[w]=new _(this)}setRPC(e){this.rpc=e}canProxy(e,t){return!1}proxy(e,t){return new Promise(((s,n)=>{e!=t&&e!=this.id?this[d][t].isProxy()?n("Cannot proxy via a proxy! atm... :)"):this[d][t].sendInternal({type:h.INTERNAL_PACKET_TYPE.PROXY,action:"proxy",id:e},!0).then((i=>{if(i.msg.ok&&!this[d][e]){let n=new S(this,new g(!0,this.id,e,this[d][t]),this[d][t].options);this[y](n),s(this[d][e])}else n("Cannot proxy!")})).catch(n):n("Cannot proxy loopback!")}))}unproxy(e,t,s){s=s||"Proxy Connection Closed",this[d][e]&&this[d][e].isProxy()&&(this[d][t].sendInternal({type:h.INTERNAL_PACKET_TYPE.PROXY,action:"unproxy",id:e}),this[m](this[d][e],s))}hasPeer(e){return!!this[d][e]}hasDirectPeer(e){return!(!this[d][e]||this[d][e].isProxy())}server(e,t){return this.listen(e,t)}listen(e,t){if(this._started=!0,"number"==typeof(t=t||{})&&(t={port:t}),t.ip=t.ip||"0.0.0.0",-1==["http","ws"].indexOf(e.toLowerCase())&&!t.port)throw new Error("Invalid port!");-1!=["ws"].indexOf(e.toLowerCase())&&(this[b]||this.listen("http",t),t={server:this[b]});let s=this[P](e);s=new s("server",t),this[p][s.id]=s,s.on("connected",(e=>{this[E](e,s.options)})),s.on("disconnected",((e,t)=>{this[m](e,t)}));let n=s.listen();return"http"==e&&(this[b]=s.server),n}connect(e,t,s,i){return new Promise(((r,o)=>{this._started=!0,i=Object.assign(i||{},{ip:t,port:s});let c=this[P](e);c=new c("client",i),c.on("connected",(e=>{this[p][c.id]=c,this[E](e,c.options,r),n("Transports Added",c.id,Object.keys(this[p]).length)})),c.on("disconnected",((e,t)=>{this[p][c.id].stop(),delete this[p][c.id],this[m](e,t),n("Transports left",c.id,Object.keys(this[p]).length),this[d][e.id]||o(t)})),c.connect().catch(o)}))}stop(){return this._started=!1,new Promise(((e,t)=>{const s=[];for(let e in this[p])s.push(this[p][e].stop());Promise.all(s).then((()=>{this[l]={},this[d]={},this[p]={},e()})).catch((e=>{throw e}))}))}onAuth(e){return!0}authPacket(){}[P](e){for(let t in A.Transport)if(A.Transport.hasOwnProperty(t)&&A.Transport[t].scheme()==e)return A.Transport[t];throw new Error("Invalid scheme '"+e+"'")}[E](e,t,s){if(n("Peer connected"),"http"==e.type)return e.on("upgrade",((e,t)=>{let s=new a(e,t);s.header("ANYSOCKET-ID",this.id),this.http._processUpgrade(s),this.emit("http_upgrade",s,e,t)})),void e.on("message",((e,t)=>{let s=new a(e,t);if("/@anysocket"==s.url)return s.body(this[k]),void s.end();e.body="",e.on("error",(e=>{console.log("Err",e)})).on("data",(t=>{e.body+=t,e.body.length>1e7&&e.connection.destroy()})).on("end",(()=>{e.body=e.body.toString(),s.header("ANYSOCKET-ID",this.id),this.http._process(s),this.emit("http",s,e,t)}))}));const i=new S(this,e,t);this[l][e.connectionID]=i,i.on("forward",this[T].bind(this)),i.once("ready",(e=>{this[y](e,s)}))}[T](e,t){if(this.id==t.to){if(!this[d][t.from])return void this[d][e].disconnect("Invalid forward packet! Client doesn't exist!");this[d][t.from]._recvForward(t)}else this.hasDirectPeer(t.to)?this[d][t.to].forward(t):console.error("FORWARD ERROR! We do not have the peer",t.to)}[y](e,t){if(this[d][e.peerID])return e.peerID=null,void e.disconnect("Duplicated AnySocket ID found!");n("Peer ready");const s=new C(e);return this[d][e.peerID]=s,s.on("message",(e=>{this.emit("message",e)})),s.on("e2e",(e=>{this.emit("e2e",e)})),s.on("internal",this[f].bind(this)),t&&t(s),setTimeout((()=>{this.emit("connected",s)}),0),s}[m](e,t){n("Peer disconnected",t,e.id);let s=null;if(this[l][e.connectionID]&&(s=this[l][e.connectionID].peerID,delete this[l][e.connectionID]),this[d][e.id]&&(s=e.id),s){const e=this[d][s];delete this[d][s];const n=e.getLinks();for(let t in n)n[t].sendInternal({type:h.INTERNAL_PACKET_TYPE.NETWORK,action:"disconnected",id:e.id}).catch((()=>{})),e.removeLink(n[t]),this[d][t]&&this[d][t].removeLink(e);e.disconnect(),this.emit("disconnected",e,t)}else e.disconnect()}[f](e){if(e.msg.type==h.INTERNAL_PACKET_TYPE.NETWORK){if("connected"==e.msg.action){if(!this[d][e.msg.id]){let t=new S(this,new g(!1,this.id,e.msg.id,this[d][e.peer.id]));this[y](t)}}else if("disconnected"==e.msg.action){if(!this[d][e.msg.id])return void e.peer.disconnect("Invalid proxy request!");this[m](this[d][e.msg.id],"Proxy Connection Closed")}}else if(e.msg.type==h.INTERNAL_PACKET_TYPE.PROXY){if("proxy"==e.msg.action){if(!this.canProxy(e.peer.id,e.msg.id)||!this[d][e.msg.id])return void e.peer.disconnect("Invalid proxy request!");if(this[d][e.msg.id].isProxy())return void e.reply({ok:!1});this[d][e.msg.id].addLink(this[d][e.peer.id]),this[d][e.peer.id].addLink(this[d][e.msg.id]),this[d][e.msg.id].sendInternal({type:h.INTERNAL_PACKET_TYPE.NETWORK,action:"connected",id:e.peer.id}),e.reply({ok:!0})}else if("unproxy"==e.msg.action){if(!this.canProxy(e.peer.id,e.msg.id)||!this[d][e.msg.id])return void e.peer.disconnect("Invalid proxy request!");this[d][e.msg.id].removeLink(this[d][e.peer.id]),this[d][e.peer.id].removeLink(this[d][e.msg.id]),this[d][e.msg.id].sendInternal({type:h.INTERNAL_PACKET_TYPE.NETWORK,action:"disconnected",id:e.peer.id})}}else if(e.msg.type==h.INTERNAL_PACKET_TYPE.RPC){let t=!1,s=this.rpc;for(let n in e.msg.method)if(t=s,s=s[e.msg.method[n]],!s)break;if(t&&s&&"function"==typeof s)try{for(let t of e.msg.bin)e.msg.params[t]=A.Packer.unpack(e.msg.params[t]);Promise.resolve(s.apply(t,e.msg.params)).then((t=>{let s=!1;c.isBuffer(t)&&(t=A.Packer.pack(t),s=!0),e.reply({result:t,bin:s})})).catch((t=>{e.reply({error:t,code:500})}))}catch(t){e.reply({error:t.message,code:500})}else e.reply({error:"Method not found",code:404})}else e.msg.type==h.INTERNAL_PACKET_TYPE.RPC_NOTIFY?console.log("RPC_NOTIFY",e.msg):e.msg.type==h.INTERNAL_PACKET_TYPE.SYNCED_TIME?e.reply({o:e.msg.time,t:Date.now()}):e.peer.disconnect("Invalid internal message")}}e.exports=A},558:(e,t,s)=>{const n=s(555),i=s(501),r=e=>n.unpackInt32(e.substr(2,4)),o=e=>parseInt(e.substr(1,1)),c={};class h{constructor(e){this.seq=0,this.type=0,this.buffer=[],this.data=null,e&&(this.data=e)}setType(e){return this.type=e,this}setSeq(e){return this.seq=e,this}setReplyTo(e){return e&&(this.seq=-e),this}async serialize(e,t){e=e||Number.MAX_SAFE_INTEGER;let s=[JSON.stringify(this.data)];s[0].length>e&&(c[e]=c[e]||new RegExp("(.{1,"+e+"})","g"),s=s[0].match(c[e]));for(let e=0;e<s.length;e++)s[e]=(e==s.length-1?i.PACKET_LENGTH.FULL:i.PACKET_LENGTH.PARTIAL).toString()+this.type.toString()+n.packInt32(this.seq)+await t(s[e],Math.abs(this.seq));return s}async deserialize(e,t,s){s=s||(e=>Promise.resolve(e));const n=e.substr(0,1)==i.PACKET_LENGTH.FULL;if(this.type=o(e),this.seq=r(e),this.buffer.push(await s(t,e.substr(6),Math.abs(this.seq))),n){try{this.buffer=this.buffer.join("");let e=JSON.parse(this.buffer);this.buffer=[],this.data=e}catch(e){this.data=null}return!0}return!1}}e.exports={data:e=>new h(e=e||{}),buffer:()=>new h,getSeq:e=>r(e),getType:e=>o(e),isForwardPacket:e=>e.substr(0,1)==i.PACKET_TYPE.FORWARD,TYPE:i.PACKET_TYPE}},366:(e,t,s)=>{const n=s(586),i=s(162);e.exports=class extends n{constructor(e,t,s,n){super(n),this.id=s,this.anysocketID=t,this.type=e?i.TYPE.CLIENT:i.TYPE.SERVER,this.isProxy=!0,this.init()}onConnect(){}send(e){return new Promise(((t,s)=>{try{this.socket.forward({to:this.id,from:this.anysocketID,msg:e}),t()}catch(e){s(e)}}))}onDisconnect(){}}},501:e=>{const t={PACKET_TYPE:{AUTH:1,INTERNAL:2,LINK:3,SWITCH:4,HEARTBEAT:5,FORWARD:6},PACKET_LENGTH:{FULL:1,PARTIAL:2},INTERNAL_PACKET_TYPE:{NETWORK:1,PROXY:2,RPC:3,RPC_NOTIFY:4,SYNCED_TIME:5},PROTOCOL_STATES:{ESTABLISHED:0,AUTHING:1,CONNECTED:2,SWITCHING_PROTOCOL:3,DISCONNECTED:4},PROTOCOL_ENCRYPTION:{PLAIN:1,E2EE:2},MAX_PACKET_SIZE:524288};for(let e in t)t[e]._string=s=>{for(let n in t[e])if(t[e][n]==s)return n;return s};e.exports=t},510:(e,t,s)=>{const n=s(147),i=s(20);e.exports=new class{uuidv4(){return"xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx".replace(/[xy]/g,(function(e){const t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))}generateAESKey(){return new Promise((async(e,t)=>{let s=await n.createECDH("secp521r1"),r=await s.generateKeys();e({private:s,public:i.bufferToString(r),nonce:i.bufferToHex(n.randomBytes(32))})}))}computeAESsecret(e,t){return new Promise((async(s,n)=>{let r=await e.computeSecret(i.bufferFromString(t),null,"hex");r=r.substr(0,128),s(r)}))}getAESSessionKey(e,t,s){return new Promise((async(r,o)=>{t=t+"_"+s,e=await n.pbkdf2Sync(e,t,1,32,"sha256"),r(e=i.bufferToHex(e))}))}encryptAES(e,t){return new Promise(((s,r)=>{try{let r=n.randomBytes(16),o=n.createCipheriv("aes-256-cbc",i.bufferFromHex(e),r),c=o.update(t);c=Buffer.concat([c,o.final()]);let h=r.toString("hex")+c.toString("hex");this.decryptAES(e,h),s(h)}catch(e){r(e)}}))}decryptAES(e,t){return new Promise(((s,r)=>{try{let r=Buffer.from(t.substr(0,32),"hex"),o=Buffer.from(t.substr(32),"hex"),c=n.createDecipheriv("aes-256-cbc",i.bufferFromHex(e),r),h=c.update(o);h=Buffer.concat([h,c.final()]),s(h.toString())}catch(e){r(e)}}))}}},586:(e,t,s)=>{const n=s(267),i=s(661),r=s(162);e.exports=class extends n{constructor(e){super(),this.connectionID=i.uuidv4(),this.connected=!0,this.socket=e,this.type=r.TYPE.NONE,this.inited=!1}init(){this.inited||(this.inited=!0,this.onConnect(),this.emit("connected",this))}isClient(){if(this.type==r.TYPE.NONE)throw new Error("Invalid transport type!!!");return this.type==r.TYPE.CLIENT}disconnect(e){this.connected&&(this.connected=!1,this.onDisconnect(),this.emit("disconnected",this,e))}send(e){throw new Error("send() must be implemented")}onConnect(){throw new Error("onConnect() must be implemented")}onDisconnect(){throw new Error("onDisconnect() must be implemented")}}},162:(e,t,s)=>{const n=s(267),i=s(661);class r extends n{constructor(e,t){super(),this.id=i.uuidv4(),this.options=Object.assign({},t),this.type=e,this.peers=new Map,this.started=!1}listen(){return new Promise(((e,t)=>{this.started?e():this.onListen().then((()=>{this.started=!0,e()})).catch((e=>{t(e)}))}))}connect(){return new Promise(((e,t)=>{this.started?e():this.onConnect().then((()=>{this.started=!0,e()})).catch((e=>{t(e)}))}))}stop(){return new Promise(((e,t)=>{if(this.started){this.started=!1;for(const e of this.peers.values())e.disconnect("Local Connection Closed");this.onStop().then((()=>{e()})).catch((e=>{t(e)}))}else e()}))}addPeer(e){e.type=this.type,e.on("connected",(()=>{this.peers.set(e.connectionID,e),this.emit("connected",e)})),e.on("disconnected",((e,t)=>{this.peers.delete(e.connectionID),this.emit("disconnected",e,t)})),e.init()}onConnect(){throw new Error("onConnect() must be implemented")}onListen(){throw new Error("onListen() must be implemented")}onStop(){throw new Error("onStop() must be implemented")}}var o,c,h;h=()=>{throw new Error("static scheme() must be implemented")},(c="scheme")in(o=r)?Object.defineProperty(o,c,{value:h,enumerable:!0,configurable:!0,writable:!0}):o[c]=h,e.exports=r,r.TYPE={CLIENT:"client",SERVER:"server",HTTP:"http"}},683:(e,t,s)=>{const n=s(586);e.exports=class extends n{onConnect(){this.socket.on("close",(()=>{this.disconnect("Remote Connection Closed")})),this.socket.on("error",(e=>{this.emit("error",this,e)})),this.socket.on("message",(e=>{this.emit("message",this,e)}))}send(e){return new Promise(((t,s)=>{try{this.socket.send(e),t()}catch(e){s(e)}}))}onDisconnect(){this.socket&&(this.socket.close(),this.socket.terminate(),this.socket=null)}}},866:(e,t,s)=>{const n=s(162),i=s(683),r=s(966);e.exports=class extends n{constructor(e,t){super(e,t)}static scheme(){return"ws"}onListen(){return new Promise(((e,t)=>{this.ws=new r.Server({server:this.options.server}),this.ws.on("connection",(e=>{this.addPeer(new i(e))})),this.ws.on("error",(e=>{t(e)})),this.ws.on("listening",(()=>{e()}))}))}onConnect(e){return new Promise(((t,s)=>{let n=!1,o=null;this.options.cookies&&(o={headers:{Cookie:this._formatCookies(this.options.cookies)}});let c=new r((e?"ws":"wss")+"://"+this.options.ip+":"+this.options.port+"/",o);c.on("open",(e=>{n=!0,this.addPeer(new i(c)),t()})),c.on("error",(i=>{e||n?s(i):this.onConnect(!0).then(t).catch(s),n=!1}))}))}onStop(){return new Promise(((e,t)=>{this.ws&&(this.ws.close(),this.ws=null),e()}))}_formatCookies(e){let t=[];for(let s in e)t.push(s+"="+e[s]);return t.join("; ")}}},373:(e,t,s)=>{"use strict";var n=s(650);function i(e,t,s){if("function"==typeof e&&(s=t,t=e,e=null),s<1)throw new Error("fastqueue concurrency must be greater than 1");var i=n(o),c=null,h=null,a=0,u=null,l={push:function(s,n){var o=i.get();o.context=e,o.release=d,o.value=s,o.callback=n||r,o.errorHandler=u,a===l.concurrency||l.paused?h?(h.next=o,h=o):(c=o,h=o,l.saturated()):(a++,t.call(e,o.value,o.worked))},drain:r,saturated:r,pause:function(){l.paused=!0},paused:!1,concurrency:s,running:function(){return a},resume:function(){if(l.paused){l.paused=!1;for(var e=0;e<l.concurrency;e++)a++,d()}},idle:function(){return 0===a&&0===l.length()},length:function(){for(var e=c,t=0;e;)e=e.next,t++;return t},getQueue:function(){for(var e=c,t=[];e;)t.push(e.value),e=e.next;return t},unshift:function(s,n){var o=i.get();o.context=e,o.release=d,o.value=s,o.callback=n||r,a===l.concurrency||l.paused?c?(o.next=c,c=o):(c=o,h=o,l.saturated()):(a++,t.call(e,o.value,o.worked))},empty:r,kill:function(){c=null,h=null,l.drain=r},killAndDrain:function(){c=null,h=null,l.drain(),l.drain=r},error:function(e){u=e}};return l;function d(s){s&&i.release(s);var n=c;n?l.paused?a--:(h===c&&(h=null),c=n.next,n.next=null,t.call(e,n.value,n.worked),null===h&&l.empty()):0==--a&&l.drain()}}function r(){}function o(){this.value=null,this.callback=r,this.next=null,this.release=r,this.context=null,this.errorHandler=null;var e=this;this.worked=function(t,s){var n=e.callback,i=e.errorHandler,o=e.value;e.value=null,e.callback=r,e.errorHandler&&i(t,o),n.call(e.context,t,s),e.release(e)}}e.exports=i,e.exports.promise=function(e,t,s){"function"==typeof e&&(s=t,t=e,e=null);var n=i(e,(function(e,s){t.call(this,e).then((function(e){s(null,e)}),s)}),s),r=n.push,o=n.unshift;return n.push=function(e){return new Promise((function(t,s){r(e,(function(e,n){e?s(e):t(n)}))}))},n.unshift=function(e){return new Promise((function(t,s){o(e,(function(e,n){e?s(e):t(n)}))}))},n}},650:e=>{"use strict";e.exports=function(e){var t=new e,s=t;return{get:function(){var n=t;return n.next?t=n.next:(t=new e,s=t),n.next=null,n},release:function(e){s.next=e,s=e}}}}},t={};return function s(n){if(t[n])return t[n].exports;var i=t[n]={exports:{}};return e[n](i,i.exports,s),i.exports}(506)})();`);
  }
};

// src/libs/Utils.ts
var Utils_default = new class Utils {
  async getSHA(data) {
    if (!data)
      return null;
    let sha = await crypto.subtle.digest("SHA-256", new TextEncoder("utf-8").encode(data));
    return Array.prototype.map.call(new Uint8Array(sha), (x) => ("00" + x.toString(16)).slice(-2)).join("");
  }
}();

// src/libs/AnysocketManager.ts
var EventEmitter = require_Events();
var AnysocketManager = class extends EventEmitter {
  constructor(xSync) {
    super();
    this.eventRefs = {};
    this.isConnected = false;
    this.notifiedOfConnectError = false;
    this.peer = null;
    this.xSync = xSync;
    this.plugin = xSync.plugin;
    AnySocketLoader.load();
    this.anysocket = new AnySocket();
    console.log("AnySocket Sync (" + this.plugin.VERSION + ") - Enabled");
    if (app.isMobile) {
      activeWindow.onblur = () => {
        this.emit("unload");
      };
      activeWindow.onfocus = () => {
        this.emit("reload");
      };
    }
  }
  async getTime() {
    return Date.now();
  }
  async init() {
    this.anysocket.removeAllListeners();
    let password = await Utils_default.getSHA(this.anysocket.id.substring(0, 16) + this.plugin.settings.password + this.anysocket.id.substring(16));
    this.anysocket.authPacket = () => {
      return password;
    };
    this.anysocket.onAuth = async (packet) => {
      return await Utils_default.getSHA(packet.id.substring(0, 16) + this.plugin.settings.password + packet.id.substring(16)) == packet.auth;
    };
    this.anysocket.on("message", async (packet) => {
      this.emit("message", packet);
    });
    this.anysocket.on("e2e", async (peer) => {
      this.isConnected = true;
      this.getTime = async () => {
        return Math.round((await peer.getSyncedTime()).time);
      };
      await this.getTime();
      app.workspace.onLayoutReady(async () => {
        await this.checkForUpdates(peer);
      });
    });
    this.anysocket.on("disconnected", (peer) => {
      this.peer = null;
      this.emit("disconnected");
      this.emit("reload");
    });
    this.connect();
  }
  async checkForUpdates(peer) {
    let result = await peer.rpc.onVersionCheck(this.plugin.VERSION, this.plugin.BUILD);
    if (result.type == "ok") {
      this.peer = peer;
      this.emit("connected", peer);
    } else if (result.type == "update") {
      await this.xSync.storage.updatePlugin(result.files);
      window._anysocketID = this.anysocket.id;
      this.anysocket.removeAllListeners("disconnected");
      app.plugins.disablePlugin("obsidian-anysocket-sync");
      new import_obsidian.Notice("\u{1F7E1} AnySocket Sync - Updated to version: " + result.version);
      app.plugins.enablePlugin("obsidian-anysocket-sync");
    } else {
      this.anysocket.removeAllListeners();
      this.emit("unload");
      new import_obsidian.Notice("\u{1F7E1} AnySocket Sync - Incompatible client version " + this.plugin.VERSION);
    }
  }
  connect() {
    if (!this.isEnabled) {
      return;
    }
    if (!this.plugin.settings.password) {
      console.log("AnySocket Sync - Requires setup");
      new import_obsidian.Notice("\u{1F7E1} AnySocket Sync - Requires setup");
      this.emit("unload");
      return;
    }
    if (window._anysocketID) {
      this.anysocket.id = window._anysocketID;
      delete window._anysocketID;
    }
    this.anysocket.connect("ws", this.plugin.settings.host, this.plugin.settings.port).then(async (peer) => {
      peer.e2e();
      this.notifiedOfConnectError = false;
    }).catch((e) => {
      console.error("AnySocket Connect Error", e);
      this.isConnected = false;
      if (!this.notifiedOfConnectError) {
        this.notifiedOfConnectError = true;
        new import_obsidian.Notice("\u{1F7E1} AnySocket Sync - Could not connect to the server");
      }
      this.emit("reload");
    });
  }
  async send(packet) {
    return await this.peer.send(packet);
  }
  stop() {
    this.anysocket.stop();
  }
};

// src/libs/fs/FSAdapter.ts
var FSAdapter = class {
  constructor(basePath) {
    this.basePath = basePath;
  }
  async makeFolder(path) {
    await app.vault.createFolder(this.basePath + path).catch(() => {
    });
  }
  async write(path, data, mtime) {
    if (!await this.exists(path)) {
      let folder = path.split("/").slice(0, -1).join("/");
      if (folder) {
        await this.makeFolder(folder);
      }
    }
    if (data != null) {
      let options = null;
      if (mtime) {
        options = {
          mtime
        };
      }
      await app.vault.adapter.write(this.basePath + path, data, options);
    }
    return data;
  }
  async read(path) {
    try {
      return await app.vault.adapter.read(this.basePath + path);
    } catch (e) {
      return null;
    }
  }
  async exists(path) {
    return await app.vault.adapter.exists(this.basePath + path);
  }
  async delete(path) {
    await app.vault.delete(this.getFile(path), true);
  }
  async iterate(callback) {
    let files = app.vault.getAllLoadedFiles();
    for (let file of files) {
      await callback(file);
    }
  }
  getFile(path) {
    return app.vault.getAbstractFileByPath(path);
  }
};

// src/libs/fs/Storage.ts
var Storage = class {
  constructor() {
    this.inited = false;
    this.fsVault = new FSAdapter("./");
    this.fsInternal = new FSAdapter(".obsidian/plugins/obsidian-anysocket-sync/");
  }
  async init() {
    if (this.inited)
      return;
    this.tree = {};
    this.inited = true;
  }
  async write(path, data, metadata) {
    await this.writeMetadata(path, metadata);
    return await this.fsVault.write(path, data, metadata.mtime);
  }
  async makeFolder(path, metadata) {
    await this.writeMetadata(path, metadata);
    return await this.fsVault.makeFolder(path);
  }
  async read(path) {
    return await this.fsVault.read(path);
  }
  async delete(path, metadata) {
    await this.writeMetadata(path, metadata);
    return await this.fsVault.delete(path);
  }
  async exists(path) {
    return await this.fsVault.exists(path);
  }
  async iterate(callback) {
    await this.fsVault.iterate(async (item) => {
      if (item.path == "/")
        return;
      await callback(item);
    });
  }
  async readMetadata(path) {
    if (!this.tree[path]) {
      return null;
    }
    return this.tree[path];
  }
  async writeMetadata(path, metadata) {
    if (!this.tree[path]) {
      this.tree[path] = {};
    }
    for (let key in metadata) {
      this.tree[path][key] = metadata[key];
    }
    return this.tree[path];
  }
  async updatePlugin(files) {
    for (let item of files) {
      await this.fsInternal.write(item.path, item.data);
    }
  }
};
Storage.tree = null;

// src/XSync.ts
var DEBUG = true;
var XSync = class {
  constructor(plugin) {
    this.isEnabled = false;
    this.eventRefs = {};
    this.storage = new Storage();
    this.reloadTimeout = null;
    this.plugin = plugin;
    this.anysocket = new AnysocketManager(this);
  }
  async enabled(value) {
    if (this.isEnabled !== value) {
      this.isEnabled = value;
      this.anysocket.isEnabled = value;
      if (this.isEnabled) {
        await this.load(false);
      } else {
        this.unload(false);
      }
    }
  }
  async sync() {
    DEBUG && console.log("sync");
    let data = [];
    await this.storage.iterate(async (item) => {
      let mtime = null;
      if (item.children === void 0) {
        mtime = item.stat.mtime;
      }
      let result = await this.getMetadata("sync", item, mtime);
      data.push({
        path: item.path,
        metadata: result.metadata
      });
    });
    this.anysocket.send({
      type: "sync",
      data
    });
  }
  async processLocalEvent(action, file, args) {
    if (action == "rename") {
      await this.processLocalEvent("delete", { path: args[0] });
      await this.processLocalEvent("create", file);
      return;
    }
    DEBUG && console.log("event", action, file.path);
    try {
      let result = await this.getMetadata(action, file);
      if (!result.changed)
        return;
      if (!this.anysocket.isConnected) {
        return;
      }
      result.metadata.path = file.path;
      this.anysocket.send({
        type: "file_event",
        data: result.metadata
      });
    } catch (e) {
      console.error(e);
    }
  }
  registerEvent(type) {
    this.eventRefs[type] = app.vault.on(type, async (file, ...args) => {
      if (!this.isEnabled)
        return;
      await this.processLocalEvent(type, file, args);
    });
  }
  unregisterEvent(type) {
    app.vault.offref(this.eventRefs[type]);
  }
  async load() {
    if (!this.isEnabled)
      return;
    if (this.inited == true)
      return;
    this.inited = true;
    await this.storage.init();
    await (async () => {
      let loaded = 0;
      let times = 2;
      return new Promise((resolve) => {
        let interval = setInterval(() => {
          let current = app.vault.getAllLoadedFiles();
          if (loaded < current.length) {
            loaded = current.length;
          } else if (loaded == current.length && --times <= 0) {
            clearInterval(interval);
            resolve();
          }
        }, 500);
      });
    })();
    this.registerEvent("create");
    this.registerEvent("modify");
    this.registerEvent("delete");
    this.registerEvent("rename");
    this.anysocket.on("connected", async (peer) => {
      new import_obsidian2.Notice("\u{1F7E2} AnySocket Sync - Connected");
      this.plugin.ribbonIcon.style.color = "";
      let syncPlugin = app.internalPlugins.plugins["sync"].instance;
      let deviceName = syncPlugin.deviceName ? syncPlugin.deviceName : syncPlugin.getDefaultDeviceName();
      await peer.rpc.setDeviceId(deviceName);
      await this.sync();
    });
    this.anysocket.on("message", (packet) => {
      switch (packet.msg.type) {
        case "file_data":
          this.onFileData(packet.msg.data, packet.peer);
          break;
      }
    });
    this.anysocket.on("reload", this.reload.bind(this));
    this.anysocket.on("unload", this.unload.bind(this));
    this.anysocket.on("disconnected", () => {
      new import_obsidian2.Notice("\u{1F534} AnySocket Sync - Lost connection");
      this.plugin.ribbonIcon.style.color = "red";
      DEBUG && console.log("disconnected");
    });
    this.anysocket.init();
  }
  unload() {
    clearTimeout(this.reloadTimeout);
    if (this.inited == false)
      return;
    this.inited = false;
    this.unregisterEvent("create");
    this.unregisterEvent("modify");
    this.unregisterEvent("delete");
    this.unregisterEvent("rename");
    this.anysocket.stop();
    this.anysocket.removeAllListeners();
    this.plugin.ribbonIcon.style.color = "red";
  }
  reload() {
    DEBUG && console.log("reloaded");
    this.unload();
    this.reloadTimeout = setTimeout(() => {
      this.load();
    }, 1e3);
  }
  async onFileData(data, peer) {
    DEBUG && console.log("FileData:", data);
    if (data.type == "send") {
      this.anysocket.send({
        type: "file_data",
        data: {
          type: "apply",
          data: await this.storage.read(data.path),
          path: data.path,
          metadata: await this.storage.readMetadata(data.path)
        }
      });
    } else if (data.type == "apply") {
      switch (data.metadata.action) {
        case "created":
          if (data.metadata.type == "folder") {
            await this.storage.makeFolder(data.path, data.metadata);
          } else {
            await this.storage.write(data.path, data.data, data.metadata);
          }
          break;
        case "deleted":
          await this.storage.delete(data.path, data.metadata);
          break;
      }
    } else if (data.type == "sync") {
      DEBUG && console.log("sync", data);
    }
    return true;
  }
  async getMetadata(action, file, itemTime) {
    let typeToAction = {
      "sync": "created",
      "create": "created",
      "modify": "created",
      "rename": "created",
      "delete": "deleted"
    };
    let metadata = {
      action: typeToAction[action],
      sha1: await Utils_default.getSHA(await this.storage.read(file.path)),
      mtime: itemTime || await this.anysocket.getTime(),
      type: file.stat ? "file" : "folder"
    };
    let storedMetadata = await this.storage.readMetadata(file.path);
    if (storedMetadata && metadata.action == storedMetadata.action && metadata.sha1 == storedMetadata.sha1) {
      return {
        changed: false,
        metadata: storedMetadata
      };
    }
    await this.storage.writeMetadata(file.path, metadata);
    return {
      changed: true,
      metadata
    };
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  host: "127.0.0.1",
  port: "3000",
  password: ""
};
var AnySocketSyncPlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.VERSION = "1.0.1";
    this.BUILD = "1718178821057";
    this.isLoading = false;
  }
  async onload() {
    await this.loadSettings();
    this.ribbonIcon = this.addRibbonIcon("paper-plane", "AnySocket Sync", async (evt) => {
      if (this.isLoading) {
        return;
      }
      this.isLoading = true;
      await this.xSync.enabled(!this.xSync.isEnabled);
      this.isLoading = false;
    });
    this.ribbonIcon.style.color = "red";
    this.addSettingTab(new AnySocketSyncSettingTab(this));
    this.xSync = new XSync(this);
    await this.xSync.enabled(true);
  }
  async onunload() {
    await this.xSync.enabled(false);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var AnySocketSyncSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings" });
    new import_obsidian3.Setting(containerEl).setName("Host").addText((text) => text.setPlaceholder("127.0.0.1").setValue(this.plugin.settings.host).onChange(async (value) => {
      this.plugin.settings.host = value;
    }));
    new import_obsidian3.Setting(containerEl).setName("Port").addText((text) => text.setPlaceholder("3000").setValue(this.plugin.settings.port).onChange(async (value) => {
      this.plugin.settings.port = value;
    }));
    new import_obsidian3.Setting(containerEl).setName("Password").addText((text) => {
      text.setPlaceholder("pass").setValue(this.plugin.settings.password).onChange(async (value) => {
        this.plugin.settings.password = value;
      });
      text.inputEl.type = "password";
    });
    new import_obsidian3.Setting(containerEl).addButton((button) => button.setButtonText("Save").onClick(async () => {
      await this.plugin.saveSettings();
      this.plugin.xSync.reload();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL2xpYnMvRXZlbnRzLmpzIiwgInNyYy9tYWluLnRzIiwgInNyYy9YU3luYy50cyIsICJzcmMvbGlicy9Bbnlzb2NrZXRNYW5hZ2VyLnRzIiwgInNyYy9saWJzL0FueVNvY2tldExvYWRlci50cyIsICJzcmMvbGlicy9VdGlscy50cyIsICJzcmMvbGlicy9mcy9GU0FkYXB0ZXIudHMiLCAic3JjL2xpYnMvZnMvU3RvcmFnZS50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsibW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBFdmVudEVtaXR0ZXIge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLmNhbGxiYWNrcyA9IHt9O1xuXHRcdHRoaXMuY2FsbGJhY2tzX29uY2UgPSB7fTtcblx0fVxuXG5cdG9uKGV2ZW50LCBjYikge1xuXHRcdGlmICghdGhpcy5jYWxsYmFja3NbZXZlbnRdKVxuXHRcdFx0dGhpcy5jYWxsYmFja3NbZXZlbnRdID0gW107XG5cdFx0dGhpcy5jYWxsYmFja3NbZXZlbnRdLnB1c2goY2IpXG5cdH1cblxuXHRvZmYoZXZlbnQsIGNiKSB7XG5cdFx0aWYodGhpcy5jYWxsYmFja3NbZXZlbnRdKSB7XG5cdFx0XHR0aGlzLmNhbGxiYWNrc1tldmVudF0gPSB0aGlzLmNhbGxiYWNrc1tldmVudF0uZmlsdGVyKGl0ZW0gPT4gaXRlbSAhPT0gY2IpO1xuXHRcdH1cblx0fVxuXG5cdHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBjYikge1xuXHRcdHRoaXMub2ZmKGV2ZW50LCBjYik7XG5cdH1cblxuXHRyZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpIHtcblx0XHRpZihldmVudCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLmNhbGxiYWNrcyA9IHt9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZWxldGUgdGhpcy5jYWxsYmFja3NbZXZlbnRdO1xuXHRcdH1cblx0fVxuXG5cdG9uY2UoZXZlbnQsIGNiKSB7XG5cdFx0aWYgKCF0aGlzLmNhbGxiYWNrc19vbmNlW2V2ZW50XSlcblx0XHRcdHRoaXMuY2FsbGJhY2tzX29uY2VbZXZlbnRdID0gW107XG5cdFx0dGhpcy5jYWxsYmFja3Nfb25jZVtldmVudF0ucHVzaChjYilcblx0fVxuXG5cdGVtaXQoZXZlbnQsIC4uLmFyZ3MpIHtcblx0XHRsZXQgY2JzID0gdGhpcy5jYWxsYmFja3NbZXZlbnRdO1xuXHRcdGlmIChjYnMpIHtcblx0XHRcdGNicy5mb3JFYWNoKGNiID0+IGNiKC4uLmFyZ3MpKTtcblx0XHR9XG5cblx0XHRjYnMgPSB0aGlzLmNhbGxiYWNrc19vbmNlW2V2ZW50XTtcblx0XHRpZiAoY2JzKSB7XG5cdFx0XHRjYnMuZm9yRWFjaChjYiA9PiBjYiguLi5hcmdzKSk7XG5cdFx0XHRkZWxldGUgdGhpcy5jYWxsYmFja3Nfb25jZVtldmVudF07XG5cdFx0fVxuXHR9XG59O1xuIiwgImltcG9ydCB7XG5cdFBsdWdpbixcblx0UGx1Z2luU2V0dGluZ1RhYixcblx0U2V0dGluZ1xufSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgWFN5bmMgZnJvbSAnLi9YU3luYyc7XG5cbmludGVyZmFjZSBBbnlTb2NrZXRTeW5jU2V0dGluZ3Mge1xuXHRob3N0OiBzdHJpbmc7XG5cdHBvcnQ6IHN0cmluZztcblx0cGFzc3dvcmQ6IHN0cmluZztcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogQW55U29ja2V0U3luY1NldHRpbmdzID0ge1xuXHRob3N0OiAnMTI3LjAuMC4xJyxcblx0cG9ydDogXCIzMDAwXCIsXG5cdHBhc3N3b3JkOiBcIlwiXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFueVNvY2tldFN5bmNQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuXHRWRVJTSU9OID0gXCJfX2FueXNvY2tldHN5bmNfdmVyc2lvbl9fXCI7XG5cdEJVSUxEID0gXCJfX2FueXNvY2tldHN5bmNfYnVpbGRfX1wiO1xuXHRzZXR0aW5nczogQW55U29ja2V0U3luY1NldHRpbmdzO1xuXHR4U3luYzogWFN5bmM7XG5cdHJpYmJvbkljb246IEhUTUxFbGVtZW50O1xuXHRpc0xvYWRpbmcgPSBmYWxzZTtcblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuXHRcdHRoaXMucmliYm9uSWNvbiA9IHRoaXMuYWRkUmliYm9uSWNvbigncGFwZXItcGxhbmUnLCAnQW55U29ja2V0IFN5bmMnLCBhc3luYyAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0XHQvLyBkbyBub3RoaW5nXG5cdFx0XHRpZiAodGhpcy5pc0xvYWRpbmcpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5pc0xvYWRpbmcgPSB0cnVlO1xuXHRcdFx0YXdhaXQgdGhpcy54U3luYy5lbmFibGVkKCF0aGlzLnhTeW5jLmlzRW5hYmxlZCk7XG5cdFx0XHR0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuXHRcdH0pO1xuXHRcdHRoaXMucmliYm9uSWNvbi5zdHlsZS5jb2xvciA9IFwicmVkXCI7XG5cblx0XHQvLyBUaGlzIGFkZHMgYSBzZXR0aW5ncyB0YWIgc28gdGhlIHVzZXIgY2FuIGNvbmZpZ3VyZSB2YXJpb3VzIGFzcGVjdHMgb2YgdGhlIHBsdWdpblxuXHRcdHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgQW55U29ja2V0U3luY1NldHRpbmdUYWIodGhpcykpO1xuXG5cdFx0dGhpcy54U3luYyA9IG5ldyBYU3luYyh0aGlzKTtcblx0XHRhd2FpdCB0aGlzLnhTeW5jLmVuYWJsZWQodHJ1ZSk7XG5cdH1cblxuXHRhc3luYyBvbnVubG9hZCgpIHtcblx0XHRhd2FpdCB0aGlzLnhTeW5jLmVuYWJsZWQoZmFsc2UpO1xuXHR9XG5cblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuXHR9XG5cblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG5cdH1cbn1cblxuY2xhc3MgQW55U29ja2V0U3luY1NldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcblx0cGx1Z2luOiBBbnlTb2NrZXRTeW5jUGx1Z2luO1xuXG5cdGNvbnN0cnVjdG9yKHBsdWdpbjogQW55U29ja2V0U3luY1BsdWdpbikge1xuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0fVxuXG5cdGRpc3BsYXkoKTogdm9pZCB7XG5cdFx0Y29uc3Qge2NvbnRhaW5lckVsfSA9IHRoaXM7XG5cblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xuXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywge3RleHQ6ICdTZXR0aW5ncyd9KTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ0hvc3QnKVxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XG5cdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignMTI3LjAuMC4xJylcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmhvc3QpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5ob3N0ID0gdmFsdWU7XG5cdFx0XHRcdH0pKTtcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdQb3J0Jylcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJzMwMDAnKVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucG9ydClcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnBvcnQgPSB2YWx1ZTtcblx0XHRcdFx0fSkpO1xuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ1Bhc3N3b3JkJylcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4ge1xuXHRcdFx0XHRcdHRleHRcblx0XHRcdFx0XHRcdC5zZXRQbGFjZWhvbGRlcigncGFzcycpXG5cdFx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucGFzc3dvcmQpXG5cdFx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnBhc3N3b3JkID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR0ZXh0LmlucHV0RWwudHlwZSA9IFwicGFzc3dvcmRcIjtcblx0XHRcdFx0fVxuXHRcdFx0KVxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LmFkZEJ1dHRvbigoYnV0dG9uKSA9PlxuXHRcdFx0XHRidXR0b24uc2V0QnV0dG9uVGV4dChcIlNhdmVcIikub25DbGljayhhc3luYyAoKSA9PiB7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4ueFN5bmMucmVsb2FkKCk7XG5cdFx0XHRcdH0pXG5cdFx0XHQpO1xuXHR9XG59XG4iLCAiLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7XG5cdFRBYnN0cmFjdEZpbGUsXG5cdFBsdWdpbiwgTm90aWNlLFxufSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCBBbnlzb2NrZXRNYW5hZ2VyIGZyb20gXCIuL2xpYnMvQW55c29ja2V0TWFuYWdlclwiO1xuaW1wb3J0IFV0aWxzIGZyb20gXCIuL2xpYnMvVXRpbHNcIjtcbmltcG9ydCBTdG9yYWdlIGZyb20gXCIuL2xpYnMvZnMvU3RvcmFnZVwiO1xuXG5jb25zdCBERUJVRyA9IHRydWU7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhTeW5jIHtcblx0cGx1Z2luOiBQbHVnaW47XG5cdGlzRW5hYmxlZCA9IGZhbHNlO1xuXHRldmVudFJlZnM6IGFueSA9IHt9O1xuXHRhbnlzb2NrZXQ6IGFueTtcblx0c3RvcmFnZTogU3RvcmFnZSA9IG5ldyBTdG9yYWdlKCk7XG5cdHJlbG9hZFRpbWVvdXQgPSBudWxsO1xuXHRkZXZpY2VOYW1lOiBcIlVua25vd25cIjtcblxuXHRjb25zdHJ1Y3RvcihwbHVnaW46IFBsdWdpbikge1xuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xuXHRcdHRoaXMuYW55c29ja2V0ID0gbmV3IEFueXNvY2tldE1hbmFnZXIodGhpcyk7XG5cblx0XHQvKiByZWFsdGltZSBDUkRUIHN5bmNcblx0XHR0aGlzLnBsdWdpbi5yZWdpc3RlckVkaXRvckV4dGVuc2lvbihcblx0XHRcdEVkaXRvclZpZXcudXBkYXRlTGlzdGVuZXIub2YoKHVwZGF0ZSkgPT4ge1xuXHRcdFx0XHRpZiAodXBkYXRlLmNoYW5nZXMpIHtcblx0XHRcdFx0XHQvLyBJdGVyYXRlIG92ZXIgdGhlIGNoYW5nZXNcblx0XHRcdFx0XHR1cGRhdGUuY2hhbmdlcy5pdGVyQ2hhbmdlcygoZnJvbUEsIHRvQSwgZnJvbUIsIHRvQiwgaW5zZXJ0ZWQpID0+IHtcblx0XHRcdFx0XHRcdGlmIChmcm9tQSA9PT0gdG9BICYmIGZyb21CICE9PSB0b0IpIHtcblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhbiBpbnNlcnRpb25cblx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coXCJJbnNlcnRpb24gZGV0ZWN0ZWQgZnJvbVwiLCBmcm9tQiwgXCJ0b1wiLCB0b0IsIFwiOlwiLCBpbnNlcnRlZC50b1N0cmluZygpKTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoZnJvbUEgIT09IHRvQSAmJiBmcm9tQiA9PT0gdG9CKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBkZWxldGlvblxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIkRlbGV0aW9uIGRldGVjdGVkIGZyb21cIiwgZnJvbUEsIFwidG9cIiwgdG9BKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSByZXBsYWNlIChkZWxldGlvbiBmb2xsb3dlZCBieSBhbiBpbnNlcnRpb24pXG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiUmVwbGFjZSBkZXRlY3RlZCBmcm9tXCIsIGZyb21BLCBcInRvXCIsIHRvQSwgXCJ3aXRoXCIsIGluc2VydGVkLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdCk7XG5cdFx0ICovXG5cdH1cblxuXHRhc3luYyBlbmFibGVkKHZhbHVlKSB7XG5cdFx0aWYgKHRoaXMuaXNFbmFibGVkICE9PSB2YWx1ZSkge1xuXHRcdFx0dGhpcy5pc0VuYWJsZWQgPSB2YWx1ZTtcblx0XHRcdHRoaXMuYW55c29ja2V0LmlzRW5hYmxlZCA9IHZhbHVlO1xuXHRcdFx0aWYgKHRoaXMuaXNFbmFibGVkKSB7XG5cdFx0XHRcdGF3YWl0IHRoaXMubG9hZChmYWxzZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLnVubG9hZChmYWxzZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0YXN5bmMgc3luYygpIHtcblx0XHRERUJVRyAmJiBjb25zb2xlLmxvZyhcInN5bmNcIik7XG5cdFx0bGV0IGRhdGEgPSBbXTtcblx0XHRhd2FpdCB0aGlzLnN0b3JhZ2UuaXRlcmF0ZShhc3luYyAoaXRlbTogYW55KSA9PiB7XG5cdFx0XHRsZXQgbXRpbWUgPSBudWxsO1xuXHRcdFx0aWYoaXRlbS5jaGlsZHJlbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdG10aW1lID0gaXRlbS5zdGF0Lm10aW1lO1xuXHRcdFx0fVxuXHRcdFx0bGV0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZ2V0TWV0YWRhdGEoXCJzeW5jXCIsIGl0ZW0sIG10aW1lKTtcblx0XHRcdGRhdGEucHVzaCh7XG5cdFx0XHRcdHBhdGg6IGl0ZW0ucGF0aCxcblx0XHRcdFx0bWV0YWRhdGE6IHJlc3VsdC5tZXRhZGF0YVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHR0aGlzLmFueXNvY2tldC5zZW5kKHtcblx0XHRcdHR5cGU6IFwic3luY1wiLFxuXHRcdFx0ZGF0YTogZGF0YVxuXHRcdH0pO1xuXHR9XG5cblx0Ly8gY3JlYXRlLCBtb2RpZnksIGRlbGV0ZSwgcmVuYW1lXG5cdGFzeW5jIHByb2Nlc3NMb2NhbEV2ZW50KGFjdGlvbjogc3RyaW5nLCBmaWxlOiBUQWJzdHJhY3RGaWxlLCBhcmdzOiBhbnkpIHtcblx0XHRpZihhY3Rpb24gPT0gXCJyZW5hbWVcIikge1xuXHRcdFx0YXdhaXQgdGhpcy5wcm9jZXNzTG9jYWxFdmVudChcImRlbGV0ZVwiLCB7cGF0aDogYXJnc1swXX0pXG5cdFx0XHRhd2FpdCB0aGlzLnByb2Nlc3NMb2NhbEV2ZW50KFwiY3JlYXRlXCIsIGZpbGUpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRERUJVRyAmJiBjb25zb2xlLmxvZyhcImV2ZW50XCIsIGFjdGlvbiwgZmlsZS5wYXRoKTtcblxuXHRcdHRyeSB7XG5cdFx0XHRsZXQgcmVzdWx0ID0gYXdhaXQgdGhpcy5nZXRNZXRhZGF0YShhY3Rpb24sIGZpbGUpO1xuXHRcdFx0aWYoIXJlc3VsdC5jaGFuZ2VkKVxuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdGlmICghdGhpcy5hbnlzb2NrZXQuaXNDb25uZWN0ZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXN1bHQubWV0YWRhdGEucGF0aCA9IGZpbGUucGF0aDtcblx0XHRcdHRoaXMuYW55c29ja2V0LnNlbmQoe1xuXHRcdFx0XHR0eXBlOiBcImZpbGVfZXZlbnRcIixcblx0XHRcdFx0ZGF0YTogcmVzdWx0Lm1ldGFkYXRhXG5cdFx0XHR9KTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKGUpO1xuXHRcdH1cblx0fVxuXG5cdHJlZ2lzdGVyRXZlbnQodHlwZTogYW55KSB7XG5cdFx0dGhpcy5ldmVudFJlZnNbdHlwZV0gPSBhcHAudmF1bHQub24odHlwZSwgYXN5bmMgKGZpbGUsIC4uLmFyZ3MpID0+IHtcblx0XHRcdGlmICghdGhpcy5pc0VuYWJsZWQpXG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0YXdhaXQgdGhpcy5wcm9jZXNzTG9jYWxFdmVudCh0eXBlLCBmaWxlLCBhcmdzKTtcblx0XHR9KTtcblx0fVxuXG5cdHVucmVnaXN0ZXJFdmVudCh0eXBlOiBhbnkpIHtcblx0XHRhcHAudmF1bHQub2ZmcmVmKHRoaXMuZXZlbnRSZWZzW3R5cGVdKVxuXHR9XG5cblx0YXN5bmMgbG9hZCgpIHtcblx0XHRpZiAoIXRoaXMuaXNFbmFibGVkKVxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0aWYodGhpcy5pbml0ZWQgPT0gdHJ1ZSlcblx0XHRcdHJldHVybjtcblx0XHR0aGlzLmluaXRlZCA9IHRydWU7XG5cblx0XHRhd2FpdCB0aGlzLnN0b3JhZ2UuaW5pdCgpO1xuXHRcdGF3YWl0IChhc3luYyAoKSA9PiB7XG5cdFx0XHRsZXQgbG9hZGVkID0gMDtcblx0XHRcdGxldCB0aW1lcyA9IDI7XG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcblx0XHRcdFx0bGV0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0XHRcdGxldCBjdXJyZW50ID0gYXBwLnZhdWx0LmdldEFsbExvYWRlZEZpbGVzKCk7XG5cdFx0XHRcdFx0aWYgKGxvYWRlZCA8IGN1cnJlbnQubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRsb2FkZWQgPSBjdXJyZW50Lmxlbmd0aDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGxvYWRlZCA9PSBjdXJyZW50Lmxlbmd0aCAmJiAtLXRpbWVzIDw9IDApIHtcblx0XHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuXHRcdFx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSwgNTAwKTtcblx0XHRcdH0pO1xuXHRcdH0pKCk7XG5cblx0XHQvLyB3YWl0IGZvciB2YXVsdCBjcmVhdGlvbiBiZWZvcmUgcmVnaXN0ZXJpbmcgdG8gZXZlbnRzXG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50KFwiY3JlYXRlXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJFdmVudChcIm1vZGlmeVwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXCJkZWxldGVcIik7XG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50KFwicmVuYW1lXCIpO1xuXG5cdFx0dGhpcy5hbnlzb2NrZXQub24oXCJjb25uZWN0ZWRcIiwgYXN5bmMgKHBlZXIpID0+IHtcblx0XHRcdG5ldyBOb3RpY2UoXCJcdUQ4M0RcdURGRTIgQW55U29ja2V0IFN5bmMgLSBDb25uZWN0ZWRcIik7XG5cdFx0XHR0aGlzLnBsdWdpbi5yaWJib25JY29uLnN0eWxlLmNvbG9yID0gXCJcIjtcblxuXHRcdFx0bGV0IHN5bmNQbHVnaW4gPSBhcHAuaW50ZXJuYWxQbHVnaW5zLnBsdWdpbnNbXCJzeW5jXCJdLmluc3RhbmNlO1xuXHRcdFx0bGV0IGRldmljZU5hbWUgPSBzeW5jUGx1Z2luLmRldmljZU5hbWUgPyBzeW5jUGx1Z2luLmRldmljZU5hbWUgOiBzeW5jUGx1Z2luLmdldERlZmF1bHREZXZpY2VOYW1lKCk7XG5cblx0XHRcdGF3YWl0IHBlZXIucnBjLnNldERldmljZUlkKGRldmljZU5hbWUpO1xuXHRcdFx0YXdhaXQgdGhpcy5zeW5jKCk7XG5cdFx0fSk7XG5cblx0XHR0aGlzLmFueXNvY2tldC5vbihcIm1lc3NhZ2VcIiwgKHBhY2tldCkgPT4ge1xuXHRcdFx0c3dpdGNoIChwYWNrZXQubXNnLnR5cGUpIHtcblx0XHRcdFx0Y2FzZSBcImZpbGVfZGF0YVwiOlxuXHRcdFx0XHRcdHRoaXMub25GaWxlRGF0YShwYWNrZXQubXNnLmRhdGEsIHBhY2tldC5wZWVyKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9KTtcblx0XHR0aGlzLmFueXNvY2tldC5vbihcInJlbG9hZFwiLCB0aGlzLnJlbG9hZC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLmFueXNvY2tldC5vbihcInVubG9hZFwiLCB0aGlzLnVubG9hZC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLmFueXNvY2tldC5vbihcImRpc2Nvbm5lY3RlZFwiLCAoKSA9PiB7XG5cdFx0XHRuZXcgTm90aWNlKFwiXHVEODNEXHVERDM0IEFueVNvY2tldCBTeW5jIC0gTG9zdCBjb25uZWN0aW9uXCIpO1xuXHRcdFx0dGhpcy5wbHVnaW4ucmliYm9uSWNvbi5zdHlsZS5jb2xvciA9IFwicmVkXCI7XG5cblx0XHRcdERFQlVHICYmIGNvbnNvbGUubG9nKFwiZGlzY29ubmVjdGVkXCIpO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5hbnlzb2NrZXQuaW5pdCgpO1xuXHR9XG5cblx0dW5sb2FkKCkge1xuXHRcdGNsZWFyVGltZW91dCh0aGlzLnJlbG9hZFRpbWVvdXQpO1xuXG5cdFx0aWYodGhpcy5pbml0ZWQgPT0gZmFsc2UpXG5cdFx0XHRyZXR1cm47XG5cdFx0dGhpcy5pbml0ZWQgPSBmYWxzZTtcblxuXHRcdHRoaXMudW5yZWdpc3RlckV2ZW50KFwiY3JlYXRlXCIpO1xuXHRcdHRoaXMudW5yZWdpc3RlckV2ZW50KFwibW9kaWZ5XCIpO1xuXHRcdHRoaXMudW5yZWdpc3RlckV2ZW50KFwiZGVsZXRlXCIpO1xuXHRcdHRoaXMudW5yZWdpc3RlckV2ZW50KFwicmVuYW1lXCIpO1xuXG5cdFx0dGhpcy5hbnlzb2NrZXQuc3RvcCgpO1xuXG5cdFx0dGhpcy5hbnlzb2NrZXQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG5cdFx0dGhpcy5wbHVnaW4ucmliYm9uSWNvbi5zdHlsZS5jb2xvciA9IFwicmVkXCI7XG5cdH1cblxuXHRyZWxvYWQoKSB7XG5cdFx0REVCVUcgJiYgY29uc29sZS5sb2coXCJyZWxvYWRlZFwiKTtcblx0XHR0aGlzLnVubG9hZCgpO1xuXHRcdHRoaXMucmVsb2FkVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0dGhpcy5sb2FkKCk7XG5cdFx0fSwgMTAwMCk7XG5cdH1cblxuXHRhc3luYyBvbkZpbGVEYXRhKGRhdGEsIHBlZXIpIHtcblx0XHRERUJVRyAmJiBjb25zb2xlLmxvZyhcIkZpbGVEYXRhOlwiLCBkYXRhKTtcblx0XHRpZiAoZGF0YS50eXBlID09IFwic2VuZFwiKSB7XG5cdFx0XHR0aGlzLmFueXNvY2tldC5zZW5kKHtcblx0XHRcdFx0dHlwZTogXCJmaWxlX2RhdGFcIixcblx0XHRcdFx0ZGF0YToge1xuXHRcdFx0XHRcdHR5cGU6IFwiYXBwbHlcIixcblx0XHRcdFx0XHRkYXRhOiBhd2FpdCB0aGlzLnN0b3JhZ2UucmVhZChkYXRhLnBhdGgpLFxuXHRcdFx0XHRcdHBhdGg6IGRhdGEucGF0aCxcblx0XHRcdFx0XHRtZXRhZGF0YTogYXdhaXQgdGhpcy5zdG9yYWdlLnJlYWRNZXRhZGF0YShkYXRhLnBhdGgpXG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0gZWxzZSBpZiAoZGF0YS50eXBlID09IFwiYXBwbHlcIikge1xuXHRcdFx0c3dpdGNoIChkYXRhLm1ldGFkYXRhLmFjdGlvbikge1xuXHRcdFx0XHRjYXNlIFwiY3JlYXRlZFwiOlxuXHRcdFx0XHRcdGlmIChkYXRhLm1ldGFkYXRhLnR5cGUgPT0gXCJmb2xkZXJcIikge1xuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5zdG9yYWdlLm1ha2VGb2xkZXIoZGF0YS5wYXRoLCBkYXRhLm1ldGFkYXRhKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5zdG9yYWdlLndyaXRlKGRhdGEucGF0aCwgZGF0YS5kYXRhLCBkYXRhLm1ldGFkYXRhKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJkZWxldGVkXCI6XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5zdG9yYWdlLmRlbGV0ZShkYXRhLnBhdGgsIGRhdGEubWV0YWRhdGEpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoZGF0YS50eXBlID09IFwic3luY1wiKSB7XG5cdFx0XHRERUJVRyAmJiBjb25zb2xlLmxvZyhcInN5bmNcIiwgZGF0YSk7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyBnZXRNZXRhZGF0YShhY3Rpb24sIGZpbGUsIGl0ZW1UaW1lKSB7XG5cdFx0bGV0IHR5cGVUb0FjdGlvbiA9IHtcblx0XHRcdFwic3luY1wiOiBcImNyZWF0ZWRcIixcblx0XHRcdFwiY3JlYXRlXCI6IFwiY3JlYXRlZFwiLFxuXHRcdFx0XCJtb2RpZnlcIjogXCJjcmVhdGVkXCIsXG5cdFx0XHRcInJlbmFtZVwiOiBcImNyZWF0ZWRcIixcblx0XHRcdFwiZGVsZXRlXCI6IFwiZGVsZXRlZFwiXG5cdFx0fVxuXHRcdGxldCBtZXRhZGF0YSA9IHtcblx0XHRcdGFjdGlvbjogdHlwZVRvQWN0aW9uW2FjdGlvbl0sXG5cdFx0XHRzaGExOiBhd2FpdCBVdGlscy5nZXRTSEEoYXdhaXQgdGhpcy5zdG9yYWdlLnJlYWQoZmlsZS5wYXRoKSksXG5cdFx0XHRtdGltZTogaXRlbVRpbWUgfHwgYXdhaXQgdGhpcy5hbnlzb2NrZXQuZ2V0VGltZSgpLFxuXHRcdFx0dHlwZTogZmlsZS5zdGF0ID8gXCJmaWxlXCIgOiBcImZvbGRlclwiXG5cdFx0fTtcblxuXHRcdC8vIGlmIHRoZSBzdG9yZWRNZXRhZGF0YSAoc2hhMSggaXMgdGhlIHNhbWUgYXMgdGhlIGN1cnJlbnQgb25lXG5cdFx0Ly8gdGhpcyBtZWFucyB0aGF0IHdlIGp1c3Qgd3JvdGUgdGhpcyBmaWxlLCBzbyB3ZSBza2lwXG5cdFx0bGV0IHN0b3JlZE1ldGFkYXRhID0gYXdhaXQgdGhpcy5zdG9yYWdlLnJlYWRNZXRhZGF0YShmaWxlLnBhdGgpO1xuXHRcdGlmKHN0b3JlZE1ldGFkYXRhICYmIG1ldGFkYXRhLmFjdGlvbiA9PSBzdG9yZWRNZXRhZGF0YS5hY3Rpb24gJiYgbWV0YWRhdGEuc2hhMSA9PSBzdG9yZWRNZXRhZGF0YS5zaGExKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRjaGFuZ2VkOiBmYWxzZSxcblx0XHRcdFx0bWV0YWRhdGE6IHN0b3JlZE1ldGFkYXRhXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGF3YWl0IHRoaXMuc3RvcmFnZS53cml0ZU1ldGFkYXRhKGZpbGUucGF0aCwgbWV0YWRhdGEpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGNoYW5nZWQ6IHRydWUsXG5cdFx0XHRtZXRhZGF0YTogbWV0YWRhdGFcblx0XHR9O1xuXHR9XG59XG4iLCAiLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7Tm90aWNlLCBQbHVnaW59IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IEFueVNvY2tldExvYWRlciBmcm9tIFwiLi9BbnlTb2NrZXRMb2FkZXJcIjtcbmltcG9ydCBVdGlscyBmcm9tIFwiLi9VdGlsc1wiO1xuaW1wb3J0IFhTeW5jIGZyb20gXCIuLi9YU3luY1wiO1xuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnLi9FdmVudHMnKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW55c29ja2V0TWFuYWdlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG5cdHBsdWdpbjogUGx1Z2luO1xuXHR4U3luYzogWFN5bmM7XG5cdGV2ZW50UmVmczogYW55ID0ge307XG5cdGFueXNvY2tldDogYW55O1xuXHRpc0Nvbm5lY3RlZDogYm9vbGVhbiA9IGZhbHNlO1xuXHRub3RpZmllZE9mQ29ubmVjdEVycm9yID0gZmFsc2U7XG5cdHBlZXIgPSBudWxsO1xuXG5cdGNvbnN0cnVjdG9yKHhTeW5jOiBYU3luYykge1xuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnhTeW5jID0geFN5bmM7XG5cdFx0dGhpcy5wbHVnaW4gPSB4U3luYy5wbHVnaW47XG5cdFx0QW55U29ja2V0TG9hZGVyLmxvYWQoKTtcblx0XHR0aGlzLmFueXNvY2tldCA9IG5ldyBBbnlTb2NrZXQoKTtcblxuXHRcdGNvbnNvbGUubG9nKFwiQW55U29ja2V0IFN5bmMgKFwiICsgdGhpcy5wbHVnaW4uVkVSU0lPTiArIFwiKSAtIEVuYWJsZWRcIik7XG5cdFx0aWYgKGFwcC5pc01vYmlsZSkge1xuXHRcdFx0YWN0aXZlV2luZG93Lm9uYmx1ciA9ICgpID0+IHtcblx0XHRcdFx0dGhpcy5lbWl0KFwidW5sb2FkXCIpO1xuXHRcdFx0fTtcblx0XHRcdGFjdGl2ZVdpbmRvdy5vbmZvY3VzID0gKCkgPT4ge1xuXHRcdFx0XHR0aGlzLmVtaXQoXCJyZWxvYWRcIik7XG5cdFx0XHR9O1xuXHRcdH1cblx0fVxuXG5cdGFzeW5jIGdldFRpbWUoKSB7XG5cdFx0cmV0dXJuIERhdGUubm93KCk7XG5cdH1cblxuXHRhc3luYyBpbml0KCkge1xuXHRcdHRoaXMuYW55c29ja2V0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuXG5cdFx0bGV0IHBhc3N3b3JkID0gYXdhaXQgVXRpbHMuZ2V0U0hBKHRoaXMuYW55c29ja2V0LmlkLnN1YnN0cmluZygwLCAxNikgK1xuXHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucGFzc3dvcmQgK1xuXHRcdFx0dGhpcy5hbnlzb2NrZXQuaWQuc3Vic3RyaW5nKDE2KSlcblxuXHRcdHRoaXMuYW55c29ja2V0LmF1dGhQYWNrZXQgPSAoKSA9PiB7XG5cdFx0XHRyZXR1cm4gcGFzc3dvcmQ7XG5cdFx0fVxuXHRcdHRoaXMuYW55c29ja2V0Lm9uQXV0aCA9IGFzeW5jIChwYWNrZXQpID0+IHtcblx0XHRcdHJldHVybiBhd2FpdCBVdGlscy5nZXRTSEEocGFja2V0LmlkLnN1YnN0cmluZygwLCAxNikgK1xuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXNzd29yZCArXG5cdFx0XHRcdHBhY2tldC5pZC5zdWJzdHJpbmcoMTYpKSA9PSBwYWNrZXQuYXV0aDtcblx0XHR9XG5cblx0XHR0aGlzLmFueXNvY2tldC5vbihcIm1lc3NhZ2VcIiwgYXN5bmMgKHBhY2tldDogYW55KSA9PiB7XG5cdFx0XHR0aGlzLmVtaXQoXCJtZXNzYWdlXCIsIHBhY2tldCk7XG5cdFx0fSk7XG5cblx0XHR0aGlzLmFueXNvY2tldC5vbihcImUyZVwiLCBhc3luYyAocGVlcjogYW55KSA9PiB7XG5cdFx0XHR0aGlzLmlzQ29ubmVjdGVkID0gdHJ1ZTtcblx0XHRcdHRoaXMuZ2V0VGltZSA9IGFzeW5jICgpID0+IHtcblx0XHRcdFx0cmV0dXJuIE1hdGgucm91bmQoKGF3YWl0IHBlZXIuZ2V0U3luY2VkVGltZSgpKS50aW1lKTtcblx0XHRcdH1cblx0XHRcdGF3YWl0IHRoaXMuZ2V0VGltZSgpO1xuXG5cdFx0XHRhcHAud29ya3NwYWNlLm9uTGF5b3V0UmVhZHkoYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRhd2FpdCB0aGlzLmNoZWNrRm9yVXBkYXRlcyhwZWVyKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdHRoaXMuYW55c29ja2V0Lm9uKFwiZGlzY29ubmVjdGVkXCIsIChwZWVyOiBhbnkpID0+IHtcblx0XHRcdHRoaXMucGVlciA9IG51bGw7XG5cdFx0XHR0aGlzLmVtaXQoXCJkaXNjb25uZWN0ZWRcIik7XG5cdFx0XHR0aGlzLmVtaXQoXCJyZWxvYWRcIik7XG5cdFx0fSk7XG5cblx0XHR0aGlzLmNvbm5lY3QoKTtcblx0fVxuXG5cdGFzeW5jIGNoZWNrRm9yVXBkYXRlcyhwZWVyKSB7XG5cdFx0bGV0IHJlc3VsdCA9IGF3YWl0IHBlZXIucnBjLm9uVmVyc2lvbkNoZWNrKHRoaXMucGx1Z2luLlZFUlNJT04sIHRoaXMucGx1Z2luLkJVSUxEKTtcblx0XHRpZihyZXN1bHQudHlwZSA9PSBcIm9rXCIpIHtcblx0XHRcdHRoaXMucGVlciA9IHBlZXI7XG5cdFx0XHR0aGlzLmVtaXQoXCJjb25uZWN0ZWRcIiwgcGVlcik7XG5cdFx0fSBlbHNlIGlmIChyZXN1bHQudHlwZSA9PSBcInVwZGF0ZVwiKSB7XG5cdFx0XHRhd2FpdCB0aGlzLnhTeW5jLnN0b3JhZ2UudXBkYXRlUGx1Z2luKHJlc3VsdC5maWxlcyk7XG5cdFx0XHR3aW5kb3cuX2FueXNvY2tldElEID0gdGhpcy5hbnlzb2NrZXQuaWQ7XG5cdFx0XHQvLyBpZ25vcmUgZGlzY29ubmVjdGVkIG1lc3NhZ2Vcblx0XHRcdHRoaXMuYW55c29ja2V0LnJlbW92ZUFsbExpc3RlbmVycyhcImRpc2Nvbm5lY3RlZFwiKTtcblx0XHRcdGFwcC5wbHVnaW5zLmRpc2FibGVQbHVnaW4oXCJvYnNpZGlhbi1hbnlzb2NrZXQtc3luY1wiKTtcblx0XHRcdG5ldyBOb3RpY2UoXCJcdUQ4M0RcdURGRTEgQW55U29ja2V0IFN5bmMgLSBVcGRhdGVkIHRvIHZlcnNpb246IFwiICsgcmVzdWx0LnZlcnNpb24pO1xuXHRcdFx0YXBwLnBsdWdpbnMuZW5hYmxlUGx1Z2luKFwib2JzaWRpYW4tYW55c29ja2V0LXN5bmNcIik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuYW55c29ja2V0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuXHRcdFx0dGhpcy5lbWl0KFwidW5sb2FkXCIpO1xuXHRcdFx0bmV3IE5vdGljZShcIlx1RDgzRFx1REZFMSBBbnlTb2NrZXQgU3luYyAtIEluY29tcGF0aWJsZSBjbGllbnQgdmVyc2lvbiBcIiArIHRoaXMucGx1Z2luLlZFUlNJT04pO1xuXHRcdH1cblx0fVxuXG5cdGNvbm5lY3QoKSB7XG5cdFx0aWYoIXRoaXMuaXNFbmFibGVkKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYoIXRoaXMucGx1Z2luLnNldHRpbmdzLnBhc3N3b3JkKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcIkFueVNvY2tldCBTeW5jIC0gUmVxdWlyZXMgc2V0dXBcIik7XG5cdFx0XHRuZXcgTm90aWNlKFwiXHVEODNEXHVERkUxIEFueVNvY2tldCBTeW5jIC0gUmVxdWlyZXMgc2V0dXBcIik7XG5cdFx0XHR0aGlzLmVtaXQoXCJ1bmxvYWRcIik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gVXNlZCBvbmx5IHRvIGtlZXAgdGhlIHNhbWUgQW55U29ja2V0IElEIGFmdGVyIGhvdCByZWxvYWRcblx0XHRpZih3aW5kb3cuX2FueXNvY2tldElEKSB7XG5cdFx0XHR0aGlzLmFueXNvY2tldC5pZCA9IHdpbmRvdy5fYW55c29ja2V0SUQ7XG5cdFx0XHRkZWxldGUgd2luZG93Ll9hbnlzb2NrZXRJRDtcblx0XHR9XG5cdFx0dGhpcy5hbnlzb2NrZXQuY29ubmVjdChcIndzXCIsIHRoaXMucGx1Z2luLnNldHRpbmdzLmhvc3QsIHRoaXMucGx1Z2luLnNldHRpbmdzLnBvcnQpLnRoZW4oYXN5bmMgKHBlZXI6IGFueSkgPT4ge1xuXHRcdFx0cGVlci5lMmUoKTtcblx0XHRcdHRoaXMubm90aWZpZWRPZkNvbm5lY3RFcnJvciA9IGZhbHNlO1xuXHRcdH0pLmNhdGNoKChlKSA9PiB7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwiQW55U29ja2V0IENvbm5lY3QgRXJyb3JcIiwgZSk7XG5cdFx0XHR0aGlzLmlzQ29ubmVjdGVkID0gZmFsc2U7XG5cdFx0XHRpZighdGhpcy5ub3RpZmllZE9mQ29ubmVjdEVycm9yKSB7XG5cdFx0XHRcdHRoaXMubm90aWZpZWRPZkNvbm5lY3RFcnJvciA9IHRydWU7XG5cdFx0XHRcdG5ldyBOb3RpY2UoXCJcdUQ4M0RcdURGRTEgQW55U29ja2V0IFN5bmMgLSBDb3VsZCBub3QgY29ubmVjdCB0byB0aGUgc2VydmVyXCIpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5lbWl0KFwicmVsb2FkXCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0YXN5bmMgc2VuZChwYWNrZXQpIHtcblx0XHRyZXR1cm4gYXdhaXQgdGhpcy5wZWVyLnNlbmQocGFja2V0KTtcblx0fVxuXG5cdHN0b3AoKSB7XG5cdFx0dGhpcy5hbnlzb2NrZXQuc3RvcCgpO1xuXHR9XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW55U29ja2V0TG9hZGVyIHtcblx0c3RhdGljIGxvYWQoKSB7XG5cdFx0d2luZG93LmV2YWwoXCJ2YXIgQW55U29ja2V0O0FueVNvY2tldD0oKCk9Pnt2YXIgZT17MTQ3OihlLHQscyk9Pntjb25zdCBuPXdpbmRvdy5jcnlwdG98fHdpbmRvdy5tc0NyeXB0bztpZighbil0aHJvdyBuZXcgRXJyb3IoXFxcIkNyeXB0byBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlciFcXFwiKTtjb25zdCBpPXMoMjApLHI9XFxcIlAtNTIxXFxcIjtlLmV4cG9ydHM9bmV3IGNsYXNze3JhbmRvbUJ5dGVzKGUpe2xldCB0PW5ldyBVaW50OEFycmF5KGUpO2ZvcihsZXQgcz0wO3M8ZTtzKz02NTUzNiluLmdldFJhbmRvbVZhbHVlcyh0LnN1YmFycmF5KHMscytNYXRoLm1pbihlLXMsNjU1MzYpKSk7cmV0dXJuIHR9Y3JlYXRlRUNESCgpe3JldHVybiBuZXcgUHJvbWlzZSgoYXN5bmMoZSx0KT0+e3dpbmRvdy5jcnlwdG8uc3VidGxlLmdlbmVyYXRlS2V5KHtuYW1lOlxcXCJFQ0RIXFxcIixuYW1lZEN1cnZlOnJ9LCExLFtcXFwiZGVyaXZlS2V5XFxcIixcXFwiZGVyaXZlQml0c1xcXCJdKS50aGVuKChmdW5jdGlvbih0KXtlKHtnZW5lcmF0ZUtleXM6KCk9Pm5ldyBQcm9taXNlKCgoZSxzKT0+e3dpbmRvdy5jcnlwdG8uc3VidGxlLmV4cG9ydEtleShcXFwicmF3XFxcIix0LnB1YmxpY0tleSkudGhlbigoZnVuY3Rpb24odCl7dD1uZXcgVWludDhBcnJheSh0KSxlKHQpfSkpLmNhdGNoKChmdW5jdGlvbihlKXtzKGUpfSkpfSkpLGNvbXB1dGVTZWNyZXQ6ZT0+bmV3IFByb21pc2UoKChzLG4pPT57d2luZG93LmNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxcXCJyYXdcXFwiLGUse25hbWU6XFxcIkVDREhcXFwiLG5hbWVkQ3VydmU6cn0sITEsW10pLnRoZW4oKGZ1bmN0aW9uKGUpe3dpbmRvdy5jcnlwdG8uc3VidGxlLmRlcml2ZUJpdHMoe25hbWU6XFxcIkVDREhcXFwiLG5hbWVkQ3VydmU6cixwdWJsaWM6ZX0sdC5wcml2YXRlS2V5LDUxMikudGhlbigoZT0+e2U9bmV3IFVpbnQ4QXJyYXkoZSkscyhpLmJ1ZmZlclRvSGV4KGUpKX0pKX0pKS5jYXRjaCgoZnVuY3Rpb24oZSl7bihlKX0pKX0pKX0pfSkpLmNhdGNoKChmdW5jdGlvbihlKXt0KGUpfSkpfSkpfXBia2RmMlN5bmMoZSx0LHMsbixyKXtsZXQgbz17c2hhMjU2OlxcXCJTSEEtMjU2XFxcIn07aWYoIW9bcl0pdGhyb3cgbmV3IEVycm9yKFxcXCJJbnZhbGlkIGFsZ29yaXRobSBcXFwiK3IpO3JldHVybiByPW9bcl0sbmV3IFByb21pc2UoKGFzeW5jKG8sYyk9PntlIGluc3RhbmNlb2YgQ3J5cHRvS2V5fHwoZT1hd2FpdCB3aW5kb3cuY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXFxcInJhd1xcXCIsaS51dGY4RW5jb2RlKGUpLHtuYW1lOlxcXCJQQktERjJcXFwifSwhMSxbXFxcImRlcml2ZUtleVxcXCIsXFxcImRlcml2ZUJpdHNcXFwiXSkpLHdpbmRvdy5jcnlwdG8uc3VidGxlLmRlcml2ZUJpdHMoe25hbWU6XFxcIlBCS0RGMlxcXCIsc2FsdDppLnV0ZjhFbmNvZGUodCksaXRlcmF0aW9uczpzLGhhc2g6e25hbWU6cn19LGUsOCpuKS50aGVuKChmdW5jdGlvbihlKXtvKG5ldyBVaW50OEFycmF5KGUpKX0pKS5jYXRjaCgoZnVuY3Rpb24oZSl7YyhlKX0pKX0pKX19fSw5NTQ6ZT0+e2UuZXhwb3J0cz0oKT0+KCk9Pnt9fSw2OTooKT0+e30sMjY3OmU9PntlLmV4cG9ydHM9Y2xhc3N7Y29uc3RydWN0b3IoKXt0aGlzLmNhbGxiYWNrcz17fSx0aGlzLmNhbGxiYWNrc19vbmNlPXt9fW9uKGUsdCl7dGhpcy5jYWxsYmFja3NbZV18fCh0aGlzLmNhbGxiYWNrc1tlXT1bXSksdGhpcy5jYWxsYmFja3NbZV0ucHVzaCh0KX1vZmYoZSx0KXt0aGlzLmNhbGxiYWNrc1tlXSYmKHRoaXMuY2FsbGJhY2tzW2VdPXRoaXMuY2FsbGJhY2tzW2VdLmZpbHRlcigoZT0+ZSE9PXQpKSl9cmVtb3ZlTGlzdGVuZXIoZSx0KXt0aGlzLm9mZihlLHQpfXJlbW92ZUFsbExpc3RlbmVycyhlKXt2b2lkIDA9PT1lP3RoaXMuY2FsbGJhY2tzPXt9OmRlbGV0ZSB0aGlzLmNhbGxiYWNrc1tlXX1vbmNlKGUsdCl7dGhpcy5jYWxsYmFja3Nfb25jZVtlXXx8KHRoaXMuY2FsbGJhY2tzX29uY2VbZV09W10pLHRoaXMuY2FsbGJhY2tzX29uY2VbZV0ucHVzaCh0KX1lbWl0KGUsLi4udCl7bGV0IHM9dGhpcy5jYWxsYmFja3NbZV07cyYmcy5mb3JFYWNoKChlPT5lKC4uLnQpKSkscz10aGlzLmNhbGxiYWNrc19vbmNlW2VdLHMmJihzLmZvckVhY2goKGU9PmUoLi4udCkpKSxkZWxldGUgdGhpcy5jYWxsYmFja3Nfb25jZVtlXSl9fX0sNjYxOihlLHQscyk9Pntjb25zdCBuPXMoNTEwKSxpPXMoMjApO24uZW5jcnlwdEFFUz0oZSx0KT0+bmV3IFByb21pc2UoKChzLG4pPT57d2luZG93LmNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxcXCJyYXdcXFwiLGkuYnVmZmVyRnJvbUhleChlKSx7bmFtZTpcXFwiQUVTLUNCQ1xcXCIsbGVuZ3RoOjI1Nn0sITEsW1xcXCJlbmNyeXB0XFxcIl0pLnRoZW4oKGU9PntsZXQgcj13aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheSgxNikpO3dpbmRvdy5jcnlwdG8uc3VidGxlLmVuY3J5cHQoe25hbWU6XFxcIkFFUy1DQkNcXFwiLGl2OnJ9LGUsaS5idWZmZXJGcm9tU3RyaW5nKHQpKS50aGVuKChmdW5jdGlvbihlKXtzKGkuYnVmZmVyVG9IZXgocikraS5idWZmZXJUb0hleChuZXcgVWludDhBcnJheShlKSkpfSkpLmNhdGNoKChmdW5jdGlvbihlKXtuKGUpfSkpfSkpLmNhdGNoKG4pfSkpLG4uZGVjcnlwdEFFUz0oZSx0KT0+bmV3IFByb21pc2UoKChzLG4pPT57d2luZG93LmNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxcXCJyYXdcXFwiLGkuYnVmZmVyRnJvbUhleChlKSx7bmFtZTpcXFwiQUVTLUNCQ1xcXCIsbGVuZ3RoOjI1Nn0sITEsW1xcXCJkZWNyeXB0XFxcIl0pLnRoZW4oKGU9Pnt3aW5kb3cuY3J5cHRvLnN1YnRsZS5kZWNyeXB0KHtuYW1lOlxcXCJBRVMtQ0JDXFxcIixpdjppLmJ1ZmZlckZyb21IZXgodC5zdWJzdHIoMCwzMikpfSxlLGkuYnVmZmVyRnJvbUhleCh0LnN1YnN0cigzMikpKS50aGVuKChmdW5jdGlvbihlKXtzKGkuYnVmZmVyVG9TdHJpbmcobmV3IFVpbnQ4QXJyYXkoZSkpKX0pKS5jYXRjaCgoZT0+e24oZSl9KSl9KSkuY2F0Y2goKGU9PntuKGUpfSkpfSkpLGUuZXhwb3J0cz1ufSwyMDplPT57ZS5leHBvcnRzPXt1dGY4RW5jb2RlKGUpe2xldCB0PVtdLHM9ZS5sZW5ndGgsbj0wO2Zvcig7bjxzOyl7bGV0IHM9ZS5jb2RlUG9pbnRBdChuKSxpPTAscj0wO2ZvcihzPD0xMjc/KGk9MCxyPTApOnM8PTIwNDc/KGk9NixyPTE5Mik6czw9NjU1MzU/KGk9MTIscj0yMjQpOnM8PTIwOTcxNTEmJihpPTE4LHI9MjQwKSx0LnB1c2gocnxzPj5pKSxpLT02O2k+PTA7KXQucHVzaCgxMjh8cz4+aSY2MyksaS09NjtuKz1zPj02NTUzNj8yOjF9cmV0dXJuIG5ldyBVaW50OEFycmF5KHQpfSxidWZmZXJGcm9tU3RyaW5nKGUpe2xldCB0PW5ldyBBcnJheUJ1ZmZlcihlLmxlbmd0aCkscz1uZXcgVWludDhBcnJheSh0KTtmb3IobGV0IHQ9MCxuPWUubGVuZ3RoO3Q8bjt0Kyspc1t0XT1lLmNoYXJDb2RlQXQodCk7cmV0dXJuIHR9LGJ1ZmZlclRvU3RyaW5nKGUpe2xldCB0PVxcXCJcXFwiO2lmKGUpe2xldCBzPW5ldyBVaW50OEFycmF5KGUpO2ZvcihsZXQgZT0wO2U8cy5ieXRlTGVuZ3RoO2UrKyl0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKHNbZV0pfXJldHVybiB0fSxidWZmZXJUb0hleChlKXtyZXR1cm4gZS5yZWR1Y2UoKChlLHQpPT5lK3RoaXMuaTJoZXgodCkpLFxcXCJcXFwiKX0saTJoZXg6ZT0+KFxcXCIwXFxcIitlLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpLGJ1ZmZlckZyb21IZXgoZSl7bGV0IHQ9bmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgvMik7Zm9yKGxldCBzPTA7czxlLmxlbmd0aDtzKz0yKXRbcy8yXT1wYXJzZUludChlLnN1YnN0cmluZyhzLHMrMiksMTYpO3JldHVybiB0fSxpc0J1ZmZlcjplPT4hIShlLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyJiZlLkJZVEVTX1BFUl9FTEVNRU5UKX19LDk2NjplPT57ZS5leHBvcnRzPWNsYXNze2NvbnN0cnVjdG9yKC4uLmUpe3RoaXMud3M9bmV3IFdlYlNvY2tldCguLi5lKX1vbihlLHQpe3N3aXRjaChlKXtjYXNlXFxcIm9wZW5cXFwiOnRoaXMud3Mub25vcGVuPXQ7YnJlYWs7Y2FzZVxcXCJlcnJvclxcXCI6dGhpcy53cy5vbmVycm9yPXQ7YnJlYWs7Y2FzZVxcXCJtZXNzYWdlXFxcIjp0aGlzLndzLm9ubWVzc2FnZT1lPT57dChlLmRhdGEpfTticmVhaztjYXNlXFxcImNsb3NlXFxcIjp0aGlzLndzLm9uY2xvc2U9dDticmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcihcXFwiTm90IGltcGxlbWVudGVkIGluIGJyb3dzZXIhIChcXFwiK2UrXFxcIilcXFwiKX19c2VuZCguLi5lKXt0aGlzLndzLnNlbmQoZSl9Y2xvc2UoKXt0aGlzLndzLmNsb3NlKCl9dGVybWluYXRlKCl7fX19LDUwNjooZSx0LHMpPT57Y29uc3Qgbj1zKDEwMCksaT1zKDU1NSk7bi5UcmFuc3BvcnQ9e1dTOnMoODY2KSxIVFRQOnMoNjkpfSxuLlBhY2tlcj17cGFjazppLnBhY2tCeXRlcy5iaW5kKGkpLHVucGFjazppLnVucGFja0J5dGVzLmJpbmQoaSl9LGUuZXhwb3J0cz1ufSwxMTc6ZT0+e2UuZXhwb3J0cz1jbGFzc3tjb25zdHJ1Y3Rvcigpe3RoaXMucm91dGVzPXtfOltdfSx0aGlzLnJvdXRlc1JlZ2V4cD17XzpbXX0sdGhpcy5fdXBncmFkZUNhbGxiYWNrPW51bGwsdGhpcy5fcHJvY2Vzcz10aGlzLl9wcm9jZXNzLmJpbmQodGhpcyksdGhpcy5fcHJvY2Vzc1VwZ3JhZGU9dGhpcy5fcHJvY2Vzc1VwZ3JhZGUuYmluZCh0aGlzKX1vbihlLHQscyl7cmV0dXJuIHQgaW5zdGFuY2VvZiBSZWdFeHA/KHRoaXMucm91dGVzUmVnZXhwW2VdfHwodGhpcy5yb3V0ZXNSZWdleHBbZV09W10pLHRoaXMucm91dGVzUmVnZXhwW2VdLnB1c2goe3BhdGg6dCxjYjpzfSkpOih0aGlzLnJvdXRlc1tlXXx8KHRoaXMucm91dGVzW2VdPXt9KSx0aGlzLnJvdXRlc1tlXVt0XT1zKSx0aGlzfXVwZ3JhZGUoZSl7cmV0dXJuIHRoaXMuX3VwZ3JhZGVDYWxsYmFjaz1lLHRoaXN9YW55KGUsdCl7cmV0dXJuIHRoaXMub24oXFxcIl9cXFwiLGUsdCl9Z2V0KGUsdCl7cmV0dXJuIHRoaXMub24oXFxcImdldFxcXCIsZSx0KX1wb3N0KGUsdCl7cmV0dXJuIHRoaXMub24oXFxcInBvc3RcXFwiLGUsdCl9ZGVsZXRlKGUsdCl7cmV0dXJuIHRoaXMub24oXFxcImRlbGV0ZVxcXCIsZSx0KX1lcnJvcihlKXt0aGlzLm9uRXJyb3I9ZX1fcHJvY2Vzc1VwZ3JhZGUoZSl7dHJ5e2lmKCF0aGlzLl91cGdyYWRlQ2FsbGJhY2spcmV0dXJuO3RoaXMuX3VwZ3JhZGVDYWxsYmFjayhlKX1jYXRjaCh0KXtyZXR1cm4gdGhpcy5fZmluaXNoKGUsdCl9fV9wcm9jZXNzKGUpe3RyeXtpZih0aGlzLnJvdXRlcy5fW2UudXJsXSlyZXR1cm4gdGhpcy5yb3V0ZXMuX1tlLnVybF0oZSksITA7aWYodGhpcy5yb3V0ZXNbZS5xdWVyeS5tZXRob2RdJiZ0aGlzLnJvdXRlc1tlLnF1ZXJ5Lm1ldGhvZF1bZS51cmxdKXJldHVybiB0aGlzLnJvdXRlc1tlLnF1ZXJ5Lm1ldGhvZF1bZS51cmxdKGUpLCEwO2ZvcihsZXQgdCBvZiB0aGlzLnJvdXRlc1JlZ2V4cC5fKWlmKHQucGF0aC50ZXN0KGUudXJsKSlyZXR1cm4gdC5jYihlKSwhMDtpZih0aGlzLnJvdXRlc1JlZ2V4cFtlLnF1ZXJ5Lm1ldGhvZF0pZm9yKGxldCB0IG9mIHRoaXMucm91dGVzUmVnZXhwW2UucXVlcnkubWV0aG9kXSlpZih0LnBhdGgudGVzdChlLnVybCkpcmV0dXJuIHQuY2IoZSksITB9Y2F0Y2godCl7cmV0dXJuIHRoaXMuX2ZpbmlzaChlLHQpfXRoaXMuX2ZpbmlzaChlLG5ldyBFcnJvcihcXFwiTm8gcm91dGUgZm9yIHBhdGg6ICdcXFwiK2UudXJsK1xcXCInXFxcIikpfV9maW5pc2goZSx0KXt0aGlzLm9uRXJyb3ImJnRoaXMub25FcnJvcihlLHQpLGUuaXNDbG9zZWQoKXx8ZS5zdGF0dXMoNDA0KS5lbmQoKX19fSw0MjA6ZT0+e2UuZXhwb3J0cz1jbGFzc3tjb25zdHJ1Y3RvcihlKXt0aGlzLmFueXNvY2tldD1lfX19LDU1NTooZSx0LHMpPT57Y29uc3Qgbj1zKDIwKTtlLmV4cG9ydHM9bmV3IGNsYXNze3BhY2tJbnQzMihlKXtjb25zdCB0PW5ldyBBcnJheUJ1ZmZlcig0KTtyZXR1cm4gbmV3IERhdGFWaWV3KHQpLnNldEludDMyKDAsZSwhMSksU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsbmV3IFVpbnQ4QXJyYXkodCkpfXVucGFja0ludDMyKGUpe2NvbnN0IHQ9bmV3IEFycmF5QnVmZmVyKDQpLHM9bmV3IFVpbnQ4QXJyYXkodCk7Zm9yKGxldCB0IGluIGUpc1t0XT1lLmNoYXJDb2RlQXQodCk7cmV0dXJuIG5ldyBEYXRhVmlldyh0KS5nZXRJbnQzMigwKX1wYWNrSGV4KGUpe2xldCB0PVxcXCJcXFwiO2ZvcihsZXQgcz0wO3M8ZS5sZW5ndGg7cys9Mil0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGUuc3Vic3RyKHMsMiksMTYpKTtyZXR1cm4gdH11bnBhY2tIZXgoZSl7bGV0IHQ9XFxcIlxcXCI7Zm9yKGxldCBzPTA7czxlLmxlbmd0aDtzKyspe2xldCBuPU51bWJlcihlLmNoYXJDb2RlQXQocykpLnRvU3RyaW5nKDE2KTt0Kz0xPT09bi5sZW5ndGg/XFxcIjBcXFwiK246bn1yZXR1cm4gdH1wYWNrQnl0ZXMoZSl7aWYoIShlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXJ8fGUgaW5zdGFuY2VvZiBVaW50OEFycmF5KSl0aHJvdyBuZXcgRXJyb3IoXFxcInBhY2tCeXRlcyByZXF1aXJlcyBBcnJheUJ1ZmZlciBvciBVSW50OEFycmF5XFxcIik7cmV0dXJuIG4uYnVmZmVyVG9TdHJpbmcoZSl9dW5wYWNrQnl0ZXMoZSl7cmV0dXJuIG4uYnVmZmVyRnJvbVN0cmluZyhlKX19fSw3MTc6KGUsdCxzKT0+e3MoOTU0KShcXFwiQW55UGFja2V0XFxcIik7Y29uc3Qgbj1TeW1ib2woXFxcInNlbmQgZnVuY3Rpb25cXFwiKTtlLmV4cG9ydHM9Y2xhc3N7Y29uc3RydWN0b3IoZSx0LHMpe3RoaXMucGVlcj1lLHRoaXMuc2VxPXQuc2VxLHRoaXMubXNnPXQuZGF0YSx0aGlzW25dPXN9cmVwbHkoZSl7dGhpc1tuXShlLHRoaXMuc2VxKX19fSwxNTU6KGUsdCxzKT0+e2NvbnN0IG49cyg5NTQpKFxcXCJBbnlQZWVyXFxcIiksaT1zKDUwMSkscj1zKDI2Nyksbz1zKDU1OCksYz1zKDcxNyksaD1zKDU1NSksYT1TeW1ib2woXFxcInByaXZhdGUgcHJvdG9jb2xcXFwiKSx1PVN5bWJvbChcXFwicGFja2V0c1xcXCIpLGw9U3ltYm9sKFxcXCJsaW5rc1xcXCIpLGQ9cygyMCkscD1mdW5jdGlvbihlKXtyZXR1cm4hMD09PWV8fCExPT09ZXx8XFxcIltvYmplY3QgQm9vbGVhbl1cXFwiPT09dG9TdHJpbmcuY2FsbChlKX07ZS5leHBvcnRzPWNsYXNzIGV4dGVuZHMgcntjb25zdHJ1Y3RvcihlKXtzdXBlcigpLHRoaXNbbF09e30sdGhpc1thXT1lLHRoaXNbdV09e30sdGhpcy5pZD1lLnBlZXJJRCx0aGlzLmNvbm5lY3Rpb25JRD1lLmNvbm5lY3Rpb25JRCx0aGlzLnN5bmNlZFRpbWU9bnVsbCx0aGlzLm9wdGlvbnM9ZS5vcHRpb25zO2NvbnN0IHQ9e2dldDooZSxzKT0+e2NvbnN0IG49ZVtzXTtyZXR1cm4gbnVsbCE9bj9uOihlLnBhdGh8fChlLnBhdGg9W10pLGUucGF0aC5wdXNoKHMpLG5ldyBQcm94eShlLHtnZXQ6dC5nZXQsYXBwbHk6KGUsdCxzKT0+e2xldCBuPWUucGF0aDtyZXR1cm4gZS5wYXRoPVtdLG5ldyBQcm9taXNlKCgoZSx0KT0+e2xldCByPVtdO2ZvcihsZXQgZSBpbiBzKWQuaXNCdWZmZXIoc1tlXSkmJihzW2VdPWgucGFja0J5dGVzKHNbZV0pLHIucHVzaChlKSk7Y29uc3QgYz1vLmRhdGEoe3R5cGU6aS5JTlRFUk5BTF9QQUNLRVRfVFlQRS5SUEMsbWV0aG9kOm4scGFyYW1zOnN8fG51bGwsYmluOnJ9KS5zZXRUeXBlKGkuUEFDS0VUX1RZUEUuSU5URVJOQUwpO3RoaXMuX3NlbmQoYywhMCkudGhlbigocz0+e2lmKHMubXNnLmVycm9yKXQocy5tc2cpO2Vsc2V7bGV0IHQ9cy5tc2cucmVzdWx0O3MubXNnLmJpbiYmKHQ9aC51bnBhY2tCeXRlcyh0KSksZSh0KX19KSkuY2F0Y2goKGU9Pnt0KGMubXNnKX0pKX0pKX19KSl9fTt0aGlzLnJwYz1uZXcgUHJveHkoKCgpPT57fSksdCksZS5vbihcXFwiaW50ZXJuYWxcXFwiLHRoaXMub25JbnRlcm5hbENvbXMuYmluZCh0aGlzKSksZS5vbihcXFwibWVzc2FnZVxcXCIsdGhpcy5vbk1lc3NhZ2UuYmluZCh0aGlzKSksZS5vbihcXFwiZTJlXFxcIiwoKCk9Pnt0aGlzLm9uRTJFKCl9KSksZS5vbihcXFwiZGlzY29ubmVjdGVkXFxcIiwoKGUsdCk9Pnt0aGlzLmVtaXQoXFxcImRpc2Nvbm5lY3RlZFxcXCIsZSx0KX0pKX1pc1Byb3h5KCl7cmV0dXJuIHRoaXNbYV0uaXNQcm94eSgpfWFkZExpbmsoZSl7dGhpc1tsXVtlLmlkXT1lfXJlbW92ZUxpbmsoZSl7ZGVsZXRlIHRoaXNbbF1bZS5pZF19Z2V0TGlua3MoKXtyZXR1cm4gdGhpc1tsXX1nZXRTeW5jZWRUaW1lKGUpe3JldHVybiBlPWV8fCExLG5ldyBQcm9taXNlKCgodCxzKT0+e2lmKCFlJiZ0aGlzLnN5bmNlZFRpbWUpdChPYmplY3QuYXNzaWduKHt0aW1lOkRhdGUubm93KCkrdGhpcy5zeW5jZWRUaW1lLm9mZnNldH0sdGhpcy5zeW5jZWRUaW1lKSk7ZWxzZXtsZXQgZT1EYXRlLm5vdygpO3RoaXMuc2VuZEludGVybmFsKHt0eXBlOmkuSU5URVJOQUxfUEFDS0VUX1RZUEUuU1lOQ0VEX1RJTUUsdGltZTplfSwhMCkudGhlbigoZT0+e2NvbnN0IHM9ZS5tc2cubyxuPWUubXNnLnQsaT1lLm1zZy50LHI9RGF0ZS5ub3coKTt0aGlzLnN5bmNlZFRpbWU9e3J0dDpyLXMtKGktbiksb2Zmc2V0OihuLXMrKGktcikpLzJ9LHQoT2JqZWN0LmFzc2lnbih7dGltZTpEYXRlLm5vdygpK3RoaXMuc3luY2VkVGltZS5vZmZzZXR9LHRoaXMuc3luY2VkVGltZSkpfSkpLmNhdGNoKHMpfX0pKX1lMmUoKXt0aGlzW2FdLmUyZSgpfWlzRTJFRW5hYmxlZCgpe3JldHVybiB0aGlzW2FdLmhhc0UyRUVuYWJsZWQoKX1zZW5kKGUsdCxzKXtjb25zdCBuPW8uZGF0YShlKS5zZXRUeXBlKGkuUEFDS0VUX1RZUEUuTElOSyk7cmV0dXJuIHRoaXMuX3NlbmQobix0LHMpfWZvcndhcmQoZSl7dGhpc1thXS5mb3J3YXJkKGUpfXNlbmRJbnRlcm5hbChlLHQscyl7Y29uc3Qgbj1vLmRhdGEoZSkuc2V0VHlwZShpLlBBQ0tFVF9UWVBFLklOVEVSTkFMKTtyZXR1cm4gdGhpcy5fc2VuZChuLHQscyl9b25NZXNzYWdlKGUsdCl7dC5zZXE8MD90aGlzLl9yZXNvbHZlUmVwbHkodCl8fG4oXFxcIkRyb3BwZWQgcmVwbHkgXFxcIit0LnNlcStcXFwiLiBEZWxpdmVyZWQgYWZ0ZXIgVGltZW91dFxcXCIpOnRoaXMuZW1pdChcXFwibWVzc2FnZVxcXCIsbmV3IGModGhpcyx0LHRoaXMuc2VuZC5iaW5kKHRoaXMpKSl9b25FMkUoKXt0aGlzLmVtaXQoXFxcImUyZVxcXCIsdGhpcyl9b25JbnRlcm5hbENvbXMoZSx0KXt0LnNlcTwwP3RoaXMuX3Jlc29sdmVSZXBseSh0KXx8bihcXFwiRHJvcHBlZCByZXBseSBcXFwiK3Quc2VxK1xcXCIuIERlbGl2ZXJlZCBhZnRlciBUaW1lb3V0XFxcIik6dC50eXBlPT1pLlBBQ0tFVF9UWVBFLklOVEVSTkFMP3RoaXMuZW1pdChcXFwiaW50ZXJuYWxcXFwiLG5ldyBjKHRoaXMsdCx0aGlzLnNlbmRJbnRlcm5hbC5iaW5kKHRoaXMpKSk6bihcXFwiRHJvcHBlZCBpbnRlcm5hbCBwYWNrZXQhXFxcIix0KX1kaXNjb25uZWN0KGUpe2ZvcihsZXQgZSBpbiB0aGlzW3VdKWNsZWFyVGltZW91dCh0aGlzW3VdW2VdLnRpbWVvdXQpLHRoaXNbdV1bZV0ucmVqZWN0KFxcXCJQZWVyIGRpc2Nvbm5lY3RlZCFcXFwiKTt0aGlzW3VdPXt9LHRoaXNbYV0uZGlzY29ubmVjdChlKX1fc2VuZChlLHQscyl7cmV0dXJuIG5ldyBQcm9taXNlKCgobixpKT0+e3RoaXNbYV0uaXNDb25uZWN0ZWQoKT8oIXAodCkmJnQmJnQ+MCYmZS5zZXRSZXBseVRvKHQpLHRoaXNbYV0uc2VuZChlKSxwKHQpJiYhMD09PXQmJih0aGlzW3VdW2Uuc2VxXT17dGltZToobmV3IERhdGUpLmdldFRpbWUoKSxyZXNvbHZlOm4scmVqZWN0OmksdGltZW91dDpzZXRUaW1lb3V0KCgoKT0+e2lmKHRoaXNbdV1bZS5zZXFdKXtsZXQgdD10aGlzW3VdW2Uuc2VxXTtkZWxldGUgdGhpc1t1XVtlLnNlcV0sdGhpcy5kaXNjb25uZWN0KFxcXCJNaXNzZWQgcmVwbHkgdGltZW91dCEgUGFja2V0IFR5cGU6IFxcXCIrby5UWVBFLl9zdHJpbmcoZS50eXBlKStcXFwiIC0gXFxcIitlLnNlcSksdC5yZWplY3QoXFxcIlRpbWVvdXQhXFxcIil9fSksc3x8dGhpc1thXS5vcHRpb25zLnJlcGx5VGltZW91dCl9KSk6aShcXFwiQ2Fubm90IHNlbmQgbWVzc2FnZS4gUGVlciBpcyBkaXNjb25uZWN0ZWRcXFwiKX0pKX1fcmVjdkZvcndhcmQoZSl7dGhpc1thXS5fcmVjdlBhY2tldFF1ZXVlLnB1c2goe3BlZXI6dGhpc1thXS5wZWVyLHJlY3Y6ZS5tc2csc3RhdGU6dGhpc1thXS5FTkNSWVBUSU9OX1NUQVRFfSl9X3Jlc29sdmVSZXBseShlKXtpZihlLnNlcSo9LTEsdGhpc1t1XVtlLnNlcV0pe2NvbnN0IHQ9dGhpc1t1XVtlLnNlcV07cmV0dXJuIGRlbGV0ZSB0aGlzW3VdW2Uuc2VxXSxjbGVhclRpbWVvdXQodC50aW1lb3V0KSx0LnJlc29sdmUobmV3IGModGhpcyxlLCgoKT0+e24oXFxcIkNhbm5vdCByZXBseSB0byBhIHJlcGx5IHBhY2tldCFcXFwiKX0pKSksITB9cmV0dXJuITF9fX0sMjg4OihlLHQscyk9Pntjb25zdCBuPXMoOTU0KShcXFwiQW55UHJvdG9jb2xcXFwiKSxpPXMoMjY3KSxyPXMoMzczKSxvPXMoNTU4KSxjPXMoNjYxKSxoPXMoNTU1KSxhPXMoNTAxKSx1PVN5bWJvbChcXFwic2VjcmV0IGtleVxcXCIpLGw9U3ltYm9sKFxcXCJwcml2YXRlIGtleVxcXCIpLGQ9U3ltYm9sKFxcXCJub25jZVxcXCIpLHA9U3ltYm9sKFxcXCJoZWFydGJlYXQgdGltZXJcXFwiKSxUPVN5bWJvbChcXFwiaGVhcnRiZWF0cyBtaXNzZWRcXFwiKSxFPVN5bWJvbChcXFwiaGVhcnRiZWF0IHBvbmdlZFxcXCIpLHk9U3ltYm9sKFxcXCJhdXRoVGltZW91dFxcXCIpLG09U3ltYm9sKFxcXCJlMmVUaW1lb3V0XFxcIik7ZS5leHBvcnRzPWNsYXNzIGV4dGVuZHMgaXtjb25zdHJ1Y3RvcihlLHQscyl7c3VwZXIoKSx0aGlzLl9zZXE9MCx0aGlzW3VdPW51bGwsdGhpc1tsXT1udWxsLHRoaXNbZF09bnVsbCx0aGlzW3BdPTAsdGhpc1tUXT0wLHRoaXNbRV09ITAsdGhpc1t5XT0hMSx0aGlzW21dPSExLHRoaXMucGVlcklEPXQuaWQsdGhpcy5wZWVyPXQsdGhpcy5vcHRpb25zPU9iamVjdC5hc3NpZ24oe2F1dGhUaW1lb3V0OjVlMyxlMmVUaW1lb3V0OjVlMyxyZXBseVRpbWVvdXQ6M2U0LGhlYXJ0YmVhdEludGVydmFsOjVlM30scyksdGhpcy5jb25uZWN0aW9uSUQ9dGhpcy5wZWVyLmNvbm5lY3Rpb25JRCx0aGlzLmFueXNvY2tldD1lLHRoaXMuX3BhY2tldFF1ZXVlPXIodGhpcyx0aGlzLnByb2Nlc3NQYWNrZXRRdWV1ZS5iaW5kKHRoaXMpLDEpLHRoaXMuX2xpbmtQYWNrZXRRdWV1ZT1yKHRoaXMsdGhpcy5wcm9jZXNzTGlua1BhY2tldFF1ZXVlLmJpbmQodGhpcyksMSksdGhpcy5fcmVjdlBhY2tldFF1ZXVlPXIodGhpcyx0aGlzLnByb2Nlc3NSZWN2UGFja2V0UXVldWUuYmluZCh0aGlzKSwxKSx0aGlzLl9yZWN2TGlua1BhY2tldFF1ZXVlPXIodGhpcyx0aGlzLnByb2Nlc3NSZWN2TGlua1BhY2tldFF1ZXVlLmJpbmQodGhpcyksMSksdGhpcy5fcGFja2V0cz17fSx0aGlzLmNoYW5nZVN0YXRlKGEuUFJPVE9DT0xfU1RBVEVTLkVTVEFCTElTSEVEKSx0aGlzLkVOQ1JZUFRJT05fU1RBVEU9YS5QUk9UT0NPTF9FTkNSWVBUSU9OLlBMQUlOLHRoaXMucGVlci5vbihcXFwibWVzc2FnZVxcXCIsKChlLHQpPT57dGhpcy5fcmVjdlBhY2tldFF1ZXVlLnB1c2goe3BlZXI6ZSxyZWN2OnQsc3RhdGU6dGhpcy5FTkNSWVBUSU9OX1NUQVRFfSl9KSksdGhpcy5wZWVyLmlzQ2xpZW50KCkmJiF0aGlzLnBlZXJJRCYmKHRoaXMuY2hhbmdlU3RhdGUoYS5QUk9UT0NPTF9TVEFURVMuQVVUSElORyksdGhpcy5zZW5kKG8uZGF0YSh7aWQ6dGhpcy5hbnlzb2NrZXQuaWQsYXV0aDp0aGlzLmFueXNvY2tldC5hdXRoUGFja2V0KCl9KS5zZXRUeXBlKG8uVFlQRS5BVVRIKSkpLHRoaXMucGVlcklEJiZ0aGlzLmNoYW5nZVN0YXRlKGEuUFJPVE9DT0xfU1RBVEVTLkNPTk5FQ1RFRCl9aXNQcm94eSgpe3JldHVybiEhdGhpcy5wZWVyLmlzUHJveHl9aXNDb25uZWN0ZWQoKXtyZXR1cm4gdGhpcy5zdGF0ZSE9YS5QUk9UT0NPTF9TVEFURVMuRElTQ09OTkVDVEVEfXNlbmQoZSl7cmV0dXJuIDA9PWUuc2VxJiZlLnNldFNlcSh0aGlzLl9nZXRTZXEoKSksZS50eXBlIT1vLlRZUEUuSEVBUlRCRUFUJiZ0aGlzLl9oZWFydGJlYXQoKSxuZXcgUHJvbWlzZSgoKHQscyk9Pntjb25zdCBuPWU9Pnt0aGlzLmRpc2Nvbm5lY3QoZSkscyhlKX07dGhpcy5pc0xJTktNZXNzYWdlKGUudHlwZSk/dGhpcy5fbGlua1BhY2tldFF1ZXVlLnB1c2goe3BhY2tldDplLHJlc29sdmU6dCxyZWplY3Q6bn0pOnRoaXMuX3NlbmQoZSx0LG4pfSkpfV9zZW5kKGUsdCxzKXtuKHRoaXMucGVlcklELFxcXCI+Pj4+XFxcIixvLlRZUEUuX3N0cmluZyhlLnR5cGUpLGUuc2VxKSxlLnNlcmlhbGl6ZShhLk1BWF9QQUNLRVRfU0laRSx0aGlzLl9lbmNyeXB0LmJpbmQodGhpcykpLnRoZW4oKGU9Pntmb3IobGV0IG49MDtuPGUubGVuZ3RoO24rKyl7Y29uc3QgaT17cGFja2V0OmVbbl0scmVqZWN0OnN9O249PWUubGVuZ3RoLTEmJihpLnJlc29sdmU9dCksdGhpcy5fcGFja2V0UXVldWUucHVzaChpKX19KSkuY2F0Y2gocyl9Zm9yd2FyZChlKXtyZXR1cm4gbmV3IFByb21pc2UoKCh0LHMpPT57dGhpcy5fcGFja2V0UXVldWUucHVzaCh7cGFja2V0OnRoaXMuX2VuY29kZUZvcndhcmRQYWNrZXQoZS50byxlLmZyb20sZS5tc2cpLHJlc29sdmU6dCxyZWplY3Q6c30pfSkpfWhhc0UyRUVuYWJsZWQoKXtyZXR1cm4hIXRoaXNbbF19ZTJlKCl7Yy5nZW5lcmF0ZUFFU0tleSgpLnRoZW4oKGU9Pnt0aGlzW2xdPWUucHJpdmF0ZSx0aGlzW2RdPWUubm9uY2UsdGhpcy5jaGFuZ2VTdGF0ZShhLlBST1RPQ09MX1NUQVRFUy5TV0lUQ0hJTkdfUFJPVE9DT0wpLHRoaXMuc2VuZChvLmRhdGEoe3R5cGU6YS5QUk9UT0NPTF9FTkNSWVBUSU9OLkUyRUUsa2V5OmUucHVibGljLG5vbmNlOmUubm9uY2V9KS5zZXRUeXBlKG8uVFlQRS5TV0lUQ0gpKX0pKS5jYXRjaCgoZT0+e3RoaXMuZGlzY29ubmVjdChlKX0pKX1vblBhY2tldChlLHQscyl7cmV0dXJuIHRoaXMuX2hlYXJ0YmVhdCgpLG5ldyBQcm9taXNlKCgoZSxpKT0+e2xldCByPSEwO2lmKG8uaXNGb3J3YXJkUGFja2V0KHQpKXRoaXMuZW1pdChcXFwiZm9yd2FyZFxcXCIsdGhpcy5wZWVySUQsdGhpcy5fZGVjb2RlRm9yd2FyZFBhY2tldCh0KSksZSgpO2Vsc2V7bGV0IGk9by5nZXRTZXEodCk7dGhpcy5fcGFja2V0c1tpXXx8KHRoaXMuX3BhY2tldHNbaV09by5idWZmZXIoKSk7bGV0IGg9dGhpcy5fcGFja2V0c1tpXTtoLmRlc2VyaWFsaXplKHQscyx0aGlzLl9kZWNyeXB0LmJpbmQodGhpcykpLnRoZW4oKHQ9PntpZihuKHRoaXMucGVlcklELFxcXCI8PDw8XFxcIixvLlRZUEUuX3N0cmluZyhoLnR5cGUpLGguc2VxKSx0KXtzd2l0Y2goZGVsZXRlIHRoaXMuX3BhY2tldHNbaV0sdGhpcy5zdGF0ZSl7Y2FzZSBhLlBST1RPQ09MX1NUQVRFUy5FU1RBQkxJU0hFRDppZihoLnR5cGU9PW8uVFlQRS5BVVRIKXtpZihyPSExLCFoLmRhdGEuaWR8fCF0aGlzLmFueXNvY2tldC5vbkF1dGgoaC5kYXRhKSlyZXR1cm4gdGhpcy5kaXNjb25uZWN0KFxcXCJJbnZhbGlkIEF1dGggUGFja2V0IVxcXCIpO3RoaXMucGVlcklEPWguZGF0YS5pZCx0aGlzLnNlbmQoby5kYXRhKHtpZDp0aGlzLmFueXNvY2tldC5pZCxhdXRoOnRoaXMuYW55c29ja2V0LmF1dGhQYWNrZXQoKX0pLnNldFR5cGUoby5UWVBFLkFVVEgpKS50aGVuKCgoKT0+e3RoaXMuY2hhbmdlU3RhdGUoYS5QUk9UT0NPTF9TVEFURVMuQ09OTkVDVEVEKSx0aGlzLmVtaXQoXFxcInJlYWR5XFxcIix0aGlzKX0pKSxlKCl9YnJlYWs7Y2FzZSBhLlBST1RPQ09MX1NUQVRFUy5BVVRISU5HOmlmKGgudHlwZT09by5UWVBFLkFVVEgpe2lmKHI9ITEsdGhpcy5jaGFuZ2VTdGF0ZShhLlBST1RPQ09MX1NUQVRFUy5DT05ORUNURUQpLCFoLmRhdGEuaWR8fCF0aGlzLmFueXNvY2tldC5vbkF1dGgoaC5kYXRhKSlyZXR1cm4gdGhpcy5kaXNjb25uZWN0KFxcXCJJbnZhbGlkIEF1dGggUGFja2V0IVxcXCIpO3RoaXMucGVlcklEPWguZGF0YS5pZCx0aGlzLmVtaXQoXFxcInJlYWR5XFxcIix0aGlzKSxlKCl9YnJlYWs7Y2FzZSBhLlBST1RPQ09MX1NUQVRFUy5DT05ORUNURUQ6aC50eXBlPT1vLlRZUEUuTElOSz8ocj0hMSx0aGlzLmVtaXQoXFxcIm1lc3NhZ2VcXFwiLHRoaXMse3NlcTpoLnNlcSxkYXRhOmguZGF0YX0pLGUoKSk6aC50eXBlPT1vLlRZUEUuSU5URVJOQUw/KHI9ITEsdGhpcy5lbWl0KFxcXCJpbnRlcm5hbFxcXCIsdGhpcyx7c2VxOmguc2VxLHR5cGU6aC50eXBlLGRhdGE6aC5kYXRhfSksZSgpKTpoLnR5cGU9PW8uVFlQRS5TV0lUQ0g/KHI9ITEsYy5nZW5lcmF0ZUFFU0tleSgpLnRoZW4oKHQ9Pih0aGlzW2xdPXQucHJpdmF0ZSx0aGlzW2RdPWguZGF0YS5ub25jZSt0Lm5vbmNlLGMuZ2V0QUVTU2Vzc2lvbktleSh0aGlzW2RdLHRoaXMucGVlcklELDApLnRoZW4oKHM9Pih0aGlzW2RdPXMsYy5jb21wdXRlQUVTc2VjcmV0KHRoaXNbbF0saC5kYXRhLmtleSkudGhlbigocz0+e3RoaXNbdV09cyx0aGlzLnNlbmQoby5kYXRhKHt0eXBlOmEuUFJPVE9DT0xfRU5DUllQVElPTi5FMkVFLGtleTp0LnB1YmxpYyxub25jZTp0Lm5vbmNlfSkuc2V0VHlwZShvLlRZUEUuU1dJVENIKSkudGhlbigoKCk9Pnt0aGlzLkVOQ1JZUFRJT05fU1RBVEU9YS5QUk9UT0NPTF9FTkNSWVBUSU9OLkUyRUUsdGhpcy5jaGFuZ2VTdGF0ZShhLlBST1RPQ09MX1NUQVRFUy5DT05ORUNURUQpLHRoaXMuZW1pdChcXFwiZTJlXFxcIix0aGlzKSxlKCl9KSl9KSkpKSkpKSkuY2F0Y2goKGU9Pnt0aGlzLmRpc2Nvbm5lY3QoZSl9KSkpOmgudHlwZT09by5UWVBFLkhFQVJUQkVBVCYmKHI9ITEsdGhpcy5faGVhcnRiZWF0UG9uZyhoLmRhdGEpLGUoKSk7YnJlYWs7Y2FzZSBhLlBST1RPQ09MX1NUQVRFUy5TV0lUQ0hJTkdfUFJPVE9DT0w6aC50eXBlPT1vLlRZUEUuU1dJVENIJiYocj0hMSx0aGlzW2RdPXRoaXNbZF0raC5kYXRhLm5vbmNlLGMuZ2V0QUVTU2Vzc2lvbktleSh0aGlzW2RdLHRoaXMuYW55c29ja2V0LmlkLDApLnRoZW4oKHQ9Pih0aGlzW2RdPXQsYy5jb21wdXRlQUVTc2VjcmV0KHRoaXNbbF0saC5kYXRhLmtleSkudGhlbigodD0+e3RoaXNbdV09dCx0aGlzLkVOQ1JZUFRJT05fU1RBVEU9YS5QUk9UT0NPTF9FTkNSWVBUSU9OLkUyRUUsdGhpcy5jaGFuZ2VTdGF0ZShhLlBST1RPQ09MX1NUQVRFUy5DT05ORUNURUQpLHRoaXMuZW1pdChcXFwiZTJlXFxcIix0aGlzKSxlKCl9KSkpKSkuY2F0Y2goKGU9Pnt0aGlzLmRpc2Nvbm5lY3QoZSl9KSkpO2JyZWFrO2Nhc2UgYS5QUk9UT0NPTF9TVEFURVMuRElTQ09OTkVDVEVEOnI9ITEsZSgpfWlmKHIpcmV0dXJuIGNvbnNvbGUubG9nKFxcXCJJbnZhbGlkIHBhY2tldCByZWNlaXZlZCEgUkVDVjpcXFwiLGgpLHRoaXMuZGlzY29ubmVjdChcXFwiSW52YWxpZCBQYWNrZXQhXFxcIil9ZWxzZSBlKCl9KSl9fSkpfWNoYW5nZVN0YXRlKGUpe3N3aXRjaCh0aGlzLnN0YXRlPWUsdGhpcy5zdGF0ZSl7Y2FzZSBhLlBST1RPQ09MX1NUQVRFUy5FU1RBQkxJU0hFRDp0aGlzW3ldPXNldFRpbWVvdXQoKCgpPT57dGhpcy5kaXNjb25uZWN0KFxcXCJhdXRoIHRpbWVkIG91dFxcXCIpfSksdGhpcy5vcHRpb25zLmF1dGhUaW1lb3V0KSx0aGlzLl9saW5rUGFja2V0UXVldWUucGF1c2UoKSx0aGlzLl9yZWN2TGlua1BhY2tldFF1ZXVlLnBhdXNlKCk7YnJlYWs7Y2FzZSBhLlBST1RPQ09MX1NUQVRFUy5BVVRISU5HOmNsZWFyVGltZW91dCh0aGlzW3ldKSx0aGlzW3ldPSExLHRoaXMuX2xpbmtQYWNrZXRRdWV1ZS5wYXVzZSgpLHRoaXMuX3JlY3ZMaW5rUGFja2V0UXVldWUucGF1c2UoKTticmVhaztjYXNlIGEuUFJPVE9DT0xfU1RBVEVTLkNPTk5FQ1RFRDpjbGVhclRpbWVvdXQodGhpc1t5XSksdGhpc1t5XT0hMSxjbGVhclRpbWVvdXQodGhpc1ttXSksdGhpc1ttXT0hMSx0aGlzLl9saW5rUGFja2V0UXVldWUucmVzdW1lKCksdGhpcy5fcmVjdkxpbmtQYWNrZXRRdWV1ZS5yZXN1bWUoKTticmVhaztjYXNlIGEuUFJPVE9DT0xfU1RBVEVTLlNXSVRDSElOR19QUk9UT0NPTDp0aGlzW21dPXNldFRpbWVvdXQoKCgpPT57dGhpcy5kaXNjb25uZWN0KFxcXCJlMmUgdGltZWQgb3V0XFxcIil9KSx0aGlzLm9wdGlvbnMuZTJlVGltZW91dCksdGhpcy5fbGlua1BhY2tldFF1ZXVlLnBhdXNlKCksdGhpcy5fcmVjdkxpbmtQYWNrZXRRdWV1ZS5wYXVzZSgpO2JyZWFrO2Nhc2UgYS5QUk9UT0NPTF9TVEFURVMuRElTQ09OTkVDVEVEOnRoaXMuX3BhY2tldFF1ZXVlLnBhdXNlKCksdGhpcy5fcGFja2V0UXVldWUua2lsbCgpLHRoaXMuX2xpbmtQYWNrZXRRdWV1ZS5wYXVzZSgpLHRoaXMuX2xpbmtQYWNrZXRRdWV1ZS5raWxsKCksdGhpcy5fcmVjdlBhY2tldFF1ZXVlLnBhdXNlKCksdGhpcy5fcmVjdlBhY2tldFF1ZXVlLmtpbGwoKSx0aGlzLl9yZWN2TGlua1BhY2tldFF1ZXVlLnBhdXNlKCksdGhpcy5fcmVjdkxpbmtQYWNrZXRRdWV1ZS5raWxsKCl9fWRpc2Nvbm5lY3QoZSl7dGhpcy5jaGFuZ2VTdGF0ZShhLlBST1RPQ09MX1NUQVRFUy5ESVNDT05ORUNURUQpLHRoaXMuX2hlYXJ0YmVhdCgpLHRoaXMuaXNQcm94eSgpP3RoaXMuYW55c29ja2V0LnVucHJveHkodGhpcy5wZWVyLmlkLHRoaXMucGVlci5zb2NrZXQuaWQsZSk6dGhpcy5wZWVyLmRpc2Nvbm5lY3QoZSl9cHJvY2Vzc1BhY2tldFF1ZXVlKGUsdCl7dGhpcy5wZWVyLnNlbmQoZS5wYWNrZXQpLnRoZW4oKCgpPT57ZS5yZXNvbHZlJiZlLnJlc29sdmUoKSx0KG51bGwsbnVsbCl9KSkuY2F0Y2goKHM9PntlLnJlamVjdChzKSx0aGlzLl9wYWNrZXRRdWV1ZS5raWxsKCksdChudWxsLG51bGwpfSkpfXByb2Nlc3NMaW5rUGFja2V0UXVldWUoZSx0KXt0aGlzLl9zZW5kKGUucGFja2V0LGUucmVzb2x2ZSxlLnJlamVjdCksdChudWxsLG51bGwpfXByb2Nlc3NSZWN2UGFja2V0UXVldWUoZSx0KXtvLmlzRm9yd2FyZFBhY2tldChlLnJlY3YpPyh0aGlzLmVtaXQoXFxcImZvcndhcmRcXFwiLHRoaXMucGVlcklELHRoaXMuX2RlY29kZUZvcndhcmRQYWNrZXQoZS5yZWN2KSksdChudWxsLG51bGwpKTp0aGlzLmlzTElOS01lc3NhZ2Uoby5nZXRUeXBlKGUucmVjdikpPyh0aGlzLl9yZWN2TGlua1BhY2tldFF1ZXVlLnB1c2goZSksdChudWxsLG51bGwpKTp0aGlzLm9uUGFja2V0KGUucGVlcixlLnJlY3YsZS5zdGF0ZSkudGhlbigoKCk9Pnt0KG51bGwsbnVsbCl9KSl9cHJvY2Vzc1JlY3ZMaW5rUGFja2V0UXVldWUoZSx0KXt0aGlzLm9uUGFja2V0KGUucGVlcixlLnJlY3YsZS5zdGF0ZSkudGhlbigoKCk9Pnt0KG51bGwsbnVsbCl9KSl9X2VuY3J5cHQoZSx0KXtyZXR1cm4gbmV3IFByb21pc2UoKHM9Pntzd2l0Y2godGhpcy5FTkNSWVBUSU9OX1NUQVRFKXtjYXNlIGEuUFJPVE9DT0xfRU5DUllQVElPTi5QTEFJTjpzKGUpO2JyZWFrO2Nhc2UgYS5QUk9UT0NPTF9FTkNSWVBUSU9OLkUyRUU6Yy5nZXRBRVNTZXNzaW9uS2V5KHRoaXNbdV0sdGhpc1tkXSx0KS50aGVuKCh0PT5jLmVuY3J5cHRBRVModCxlKS50aGVuKHMpKSkuY2F0Y2goKGU9Pnt0aGlzLmRpc2Nvbm5lY3QoZSl9KSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXFxcIltlbmNyeXB0XSBFbmNyeXB0aW9uIHN0YXRlICdcXFwiK3RoaXMuRU5DUllQVElPTl9TVEFURStcXFwiJyBub3QgaW1wbGVtZW50ZWQhXFxcIil9fSkpfV9kZWNyeXB0KGUsdCxzKXtyZXR1cm4gbmV3IFByb21pc2UoKG49Pntzd2l0Y2goZSl7Y2FzZSBhLlBST1RPQ09MX0VOQ1JZUFRJT04uUExBSU46bih0KTticmVhaztjYXNlIGEuUFJPVE9DT0xfRU5DUllQVElPTi5FMkVFOmMuZ2V0QUVTU2Vzc2lvbktleSh0aGlzW3VdLHRoaXNbZF0scykudGhlbigoZT0+Yy5kZWNyeXB0QUVTKGUsdCkudGhlbihuKSkpLmNhdGNoKChlPT57dGhpcy5kaXNjb25uZWN0KGUpfSkpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFxcXCJbZGVjcnlwdF0gRW5jcnlwdGlvbiBzdGF0ZSAnXFxcIitlK1xcXCInIG5vdCBpbXBsZW1lbnRlZCFcXFwiKX19KSl9X2VuY29kZUZvcndhcmRQYWNrZXQoZSx0LHMpe3JldHVybiBvLlRZUEUuRk9SV0FSRCtoLnBhY2tIZXgoZSkraC5wYWNrSGV4KHQpK3N9X2RlY29kZUZvcndhcmRQYWNrZXQoZSl7cmV0dXJue3RvOmgudW5wYWNrSGV4KGUuc3Vic3RyKDEsMTYpKSxmcm9tOmgudW5wYWNrSGV4KGUuc3Vic3RyKDE3LDE2KSksbXNnOmUuc3Vic3RyKDMzKX19X2dldFNlcSgpe3JldHVybiB0aGlzLl9zZXE+PTIxNDc0ODM2NDcmJih0aGlzLl9zZXE9MCksdGhpcy5fc2VxKyssdGhpcy5fc2VxfV9oZWFydGJlYXQoKXt0aGlzLmlzUHJveHkoKXx8KGNsZWFyVGltZW91dCh0aGlzW3BdKSx0aGlzLnN0YXRlIT1hLlBST1RPQ09MX1NUQVRFUy5BVVRISU5HJiZ0aGlzLnN0YXRlIT1hLlBST1RPQ09MX1NUQVRFUy5ESVNDT05ORUNURUQmJih0aGlzW3BdPXNldFRpbWVvdXQoKCgpPT57aWYoIXRoaXNbRV0pcmV0dXJuIHRoaXNbVF0rKyx0aGlzW1RdPj0yP3ZvaWQgdGhpcy5kaXNjb25uZWN0KFxcXCJNaXNzZWQgSGVhcnRiZWF0c1xcXCIpOnZvaWQgdGhpcy5faGVhcnRiZWF0KCk7dGhpc1tUXT0wLHRoaXNbRV09ITE7Y29uc3QgZT1vLmRhdGEoMSkuc2V0VHlwZShvLlRZUEUuSEVBUlRCRUFUKTt0aGlzLnNlbmQoZSkuY2F0Y2goKGU9PntuKFxcXCJIZWFydGJlYXQgRXJyb3I6XFxcIixlKSx0aGlzLmRpc2Nvbm5lY3QoZSl9KSl9KSx0aGlzLm9wdGlvbnMuaGVhcnRiZWF0SW50ZXJ2YWwpKSl9X2hlYXJ0YmVhdFBvbmcoZSl7aWYoMT09ZSl7Y29uc3QgZT1vLmRhdGEoMikuc2V0VHlwZShvLlRZUEUuSEVBUlRCRUFUKTt0aGlzLnNlbmQoZSkuY2F0Y2goKGU9PntuKFxcXCJIZWFydGJlYXQgRXJyb3I6XFxcIixlKSx0aGlzLmRpc2Nvbm5lY3QoZSl9KSl9ZWxzZSB0aGlzW0VdPSEwfWlzTElOS01lc3NhZ2UoZSl7cmV0dXJuLTEhPVtvLlRZUEUuSU5URVJOQUwsby5UWVBFLkxJTktdLmluZGV4T2YoZSl9fX0sMTAwOihlLHQscyk9Pntjb25zdCBuPXMoOTU0KShcXFwiQW55U29ja2V0XFxcIiksaT1zKDY5KSxyPXMoMjY3KSxvPXMoNjYxKSxjPXMoMjApLGg9cyg1MDEpLGE9cyg2OSksdT1zKDExNyksbD1TeW1ib2woXFxcInBlZXJzIGNvbm5lY3RlZFxcXCIpLGQ9U3ltYm9sKFxcXCJyZWFkeSBwZWVyc1xcXCIpLHA9U3ltYm9sKFxcXCJ0cmFuc3BvcnRzXFxcIiksVD1TeW1ib2woXFxcIm9uRm9yd2FyZFxcXCIpLEU9U3ltYm9sKFxcXCJvblBlZXJDb25uZWN0ZWRcXFwiKSx5PVN5bWJvbChcXFwib25QZWVyUmVhZHlcXFwiKSxtPVN5bWJvbChcXFwib25QZWVyRGlzY29ubmVjdGVkXFxcIiksZj1TeW1ib2woXFxcIm9uUGVlckludGVybmFsTWVzc2FnZVxcXCIpLFA9U3ltYm9sKFxcXCJmaW5kVHJhbnNwb3J0XFxcIiksaz1TeW1ib2woXFxcImh0dHAgYnVuZGxlIGpzXFxcIiksdz1TeW1ib2woXFxcIkFueU1lc2hcXFwiKSxiPVN5bWJvbChcXFwiSFRUUFNlcnZlclxcXCIpLEM9cygxNTUpLF89cyg0MjApLFM9cygyODgpLGc9cygzNjYpO2NsYXNzIEEgZXh0ZW5kcyBye2NvbnN0cnVjdG9yKCl7cmV0dXJuIHN1cGVyKCksdGhpcy5fc3RhcnRlZD0hMSx0aGlzLmlkPW8udXVpZHY0KCksdGhpcy5odHRwPW5ldyB1LG4oXFxcIkFueVNvY2tldElEOlxcXCIsdGhpcy5pZCksdGhpcy5ycGM9e30sdGhpc1tsXT17fSx0aGlzW2RdPXt9LHRoaXNbcF09e30sdGhpc1tiXT1udWxsLHRoaXNbd109bnVsbCxcXFwidW5kZWZpbmVkXFxcIj09dHlwZW9mIHdpbmRvdyYmKHRoaXNba109aS5yZWFkRmlsZVN5bmMoXFxcIi8vLi4vLi4vZGlzdC9hbnlzb2NrZXQuYnJvd3Nlci5qc1xcXCIpKSx0aGlzfWZpbHRlcihlKXt9YnJvYWRjYXN0KGUsdCl7cmV0dXJuIHQ9dHx8ITEsbmV3IFByb21pc2UoKChzLG4pPT57Y29uc3QgaT1bXTtmb3IobGV0IHIgaW4gdGhpc1tkXSlyPXRoaXNbZF1bcl0saS5wdXNoKHIuc2VuZChlLHQpKSxQcm9taXNlLmFsbChpKS50aGVuKHMpLmNhdGNoKG4pfSkpfW1lc2goKXtpZih0aGlzLl9zdGFydGVkKXRocm93IG5ldyBFcnJvcihcXFwiQ2Fubm90IGVuYWJsZSBNZXNoIHdoaWxlIEFueVNvY2tldCBpcyBydW5uaW5nLiBZb3UgbXVzdCBmaXJzdCBzdG9wIEFueVNvY2tldCFcXFwiKTt0aGlzW3ddPW5ldyBfKHRoaXMpfXNldFJQQyhlKXt0aGlzLnJwYz1lfWNhblByb3h5KGUsdCl7cmV0dXJuITF9cHJveHkoZSx0KXtyZXR1cm4gbmV3IFByb21pc2UoKChzLG4pPT57ZSE9dCYmZSE9dGhpcy5pZD90aGlzW2RdW3RdLmlzUHJveHkoKT9uKFxcXCJDYW5ub3QgcHJveHkgdmlhIGEgcHJveHkhIGF0bS4uLiA6KVxcXCIpOnRoaXNbZF1bdF0uc2VuZEludGVybmFsKHt0eXBlOmguSU5URVJOQUxfUEFDS0VUX1RZUEUuUFJPWFksYWN0aW9uOlxcXCJwcm94eVxcXCIsaWQ6ZX0sITApLnRoZW4oKGk9PntpZihpLm1zZy5vayYmIXRoaXNbZF1bZV0pe2xldCBuPW5ldyBTKHRoaXMsbmV3IGcoITAsdGhpcy5pZCxlLHRoaXNbZF1bdF0pLHRoaXNbZF1bdF0ub3B0aW9ucyk7dGhpc1t5XShuKSxzKHRoaXNbZF1bZV0pfWVsc2UgbihcXFwiQ2Fubm90IHByb3h5IVxcXCIpfSkpLmNhdGNoKG4pOm4oXFxcIkNhbm5vdCBwcm94eSBsb29wYmFjayFcXFwiKX0pKX11bnByb3h5KGUsdCxzKXtzPXN8fFxcXCJQcm94eSBDb25uZWN0aW9uIENsb3NlZFxcXCIsdGhpc1tkXVtlXSYmdGhpc1tkXVtlXS5pc1Byb3h5KCkmJih0aGlzW2RdW3RdLnNlbmRJbnRlcm5hbCh7dHlwZTpoLklOVEVSTkFMX1BBQ0tFVF9UWVBFLlBST1hZLGFjdGlvbjpcXFwidW5wcm94eVxcXCIsaWQ6ZX0pLHRoaXNbbV0odGhpc1tkXVtlXSxzKSl9aGFzUGVlcihlKXtyZXR1cm4hIXRoaXNbZF1bZV19aGFzRGlyZWN0UGVlcihlKXtyZXR1cm4hKCF0aGlzW2RdW2VdfHx0aGlzW2RdW2VdLmlzUHJveHkoKSl9c2VydmVyKGUsdCl7cmV0dXJuIHRoaXMubGlzdGVuKGUsdCl9bGlzdGVuKGUsdCl7aWYodGhpcy5fc3RhcnRlZD0hMCxcXFwibnVtYmVyXFxcIj09dHlwZW9mKHQ9dHx8e30pJiYodD17cG9ydDp0fSksdC5pcD10LmlwfHxcXFwiMC4wLjAuMFxcXCIsLTE9PVtcXFwiaHR0cFxcXCIsXFxcIndzXFxcIl0uaW5kZXhPZihlLnRvTG93ZXJDYXNlKCkpJiYhdC5wb3J0KXRocm93IG5ldyBFcnJvcihcXFwiSW52YWxpZCBwb3J0IVxcXCIpOy0xIT1bXFxcIndzXFxcIl0uaW5kZXhPZihlLnRvTG93ZXJDYXNlKCkpJiYodGhpc1tiXXx8dGhpcy5saXN0ZW4oXFxcImh0dHBcXFwiLHQpLHQ9e3NlcnZlcjp0aGlzW2JdfSk7bGV0IHM9dGhpc1tQXShlKTtzPW5ldyBzKFxcXCJzZXJ2ZXJcXFwiLHQpLHRoaXNbcF1bcy5pZF09cyxzLm9uKFxcXCJjb25uZWN0ZWRcXFwiLChlPT57dGhpc1tFXShlLHMub3B0aW9ucyl9KSkscy5vbihcXFwiZGlzY29ubmVjdGVkXFxcIiwoKGUsdCk9Pnt0aGlzW21dKGUsdCl9KSk7bGV0IG49cy5saXN0ZW4oKTtyZXR1cm5cXFwiaHR0cFxcXCI9PWUmJih0aGlzW2JdPXMuc2VydmVyKSxufWNvbm5lY3QoZSx0LHMsaSl7cmV0dXJuIG5ldyBQcm9taXNlKCgocixvKT0+e3RoaXMuX3N0YXJ0ZWQ9ITAsaT1PYmplY3QuYXNzaWduKGl8fHt9LHtpcDp0LHBvcnQ6c30pO2xldCBjPXRoaXNbUF0oZSk7Yz1uZXcgYyhcXFwiY2xpZW50XFxcIixpKSxjLm9uKFxcXCJjb25uZWN0ZWRcXFwiLChlPT57dGhpc1twXVtjLmlkXT1jLHRoaXNbRV0oZSxjLm9wdGlvbnMsciksbihcXFwiVHJhbnNwb3J0cyBBZGRlZFxcXCIsYy5pZCxPYmplY3Qua2V5cyh0aGlzW3BdKS5sZW5ndGgpfSkpLGMub24oXFxcImRpc2Nvbm5lY3RlZFxcXCIsKChlLHQpPT57dGhpc1twXVtjLmlkXS5zdG9wKCksZGVsZXRlIHRoaXNbcF1bYy5pZF0sdGhpc1ttXShlLHQpLG4oXFxcIlRyYW5zcG9ydHMgbGVmdFxcXCIsYy5pZCxPYmplY3Qua2V5cyh0aGlzW3BdKS5sZW5ndGgpLHRoaXNbZF1bZS5pZF18fG8odCl9KSksYy5jb25uZWN0KCkuY2F0Y2gobyl9KSl9c3RvcCgpe3JldHVybiB0aGlzLl9zdGFydGVkPSExLG5ldyBQcm9taXNlKCgoZSx0KT0+e2NvbnN0IHM9W107Zm9yKGxldCBlIGluIHRoaXNbcF0pcy5wdXNoKHRoaXNbcF1bZV0uc3RvcCgpKTtQcm9taXNlLmFsbChzKS50aGVuKCgoKT0+e3RoaXNbbF09e30sdGhpc1tkXT17fSx0aGlzW3BdPXt9LGUoKX0pKS5jYXRjaCgoZT0+e3Rocm93IGV9KSl9KSl9b25BdXRoKGUpe3JldHVybiEwfWF1dGhQYWNrZXQoKXt9W1BdKGUpe2ZvcihsZXQgdCBpbiBBLlRyYW5zcG9ydClpZihBLlRyYW5zcG9ydC5oYXNPd25Qcm9wZXJ0eSh0KSYmQS5UcmFuc3BvcnRbdF0uc2NoZW1lKCk9PWUpcmV0dXJuIEEuVHJhbnNwb3J0W3RdO3Rocm93IG5ldyBFcnJvcihcXFwiSW52YWxpZCBzY2hlbWUgJ1xcXCIrZStcXFwiJ1xcXCIpfVtFXShlLHQscyl7aWYobihcXFwiUGVlciBjb25uZWN0ZWRcXFwiKSxcXFwiaHR0cFxcXCI9PWUudHlwZSlyZXR1cm4gZS5vbihcXFwidXBncmFkZVxcXCIsKChlLHQpPT57bGV0IHM9bmV3IGEoZSx0KTtzLmhlYWRlcihcXFwiQU5ZU09DS0VULUlEXFxcIix0aGlzLmlkKSx0aGlzLmh0dHAuX3Byb2Nlc3NVcGdyYWRlKHMpLHRoaXMuZW1pdChcXFwiaHR0cF91cGdyYWRlXFxcIixzLGUsdCl9KSksdm9pZCBlLm9uKFxcXCJtZXNzYWdlXFxcIiwoKGUsdCk9PntsZXQgcz1uZXcgYShlLHQpO2lmKFxcXCIvQGFueXNvY2tldFxcXCI9PXMudXJsKXJldHVybiBzLmJvZHkodGhpc1trXSksdm9pZCBzLmVuZCgpO2UuYm9keT1cXFwiXFxcIixlLm9uKFxcXCJlcnJvclxcXCIsKGU9Pntjb25zb2xlLmxvZyhcXFwiRXJyXFxcIixlKX0pKS5vbihcXFwiZGF0YVxcXCIsKHQ9PntlLmJvZHkrPXQsZS5ib2R5Lmxlbmd0aD4xZTcmJmUuY29ubmVjdGlvbi5kZXN0cm95KCl9KSkub24oXFxcImVuZFxcXCIsKCgpPT57ZS5ib2R5PWUuYm9keS50b1N0cmluZygpLHMuaGVhZGVyKFxcXCJBTllTT0NLRVQtSURcXFwiLHRoaXMuaWQpLHRoaXMuaHR0cC5fcHJvY2VzcyhzKSx0aGlzLmVtaXQoXFxcImh0dHBcXFwiLHMsZSx0KX0pKX0pKTtjb25zdCBpPW5ldyBTKHRoaXMsZSx0KTt0aGlzW2xdW2UuY29ubmVjdGlvbklEXT1pLGkub24oXFxcImZvcndhcmRcXFwiLHRoaXNbVF0uYmluZCh0aGlzKSksaS5vbmNlKFxcXCJyZWFkeVxcXCIsKGU9Pnt0aGlzW3ldKGUscyl9KSl9W1RdKGUsdCl7aWYodGhpcy5pZD09dC50byl7aWYoIXRoaXNbZF1bdC5mcm9tXSlyZXR1cm4gdm9pZCB0aGlzW2RdW2VdLmRpc2Nvbm5lY3QoXFxcIkludmFsaWQgZm9yd2FyZCBwYWNrZXQhIENsaWVudCBkb2Vzbid0IGV4aXN0IVxcXCIpO3RoaXNbZF1bdC5mcm9tXS5fcmVjdkZvcndhcmQodCl9ZWxzZSB0aGlzLmhhc0RpcmVjdFBlZXIodC50byk/dGhpc1tkXVt0LnRvXS5mb3J3YXJkKHQpOmNvbnNvbGUuZXJyb3IoXFxcIkZPUldBUkQgRVJST1IhIFdlIGRvIG5vdCBoYXZlIHRoZSBwZWVyXFxcIix0LnRvKX1beV0oZSx0KXtpZih0aGlzW2RdW2UucGVlcklEXSlyZXR1cm4gZS5wZWVySUQ9bnVsbCx2b2lkIGUuZGlzY29ubmVjdChcXFwiRHVwbGljYXRlZCBBbnlTb2NrZXQgSUQgZm91bmQhXFxcIik7bihcXFwiUGVlciByZWFkeVxcXCIpO2NvbnN0IHM9bmV3IEMoZSk7cmV0dXJuIHRoaXNbZF1bZS5wZWVySURdPXMscy5vbihcXFwibWVzc2FnZVxcXCIsKGU9Pnt0aGlzLmVtaXQoXFxcIm1lc3NhZ2VcXFwiLGUpfSkpLHMub24oXFxcImUyZVxcXCIsKGU9Pnt0aGlzLmVtaXQoXFxcImUyZVxcXCIsZSl9KSkscy5vbihcXFwiaW50ZXJuYWxcXFwiLHRoaXNbZl0uYmluZCh0aGlzKSksdCYmdChzKSxzZXRUaW1lb3V0KCgoKT0+e3RoaXMuZW1pdChcXFwiY29ubmVjdGVkXFxcIixzKX0pLDApLHN9W21dKGUsdCl7bihcXFwiUGVlciBkaXNjb25uZWN0ZWRcXFwiLHQsZS5pZCk7bGV0IHM9bnVsbDtpZih0aGlzW2xdW2UuY29ubmVjdGlvbklEXSYmKHM9dGhpc1tsXVtlLmNvbm5lY3Rpb25JRF0ucGVlcklELGRlbGV0ZSB0aGlzW2xdW2UuY29ubmVjdGlvbklEXSksdGhpc1tkXVtlLmlkXSYmKHM9ZS5pZCkscyl7Y29uc3QgZT10aGlzW2RdW3NdO2RlbGV0ZSB0aGlzW2RdW3NdO2NvbnN0IG49ZS5nZXRMaW5rcygpO2ZvcihsZXQgdCBpbiBuKW5bdF0uc2VuZEludGVybmFsKHt0eXBlOmguSU5URVJOQUxfUEFDS0VUX1RZUEUuTkVUV09SSyxhY3Rpb246XFxcImRpc2Nvbm5lY3RlZFxcXCIsaWQ6ZS5pZH0pLmNhdGNoKCgoKT0+e30pKSxlLnJlbW92ZUxpbmsoblt0XSksdGhpc1tkXVt0XSYmdGhpc1tkXVt0XS5yZW1vdmVMaW5rKGUpO2UuZGlzY29ubmVjdCgpLHRoaXMuZW1pdChcXFwiZGlzY29ubmVjdGVkXFxcIixlLHQpfWVsc2UgZS5kaXNjb25uZWN0KCl9W2ZdKGUpe2lmKGUubXNnLnR5cGU9PWguSU5URVJOQUxfUEFDS0VUX1RZUEUuTkVUV09SSyl7aWYoXFxcImNvbm5lY3RlZFxcXCI9PWUubXNnLmFjdGlvbil7aWYoIXRoaXNbZF1bZS5tc2cuaWRdKXtsZXQgdD1uZXcgUyh0aGlzLG5ldyBnKCExLHRoaXMuaWQsZS5tc2cuaWQsdGhpc1tkXVtlLnBlZXIuaWRdKSk7dGhpc1t5XSh0KX19ZWxzZSBpZihcXFwiZGlzY29ubmVjdGVkXFxcIj09ZS5tc2cuYWN0aW9uKXtpZighdGhpc1tkXVtlLm1zZy5pZF0pcmV0dXJuIHZvaWQgZS5wZWVyLmRpc2Nvbm5lY3QoXFxcIkludmFsaWQgcHJveHkgcmVxdWVzdCFcXFwiKTt0aGlzW21dKHRoaXNbZF1bZS5tc2cuaWRdLFxcXCJQcm94eSBDb25uZWN0aW9uIENsb3NlZFxcXCIpfX1lbHNlIGlmKGUubXNnLnR5cGU9PWguSU5URVJOQUxfUEFDS0VUX1RZUEUuUFJPWFkpe2lmKFxcXCJwcm94eVxcXCI9PWUubXNnLmFjdGlvbil7aWYoIXRoaXMuY2FuUHJveHkoZS5wZWVyLmlkLGUubXNnLmlkKXx8IXRoaXNbZF1bZS5tc2cuaWRdKXJldHVybiB2b2lkIGUucGVlci5kaXNjb25uZWN0KFxcXCJJbnZhbGlkIHByb3h5IHJlcXVlc3QhXFxcIik7aWYodGhpc1tkXVtlLm1zZy5pZF0uaXNQcm94eSgpKXJldHVybiB2b2lkIGUucmVwbHkoe29rOiExfSk7dGhpc1tkXVtlLm1zZy5pZF0uYWRkTGluayh0aGlzW2RdW2UucGVlci5pZF0pLHRoaXNbZF1bZS5wZWVyLmlkXS5hZGRMaW5rKHRoaXNbZF1bZS5tc2cuaWRdKSx0aGlzW2RdW2UubXNnLmlkXS5zZW5kSW50ZXJuYWwoe3R5cGU6aC5JTlRFUk5BTF9QQUNLRVRfVFlQRS5ORVRXT1JLLGFjdGlvbjpcXFwiY29ubmVjdGVkXFxcIixpZDplLnBlZXIuaWR9KSxlLnJlcGx5KHtvazohMH0pfWVsc2UgaWYoXFxcInVucHJveHlcXFwiPT1lLm1zZy5hY3Rpb24pe2lmKCF0aGlzLmNhblByb3h5KGUucGVlci5pZCxlLm1zZy5pZCl8fCF0aGlzW2RdW2UubXNnLmlkXSlyZXR1cm4gdm9pZCBlLnBlZXIuZGlzY29ubmVjdChcXFwiSW52YWxpZCBwcm94eSByZXF1ZXN0IVxcXCIpO3RoaXNbZF1bZS5tc2cuaWRdLnJlbW92ZUxpbmsodGhpc1tkXVtlLnBlZXIuaWRdKSx0aGlzW2RdW2UucGVlci5pZF0ucmVtb3ZlTGluayh0aGlzW2RdW2UubXNnLmlkXSksdGhpc1tkXVtlLm1zZy5pZF0uc2VuZEludGVybmFsKHt0eXBlOmguSU5URVJOQUxfUEFDS0VUX1RZUEUuTkVUV09SSyxhY3Rpb246XFxcImRpc2Nvbm5lY3RlZFxcXCIsaWQ6ZS5wZWVyLmlkfSl9fWVsc2UgaWYoZS5tc2cudHlwZT09aC5JTlRFUk5BTF9QQUNLRVRfVFlQRS5SUEMpe2xldCB0PSExLHM9dGhpcy5ycGM7Zm9yKGxldCBuIGluIGUubXNnLm1ldGhvZClpZih0PXMscz1zW2UubXNnLm1ldGhvZFtuXV0sIXMpYnJlYWs7aWYodCYmcyYmXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIHMpdHJ5e2ZvcihsZXQgdCBvZiBlLm1zZy5iaW4pZS5tc2cucGFyYW1zW3RdPUEuUGFja2VyLnVucGFjayhlLm1zZy5wYXJhbXNbdF0pO1Byb21pc2UucmVzb2x2ZShzLmFwcGx5KHQsZS5tc2cucGFyYW1zKSkudGhlbigodD0+e2xldCBzPSExO2MuaXNCdWZmZXIodCkmJih0PUEuUGFja2VyLnBhY2sodCkscz0hMCksZS5yZXBseSh7cmVzdWx0OnQsYmluOnN9KX0pKS5jYXRjaCgodD0+e2UucmVwbHkoe2Vycm9yOnQsY29kZTo1MDB9KX0pKX1jYXRjaCh0KXtlLnJlcGx5KHtlcnJvcjp0Lm1lc3NhZ2UsY29kZTo1MDB9KX1lbHNlIGUucmVwbHkoe2Vycm9yOlxcXCJNZXRob2Qgbm90IGZvdW5kXFxcIixjb2RlOjQwNH0pfWVsc2UgZS5tc2cudHlwZT09aC5JTlRFUk5BTF9QQUNLRVRfVFlQRS5SUENfTk9USUZZP2NvbnNvbGUubG9nKFxcXCJSUENfTk9USUZZXFxcIixlLm1zZyk6ZS5tc2cudHlwZT09aC5JTlRFUk5BTF9QQUNLRVRfVFlQRS5TWU5DRURfVElNRT9lLnJlcGx5KHtvOmUubXNnLnRpbWUsdDpEYXRlLm5vdygpfSk6ZS5wZWVyLmRpc2Nvbm5lY3QoXFxcIkludmFsaWQgaW50ZXJuYWwgbWVzc2FnZVxcXCIpfX1lLmV4cG9ydHM9QX0sNTU4OihlLHQscyk9Pntjb25zdCBuPXMoNTU1KSxpPXMoNTAxKSxyPWU9Pm4udW5wYWNrSW50MzIoZS5zdWJzdHIoMiw0KSksbz1lPT5wYXJzZUludChlLnN1YnN0cigxLDEpKSxjPXt9O2NsYXNzIGh7Y29uc3RydWN0b3IoZSl7dGhpcy5zZXE9MCx0aGlzLnR5cGU9MCx0aGlzLmJ1ZmZlcj1bXSx0aGlzLmRhdGE9bnVsbCxlJiYodGhpcy5kYXRhPWUpfXNldFR5cGUoZSl7cmV0dXJuIHRoaXMudHlwZT1lLHRoaXN9c2V0U2VxKGUpe3JldHVybiB0aGlzLnNlcT1lLHRoaXN9c2V0UmVwbHlUbyhlKXtyZXR1cm4gZSYmKHRoaXMuc2VxPS1lKSx0aGlzfWFzeW5jIHNlcmlhbGl6ZShlLHQpe2U9ZXx8TnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7bGV0IHM9W0pTT04uc3RyaW5naWZ5KHRoaXMuZGF0YSldO3NbMF0ubGVuZ3RoPmUmJihjW2VdPWNbZV18fG5ldyBSZWdFeHAoXFxcIiguezEsXFxcIitlK1xcXCJ9KVxcXCIsXFxcImdcXFwiKSxzPXNbMF0ubWF0Y2goY1tlXSkpO2ZvcihsZXQgZT0wO2U8cy5sZW5ndGg7ZSsrKXNbZV09KGU9PXMubGVuZ3RoLTE/aS5QQUNLRVRfTEVOR1RILkZVTEw6aS5QQUNLRVRfTEVOR1RILlBBUlRJQUwpLnRvU3RyaW5nKCkrdGhpcy50eXBlLnRvU3RyaW5nKCkrbi5wYWNrSW50MzIodGhpcy5zZXEpK2F3YWl0IHQoc1tlXSxNYXRoLmFicyh0aGlzLnNlcSkpO3JldHVybiBzfWFzeW5jIGRlc2VyaWFsaXplKGUsdCxzKXtzPXN8fChlPT5Qcm9taXNlLnJlc29sdmUoZSkpO2NvbnN0IG49ZS5zdWJzdHIoMCwxKT09aS5QQUNLRVRfTEVOR1RILkZVTEw7aWYodGhpcy50eXBlPW8oZSksdGhpcy5zZXE9cihlKSx0aGlzLmJ1ZmZlci5wdXNoKGF3YWl0IHModCxlLnN1YnN0cig2KSxNYXRoLmFicyh0aGlzLnNlcSkpKSxuKXt0cnl7dGhpcy5idWZmZXI9dGhpcy5idWZmZXIuam9pbihcXFwiXFxcIik7bGV0IGU9SlNPTi5wYXJzZSh0aGlzLmJ1ZmZlcik7dGhpcy5idWZmZXI9W10sdGhpcy5kYXRhPWV9Y2F0Y2goZSl7dGhpcy5kYXRhPW51bGx9cmV0dXJuITB9cmV0dXJuITF9fWUuZXhwb3J0cz17ZGF0YTplPT5uZXcgaChlPWV8fHt9KSxidWZmZXI6KCk9Pm5ldyBoLGdldFNlcTplPT5yKGUpLGdldFR5cGU6ZT0+byhlKSxpc0ZvcndhcmRQYWNrZXQ6ZT0+ZS5zdWJzdHIoMCwxKT09aS5QQUNLRVRfVFlQRS5GT1JXQVJELFRZUEU6aS5QQUNLRVRfVFlQRX19LDM2NjooZSx0LHMpPT57Y29uc3Qgbj1zKDU4NiksaT1zKDE2Mik7ZS5leHBvcnRzPWNsYXNzIGV4dGVuZHMgbntjb25zdHJ1Y3RvcihlLHQscyxuKXtzdXBlcihuKSx0aGlzLmlkPXMsdGhpcy5hbnlzb2NrZXRJRD10LHRoaXMudHlwZT1lP2kuVFlQRS5DTElFTlQ6aS5UWVBFLlNFUlZFUix0aGlzLmlzUHJveHk9ITAsdGhpcy5pbml0KCl9b25Db25uZWN0KCl7fXNlbmQoZSl7cmV0dXJuIG5ldyBQcm9taXNlKCgodCxzKT0+e3RyeXt0aGlzLnNvY2tldC5mb3J3YXJkKHt0bzp0aGlzLmlkLGZyb206dGhpcy5hbnlzb2NrZXRJRCxtc2c6ZX0pLHQoKX1jYXRjaChlKXtzKGUpfX0pKX1vbkRpc2Nvbm5lY3QoKXt9fX0sNTAxOmU9Pntjb25zdCB0PXtQQUNLRVRfVFlQRTp7QVVUSDoxLElOVEVSTkFMOjIsTElOSzozLFNXSVRDSDo0LEhFQVJUQkVBVDo1LEZPUldBUkQ6Nn0sUEFDS0VUX0xFTkdUSDp7RlVMTDoxLFBBUlRJQUw6Mn0sSU5URVJOQUxfUEFDS0VUX1RZUEU6e05FVFdPUks6MSxQUk9YWToyLFJQQzozLFJQQ19OT1RJRlk6NCxTWU5DRURfVElNRTo1fSxQUk9UT0NPTF9TVEFURVM6e0VTVEFCTElTSEVEOjAsQVVUSElORzoxLENPTk5FQ1RFRDoyLFNXSVRDSElOR19QUk9UT0NPTDozLERJU0NPTk5FQ1RFRDo0fSxQUk9UT0NPTF9FTkNSWVBUSU9OOntQTEFJTjoxLEUyRUU6Mn0sTUFYX1BBQ0tFVF9TSVpFOjUyNDI4OH07Zm9yKGxldCBlIGluIHQpdFtlXS5fc3RyaW5nPXM9Pntmb3IobGV0IG4gaW4gdFtlXSlpZih0W2VdW25dPT1zKXJldHVybiBuO3JldHVybiBzfTtlLmV4cG9ydHM9dH0sNTEwOihlLHQscyk9Pntjb25zdCBuPXMoMTQ3KSxpPXMoMjApO2UuZXhwb3J0cz1uZXcgY2xhc3N7dXVpZHY0KCl7cmV0dXJuXFxcInh4eHh4eHh4eHh4eDR4eHh5eHh4eHh4eHh4eHh4eHh4XFxcIi5yZXBsYWNlKC9beHldL2csKGZ1bmN0aW9uKGUpe2NvbnN0IHQ9MTYqTWF0aC5yYW5kb20oKXwwO3JldHVybihcXFwieFxcXCI9PWU/dDozJnR8OCkudG9TdHJpbmcoMTYpfSkpfWdlbmVyYXRlQUVTS2V5KCl7cmV0dXJuIG5ldyBQcm9taXNlKChhc3luYyhlLHQpPT57bGV0IHM9YXdhaXQgbi5jcmVhdGVFQ0RIKFxcXCJzZWNwNTIxcjFcXFwiKSxyPWF3YWl0IHMuZ2VuZXJhdGVLZXlzKCk7ZSh7cHJpdmF0ZTpzLHB1YmxpYzppLmJ1ZmZlclRvU3RyaW5nKHIpLG5vbmNlOmkuYnVmZmVyVG9IZXgobi5yYW5kb21CeXRlcygzMikpfSl9KSl9Y29tcHV0ZUFFU3NlY3JldChlLHQpe3JldHVybiBuZXcgUHJvbWlzZSgoYXN5bmMocyxuKT0+e2xldCByPWF3YWl0IGUuY29tcHV0ZVNlY3JldChpLmJ1ZmZlckZyb21TdHJpbmcodCksbnVsbCxcXFwiaGV4XFxcIik7cj1yLnN1YnN0cigwLDEyOCkscyhyKX0pKX1nZXRBRVNTZXNzaW9uS2V5KGUsdCxzKXtyZXR1cm4gbmV3IFByb21pc2UoKGFzeW5jKHIsbyk9Pnt0PXQrXFxcIl9cXFwiK3MsZT1hd2FpdCBuLnBia2RmMlN5bmMoZSx0LDEsMzIsXFxcInNoYTI1NlxcXCIpLHIoZT1pLmJ1ZmZlclRvSGV4KGUpKX0pKX1lbmNyeXB0QUVTKGUsdCl7cmV0dXJuIG5ldyBQcm9taXNlKCgocyxyKT0+e3RyeXtsZXQgcj1uLnJhbmRvbUJ5dGVzKDE2KSxvPW4uY3JlYXRlQ2lwaGVyaXYoXFxcImFlcy0yNTYtY2JjXFxcIixpLmJ1ZmZlckZyb21IZXgoZSksciksYz1vLnVwZGF0ZSh0KTtjPUJ1ZmZlci5jb25jYXQoW2Msby5maW5hbCgpXSk7bGV0IGg9ci50b1N0cmluZyhcXFwiaGV4XFxcIikrYy50b1N0cmluZyhcXFwiaGV4XFxcIik7dGhpcy5kZWNyeXB0QUVTKGUsaCkscyhoKX1jYXRjaChlKXtyKGUpfX0pKX1kZWNyeXB0QUVTKGUsdCl7cmV0dXJuIG5ldyBQcm9taXNlKCgocyxyKT0+e3RyeXtsZXQgcj1CdWZmZXIuZnJvbSh0LnN1YnN0cigwLDMyKSxcXFwiaGV4XFxcIiksbz1CdWZmZXIuZnJvbSh0LnN1YnN0cigzMiksXFxcImhleFxcXCIpLGM9bi5jcmVhdGVEZWNpcGhlcml2KFxcXCJhZXMtMjU2LWNiY1xcXCIsaS5idWZmZXJGcm9tSGV4KGUpLHIpLGg9Yy51cGRhdGUobyk7aD1CdWZmZXIuY29uY2F0KFtoLGMuZmluYWwoKV0pLHMoaC50b1N0cmluZygpKX1jYXRjaChlKXtyKGUpfX0pKX19fSw1ODY6KGUsdCxzKT0+e2NvbnN0IG49cygyNjcpLGk9cyg2NjEpLHI9cygxNjIpO2UuZXhwb3J0cz1jbGFzcyBleHRlbmRzIG57Y29uc3RydWN0b3IoZSl7c3VwZXIoKSx0aGlzLmNvbm5lY3Rpb25JRD1pLnV1aWR2NCgpLHRoaXMuY29ubmVjdGVkPSEwLHRoaXMuc29ja2V0PWUsdGhpcy50eXBlPXIuVFlQRS5OT05FLHRoaXMuaW5pdGVkPSExfWluaXQoKXt0aGlzLmluaXRlZHx8KHRoaXMuaW5pdGVkPSEwLHRoaXMub25Db25uZWN0KCksdGhpcy5lbWl0KFxcXCJjb25uZWN0ZWRcXFwiLHRoaXMpKX1pc0NsaWVudCgpe2lmKHRoaXMudHlwZT09ci5UWVBFLk5PTkUpdGhyb3cgbmV3IEVycm9yKFxcXCJJbnZhbGlkIHRyYW5zcG9ydCB0eXBlISEhXFxcIik7cmV0dXJuIHRoaXMudHlwZT09ci5UWVBFLkNMSUVOVH1kaXNjb25uZWN0KGUpe3RoaXMuY29ubmVjdGVkJiYodGhpcy5jb25uZWN0ZWQ9ITEsdGhpcy5vbkRpc2Nvbm5lY3QoKSx0aGlzLmVtaXQoXFxcImRpc2Nvbm5lY3RlZFxcXCIsdGhpcyxlKSl9c2VuZChlKXt0aHJvdyBuZXcgRXJyb3IoXFxcInNlbmQoKSBtdXN0IGJlIGltcGxlbWVudGVkXFxcIil9b25Db25uZWN0KCl7dGhyb3cgbmV3IEVycm9yKFxcXCJvbkNvbm5lY3QoKSBtdXN0IGJlIGltcGxlbWVudGVkXFxcIil9b25EaXNjb25uZWN0KCl7dGhyb3cgbmV3IEVycm9yKFxcXCJvbkRpc2Nvbm5lY3QoKSBtdXN0IGJlIGltcGxlbWVudGVkXFxcIil9fX0sMTYyOihlLHQscyk9Pntjb25zdCBuPXMoMjY3KSxpPXMoNjYxKTtjbGFzcyByIGV4dGVuZHMgbntjb25zdHJ1Y3RvcihlLHQpe3N1cGVyKCksdGhpcy5pZD1pLnV1aWR2NCgpLHRoaXMub3B0aW9ucz1PYmplY3QuYXNzaWduKHt9LHQpLHRoaXMudHlwZT1lLHRoaXMucGVlcnM9bmV3IE1hcCx0aGlzLnN0YXJ0ZWQ9ITF9bGlzdGVuKCl7cmV0dXJuIG5ldyBQcm9taXNlKCgoZSx0KT0+e3RoaXMuc3RhcnRlZD9lKCk6dGhpcy5vbkxpc3RlbigpLnRoZW4oKCgpPT57dGhpcy5zdGFydGVkPSEwLGUoKX0pKS5jYXRjaCgoZT0+e3QoZSl9KSl9KSl9Y29ubmVjdCgpe3JldHVybiBuZXcgUHJvbWlzZSgoKGUsdCk9Pnt0aGlzLnN0YXJ0ZWQ/ZSgpOnRoaXMub25Db25uZWN0KCkudGhlbigoKCk9Pnt0aGlzLnN0YXJ0ZWQ9ITAsZSgpfSkpLmNhdGNoKChlPT57dChlKX0pKX0pKX1zdG9wKCl7cmV0dXJuIG5ldyBQcm9taXNlKCgoZSx0KT0+e2lmKHRoaXMuc3RhcnRlZCl7dGhpcy5zdGFydGVkPSExO2Zvcihjb25zdCBlIG9mIHRoaXMucGVlcnMudmFsdWVzKCkpZS5kaXNjb25uZWN0KFxcXCJMb2NhbCBDb25uZWN0aW9uIENsb3NlZFxcXCIpO3RoaXMub25TdG9wKCkudGhlbigoKCk9PntlKCl9KSkuY2F0Y2goKGU9Pnt0KGUpfSkpfWVsc2UgZSgpfSkpfWFkZFBlZXIoZSl7ZS50eXBlPXRoaXMudHlwZSxlLm9uKFxcXCJjb25uZWN0ZWRcXFwiLCgoKT0+e3RoaXMucGVlcnMuc2V0KGUuY29ubmVjdGlvbklELGUpLHRoaXMuZW1pdChcXFwiY29ubmVjdGVkXFxcIixlKX0pKSxlLm9uKFxcXCJkaXNjb25uZWN0ZWRcXFwiLCgoZSx0KT0+e3RoaXMucGVlcnMuZGVsZXRlKGUuY29ubmVjdGlvbklEKSx0aGlzLmVtaXQoXFxcImRpc2Nvbm5lY3RlZFxcXCIsZSx0KX0pKSxlLmluaXQoKX1vbkNvbm5lY3QoKXt0aHJvdyBuZXcgRXJyb3IoXFxcIm9uQ29ubmVjdCgpIG11c3QgYmUgaW1wbGVtZW50ZWRcXFwiKX1vbkxpc3Rlbigpe3Rocm93IG5ldyBFcnJvcihcXFwib25MaXN0ZW4oKSBtdXN0IGJlIGltcGxlbWVudGVkXFxcIil9b25TdG9wKCl7dGhyb3cgbmV3IEVycm9yKFxcXCJvblN0b3AoKSBtdXN0IGJlIGltcGxlbWVudGVkXFxcIil9fXZhciBvLGMsaDtoPSgpPT57dGhyb3cgbmV3IEVycm9yKFxcXCJzdGF0aWMgc2NoZW1lKCkgbXVzdCBiZSBpbXBsZW1lbnRlZFxcXCIpfSwoYz1cXFwic2NoZW1lXFxcIilpbihvPXIpP09iamVjdC5kZWZpbmVQcm9wZXJ0eShvLGMse3ZhbHVlOmgsZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTpvW2NdPWgsZS5leHBvcnRzPXIsci5UWVBFPXtDTElFTlQ6XFxcImNsaWVudFxcXCIsU0VSVkVSOlxcXCJzZXJ2ZXJcXFwiLEhUVFA6XFxcImh0dHBcXFwifX0sNjgzOihlLHQscyk9Pntjb25zdCBuPXMoNTg2KTtlLmV4cG9ydHM9Y2xhc3MgZXh0ZW5kcyBue29uQ29ubmVjdCgpe3RoaXMuc29ja2V0Lm9uKFxcXCJjbG9zZVxcXCIsKCgpPT57dGhpcy5kaXNjb25uZWN0KFxcXCJSZW1vdGUgQ29ubmVjdGlvbiBDbG9zZWRcXFwiKX0pKSx0aGlzLnNvY2tldC5vbihcXFwiZXJyb3JcXFwiLChlPT57dGhpcy5lbWl0KFxcXCJlcnJvclxcXCIsdGhpcyxlKX0pKSx0aGlzLnNvY2tldC5vbihcXFwibWVzc2FnZVxcXCIsKGU9Pnt0aGlzLmVtaXQoXFxcIm1lc3NhZ2VcXFwiLHRoaXMsZSl9KSl9c2VuZChlKXtyZXR1cm4gbmV3IFByb21pc2UoKCh0LHMpPT57dHJ5e3RoaXMuc29ja2V0LnNlbmQoZSksdCgpfWNhdGNoKGUpe3MoZSl9fSkpfW9uRGlzY29ubmVjdCgpe3RoaXMuc29ja2V0JiYodGhpcy5zb2NrZXQuY2xvc2UoKSx0aGlzLnNvY2tldC50ZXJtaW5hdGUoKSx0aGlzLnNvY2tldD1udWxsKX19fSw4NjY6KGUsdCxzKT0+e2NvbnN0IG49cygxNjIpLGk9cyg2ODMpLHI9cyg5NjYpO2UuZXhwb3J0cz1jbGFzcyBleHRlbmRzIG57Y29uc3RydWN0b3IoZSx0KXtzdXBlcihlLHQpfXN0YXRpYyBzY2hlbWUoKXtyZXR1cm5cXFwid3NcXFwifW9uTGlzdGVuKCl7cmV0dXJuIG5ldyBQcm9taXNlKCgoZSx0KT0+e3RoaXMud3M9bmV3IHIuU2VydmVyKHtzZXJ2ZXI6dGhpcy5vcHRpb25zLnNlcnZlcn0pLHRoaXMud3Mub24oXFxcImNvbm5lY3Rpb25cXFwiLChlPT57dGhpcy5hZGRQZWVyKG5ldyBpKGUpKX0pKSx0aGlzLndzLm9uKFxcXCJlcnJvclxcXCIsKGU9Pnt0KGUpfSkpLHRoaXMud3Mub24oXFxcImxpc3RlbmluZ1xcXCIsKCgpPT57ZSgpfSkpfSkpfW9uQ29ubmVjdChlKXtyZXR1cm4gbmV3IFByb21pc2UoKCh0LHMpPT57bGV0IG49ITEsbz1udWxsO3RoaXMub3B0aW9ucy5jb29raWVzJiYobz17aGVhZGVyczp7Q29va2llOnRoaXMuX2Zvcm1hdENvb2tpZXModGhpcy5vcHRpb25zLmNvb2tpZXMpfX0pO2xldCBjPW5ldyByKChlP1xcXCJ3c1xcXCI6XFxcIndzc1xcXCIpK1xcXCI6Ly9cXFwiK3RoaXMub3B0aW9ucy5pcCtcXFwiOlxcXCIrdGhpcy5vcHRpb25zLnBvcnQrXFxcIi9cXFwiLG8pO2Mub24oXFxcIm9wZW5cXFwiLChlPT57bj0hMCx0aGlzLmFkZFBlZXIobmV3IGkoYykpLHQoKX0pKSxjLm9uKFxcXCJlcnJvclxcXCIsKGk9PntlfHxuP3MoaSk6dGhpcy5vbkNvbm5lY3QoITApLnRoZW4odCkuY2F0Y2gocyksbj0hMX0pKX0pKX1vblN0b3AoKXtyZXR1cm4gbmV3IFByb21pc2UoKChlLHQpPT57dGhpcy53cyYmKHRoaXMud3MuY2xvc2UoKSx0aGlzLndzPW51bGwpLGUoKX0pKX1fZm9ybWF0Q29va2llcyhlKXtsZXQgdD1bXTtmb3IobGV0IHMgaW4gZSl0LnB1c2gocytcXFwiPVxcXCIrZVtzXSk7cmV0dXJuIHQuam9pbihcXFwiOyBcXFwiKX19fSwzNzM6KGUsdCxzKT0+e1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgbj1zKDY1MCk7ZnVuY3Rpb24gaShlLHQscyl7aWYoXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIGUmJihzPXQsdD1lLGU9bnVsbCksczwxKXRocm93IG5ldyBFcnJvcihcXFwiZmFzdHF1ZXVlIGNvbmN1cnJlbmN5IG11c3QgYmUgZ3JlYXRlciB0aGFuIDFcXFwiKTt2YXIgaT1uKG8pLGM9bnVsbCxoPW51bGwsYT0wLHU9bnVsbCxsPXtwdXNoOmZ1bmN0aW9uKHMsbil7dmFyIG89aS5nZXQoKTtvLmNvbnRleHQ9ZSxvLnJlbGVhc2U9ZCxvLnZhbHVlPXMsby5jYWxsYmFjaz1ufHxyLG8uZXJyb3JIYW5kbGVyPXUsYT09PWwuY29uY3VycmVuY3l8fGwucGF1c2VkP2g/KGgubmV4dD1vLGg9byk6KGM9byxoPW8sbC5zYXR1cmF0ZWQoKSk6KGErKyx0LmNhbGwoZSxvLnZhbHVlLG8ud29ya2VkKSl9LGRyYWluOnIsc2F0dXJhdGVkOnIscGF1c2U6ZnVuY3Rpb24oKXtsLnBhdXNlZD0hMH0scGF1c2VkOiExLGNvbmN1cnJlbmN5OnMscnVubmluZzpmdW5jdGlvbigpe3JldHVybiBhfSxyZXN1bWU6ZnVuY3Rpb24oKXtpZihsLnBhdXNlZCl7bC5wYXVzZWQ9ITE7Zm9yKHZhciBlPTA7ZTxsLmNvbmN1cnJlbmN5O2UrKylhKyssZCgpfX0saWRsZTpmdW5jdGlvbigpe3JldHVybiAwPT09YSYmMD09PWwubGVuZ3RoKCl9LGxlbmd0aDpmdW5jdGlvbigpe2Zvcih2YXIgZT1jLHQ9MDtlOyllPWUubmV4dCx0Kys7cmV0dXJuIHR9LGdldFF1ZXVlOmZ1bmN0aW9uKCl7Zm9yKHZhciBlPWMsdD1bXTtlOyl0LnB1c2goZS52YWx1ZSksZT1lLm5leHQ7cmV0dXJuIHR9LHVuc2hpZnQ6ZnVuY3Rpb24ocyxuKXt2YXIgbz1pLmdldCgpO28uY29udGV4dD1lLG8ucmVsZWFzZT1kLG8udmFsdWU9cyxvLmNhbGxiYWNrPW58fHIsYT09PWwuY29uY3VycmVuY3l8fGwucGF1c2VkP2M/KG8ubmV4dD1jLGM9byk6KGM9byxoPW8sbC5zYXR1cmF0ZWQoKSk6KGErKyx0LmNhbGwoZSxvLnZhbHVlLG8ud29ya2VkKSl9LGVtcHR5OnIsa2lsbDpmdW5jdGlvbigpe2M9bnVsbCxoPW51bGwsbC5kcmFpbj1yfSxraWxsQW5kRHJhaW46ZnVuY3Rpb24oKXtjPW51bGwsaD1udWxsLGwuZHJhaW4oKSxsLmRyYWluPXJ9LGVycm9yOmZ1bmN0aW9uKGUpe3U9ZX19O3JldHVybiBsO2Z1bmN0aW9uIGQocyl7cyYmaS5yZWxlYXNlKHMpO3ZhciBuPWM7bj9sLnBhdXNlZD9hLS06KGg9PT1jJiYoaD1udWxsKSxjPW4ubmV4dCxuLm5leHQ9bnVsbCx0LmNhbGwoZSxuLnZhbHVlLG4ud29ya2VkKSxudWxsPT09aCYmbC5lbXB0eSgpKTowPT0tLWEmJmwuZHJhaW4oKX19ZnVuY3Rpb24gcigpe31mdW5jdGlvbiBvKCl7dGhpcy52YWx1ZT1udWxsLHRoaXMuY2FsbGJhY2s9cix0aGlzLm5leHQ9bnVsbCx0aGlzLnJlbGVhc2U9cix0aGlzLmNvbnRleHQ9bnVsbCx0aGlzLmVycm9ySGFuZGxlcj1udWxsO3ZhciBlPXRoaXM7dGhpcy53b3JrZWQ9ZnVuY3Rpb24odCxzKXt2YXIgbj1lLmNhbGxiYWNrLGk9ZS5lcnJvckhhbmRsZXIsbz1lLnZhbHVlO2UudmFsdWU9bnVsbCxlLmNhbGxiYWNrPXIsZS5lcnJvckhhbmRsZXImJmkodCxvKSxuLmNhbGwoZS5jb250ZXh0LHQscyksZS5yZWxlYXNlKGUpfX1lLmV4cG9ydHM9aSxlLmV4cG9ydHMucHJvbWlzZT1mdW5jdGlvbihlLHQscyl7XFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIGUmJihzPXQsdD1lLGU9bnVsbCk7dmFyIG49aShlLChmdW5jdGlvbihlLHMpe3QuY2FsbCh0aGlzLGUpLnRoZW4oKGZ1bmN0aW9uKGUpe3MobnVsbCxlKX0pLHMpfSkscykscj1uLnB1c2gsbz1uLnVuc2hpZnQ7cmV0dXJuIG4ucHVzaD1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKHQscyl7cihlLChmdW5jdGlvbihlLG4pe2U/cyhlKTp0KG4pfSkpfSkpfSxuLnVuc2hpZnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbih0LHMpe28oZSwoZnVuY3Rpb24oZSxuKXtlP3MoZSk6dChuKX0pKX0pKX0sbn19LDY1MDplPT57XFxcInVzZSBzdHJpY3RcXFwiO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1uZXcgZSxzPXQ7cmV0dXJue2dldDpmdW5jdGlvbigpe3ZhciBuPXQ7cmV0dXJuIG4ubmV4dD90PW4ubmV4dDoodD1uZXcgZSxzPXQpLG4ubmV4dD1udWxsLG59LHJlbGVhc2U6ZnVuY3Rpb24oZSl7cy5uZXh0PWUscz1lfX19fX0sdD17fTtyZXR1cm4gZnVuY3Rpb24gcyhuKXtpZih0W25dKXJldHVybiB0W25dLmV4cG9ydHM7dmFyIGk9dFtuXT17ZXhwb3J0czp7fX07cmV0dXJuIGVbbl0oaSxpLmV4cG9ydHMscyksaS5leHBvcnRzfSg1MDYpfSkoKTtcIilcblx0fVxufVxuIiwgIi8vIEB0cy1ub2NoZWNrXG5leHBvcnQgZGVmYXVsdCBuZXcgKGNsYXNzIFV0aWxzIHtcblx0YXN5bmMgZ2V0U0hBKGRhdGE6IGFueSkge1xuXHRcdGlmKCFkYXRhKVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRsZXQgc2hhID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5kaWdlc3QoXCJTSEEtMjU2XCIsIG5ldyBUZXh0RW5jb2RlcihcInV0Zi04XCIpLmVuY29kZShkYXRhKSk7XG5cdFx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChuZXcgVWludDhBcnJheShzaGEpLCB4PT4oKCcwMCcreC50b1N0cmluZygxNikpLnNsaWNlKC0yKSkpLmpvaW4oJycpO1xuXHR9XG59KSgpO1xuIiwgIi8vIEB0cy1ub2NoZWNrXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGU0FkYXB0ZXIge1xuXHRjb25zdHJ1Y3RvcihiYXNlUGF0aDogc3RyaW5nKSB7XG5cdFx0dGhpcy5iYXNlUGF0aCA9IGJhc2VQYXRoO1xuXHR9XG5cblx0YXN5bmMgbWFrZUZvbGRlcihwYXRoOiBzdHJpbmcpIHtcblx0XHRhd2FpdCBhcHAudmF1bHQuY3JlYXRlRm9sZGVyKHRoaXMuYmFzZVBhdGggKyBwYXRoKS5jYXRjaCgoKSA9PiB7XG5cdFx0XHQvLyBpZ25vcmVkXG5cdFx0fSk7XG5cdH1cblxuXHRhc3luYyB3cml0ZShwYXRoOiBzdHJpbmcsIGRhdGE6IGFueSwgbXRpbWU6IGFueSkge1xuXHRcdGlmKCFhd2FpdCB0aGlzLmV4aXN0cyhwYXRoKSkge1xuXHRcdFx0bGV0IGZvbGRlciA9IHBhdGguc3BsaXQoXCIvXCIpLnNsaWNlKDAsIC0xKS5qb2luKFwiL1wiKTtcblx0XHRcdGlmKGZvbGRlcikge1xuXHRcdFx0XHRhd2FpdCB0aGlzLm1ha2VGb2xkZXIoZm9sZGVyKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZGF0YSAhPSBudWxsKSB7XG5cdFx0XHRsZXQgb3B0aW9ucyA9IG51bGw7XG5cdFx0XHRpZihtdGltZSkge1xuXHRcdFx0XHRvcHRpb25zID0ge1xuXHRcdFx0XHRcdG10aW1lOiBtdGltZVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0YXdhaXQgYXBwLnZhdWx0LmFkYXB0ZXIud3JpdGUodGhpcy5iYXNlUGF0aCArIHBhdGgsIGRhdGEsIG9wdGlvbnMpO1xuXHRcdH1cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuXG5cdGFzeW5jIHJlYWQocGF0aDogc3RyaW5nKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBhd2FpdCBhcHAudmF1bHQuYWRhcHRlci5yZWFkKHRoaXMuYmFzZVBhdGggKyBwYXRoKTtcblx0XHR9XG5cdFx0Y2F0Y2goZSkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9XG5cblx0YXN5bmMgZXhpc3RzKHBhdGg6IHN0cmluZykge1xuXHRcdHJldHVybiBhd2FpdCBhcHAudmF1bHQuYWRhcHRlci5leGlzdHModGhpcy5iYXNlUGF0aCArIHBhdGgpXG5cdH1cblxuXHRhc3luYyBkZWxldGUocGF0aDogYW55KSB7XG5cdFx0YXdhaXQgYXBwLnZhdWx0LmRlbGV0ZSh0aGlzLmdldEZpbGUocGF0aCksIHRydWUpXG5cdH1cblxuXHRhc3luYyBpdGVyYXRlKGNhbGxiYWNrKSB7XG5cdFx0bGV0IGZpbGVzID0gYXBwLnZhdWx0LmdldEFsbExvYWRlZEZpbGVzKCk7XG5cdFx0Zm9yKGxldCBmaWxlIG9mIGZpbGVzKSB7XG5cdFx0XHRhd2FpdCBjYWxsYmFjayhmaWxlKTtcblx0XHR9XG5cdH1cblxuXHRnZXRGaWxlKHBhdGg6IHN0cmluZykge1xuXHRcdHJldHVybiBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHBhdGgpO1xuXHR9XG59XG4iLCAiLy8gQHRzLW5vY2hlY2tcbmltcG9ydCBGU0FkYXB0ZXIgZnJvbSBcIi4vRlNBZGFwdGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0b3JhZ2Uge1xuXHRzdGF0aWMgdHJlZTogYW55ID0gbnVsbDtcblx0ZnNWYXVsdDogRlNBZGFwdGVyO1xuXHRmc0ludGVybmFsOiBGU0FkYXB0ZXI7XG5cdHByaXZhdGUgaW5pdGVkID0gZmFsc2U7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5mc1ZhdWx0ID0gbmV3IEZTQWRhcHRlcihcIi4vXCIpO1xuXHRcdHRoaXMuZnNJbnRlcm5hbCA9IG5ldyBGU0FkYXB0ZXIoXCIub2JzaWRpYW4vcGx1Z2lucy9vYnNpZGlhbi1hbnlzb2NrZXQtc3luYy9cIik7XG5cdH1cblxuXHRhc3luYyBpbml0KCkge1xuXHRcdGlmKHRoaXMuaW5pdGVkKVxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0dGhpcy50cmVlID0ge307XG5cdFx0dGhpcy5pbml0ZWQgPSB0cnVlO1xuXHR9XG5cblx0YXN5bmMgd3JpdGUocGF0aDogc3RyaW5nLCBkYXRhOiBzdHJpbmcsIG1ldGFkYXRhOiBhbnkpIHtcblx0XHRhd2FpdCB0aGlzLndyaXRlTWV0YWRhdGEocGF0aCwgbWV0YWRhdGEpO1xuXHRcdHJldHVybiBhd2FpdCB0aGlzLmZzVmF1bHQud3JpdGUocGF0aCwgZGF0YSwgbWV0YWRhdGEubXRpbWUpO1xuXHR9XG5cblx0YXN5bmMgbWFrZUZvbGRlcihwYXRoOiBzdHJpbmcsIG1ldGFkYXRhOiBhbnkpIHtcblx0XHRhd2FpdCB0aGlzLndyaXRlTWV0YWRhdGEocGF0aCwgbWV0YWRhdGEpO1xuXHRcdHJldHVybiBhd2FpdCB0aGlzLmZzVmF1bHQubWFrZUZvbGRlcihwYXRoKTtcblx0fVxuXG5cdGFzeW5jIHJlYWQocGF0aDogc3RyaW5nKSB7XG5cdFx0cmV0dXJuIGF3YWl0IHRoaXMuZnNWYXVsdC5yZWFkKHBhdGgpO1xuXHR9XG5cblx0YXN5bmMgZGVsZXRlKHBhdGg6IHN0cmluZywgbWV0YWRhdGE6IGFueSkge1xuXHRcdGF3YWl0IHRoaXMud3JpdGVNZXRhZGF0YShwYXRoLCBtZXRhZGF0YSk7XG5cdFx0cmV0dXJuIGF3YWl0IHRoaXMuZnNWYXVsdC5kZWxldGUocGF0aCk7XG5cdH1cblxuXHRhc3luYyBleGlzdHMocGF0aDogc3RyaW5nKSB7XG5cdFx0cmV0dXJuIGF3YWl0IHRoaXMuZnNWYXVsdC5leGlzdHMocGF0aCk7XG5cdH1cblxuXHRhc3luYyBpdGVyYXRlKGNhbGxiYWNrOiBhbnkpIHtcblx0XHRhd2FpdCB0aGlzLmZzVmF1bHQuaXRlcmF0ZShhc3luYyAoaXRlbSkgPT4ge1xuXHRcdFx0Ly8gc2tpcCByb290XG5cdFx0XHRpZihpdGVtLnBhdGggPT0gXCIvXCIpXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdGF3YWl0IGNhbGxiYWNrKGl0ZW0pO1xuXHRcdH0pO1xuXHR9XG5cblx0YXN5bmMgcmVhZE1ldGFkYXRhKHBhdGg6IHN0cmluZykge1xuXHRcdGlmKCF0aGlzLnRyZWVbcGF0aF0pIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnRyZWVbcGF0aF07XG5cdH1cblxuXHRhc3luYyB3cml0ZU1ldGFkYXRhKHBhdGg6IHN0cmluZywgbWV0YWRhdGE6IGFueSkge1xuXHRcdGlmKCF0aGlzLnRyZWVbcGF0aF0pIHtcblx0XHRcdHRoaXMudHJlZVtwYXRoXSA9IHt9O1xuXHRcdH1cblx0XHRmb3IobGV0IGtleSBpbiBtZXRhZGF0YSkge1xuXHRcdFx0dGhpcy50cmVlW3BhdGhdW2tleV0gPSBtZXRhZGF0YVtrZXldO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnRyZWVbcGF0aF07XG5cdH1cblxuXHRhc3luYyB1cGRhdGVQbHVnaW4oZmlsZXMpIHtcblx0XHRmb3IobGV0IGl0ZW0gb2YgZmlsZXMpIHtcblx0XHRcdGF3YWl0IHRoaXMuZnNJbnRlcm5hbC53cml0ZShpdGVtLnBhdGgsIGl0ZW0uZGF0YSk7XG5cdFx0fVxuXHR9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUEsWUFBTyxVQUFVLE1BQU0sYUFBYTtBQUFBLE1BQ25DLGNBQWM7QUFDYixhQUFLLFlBQVksQ0FBQztBQUNsQixhQUFLLGlCQUFpQixDQUFDO0FBQUEsTUFDeEI7QUFBQSxNQUVBLEdBQUcsT0FBTyxJQUFJO0FBQ2IsWUFBSSxDQUFDLEtBQUssVUFBVTtBQUNuQixlQUFLLFVBQVUsU0FBUyxDQUFDO0FBQzFCLGFBQUssVUFBVSxPQUFPLEtBQUssRUFBRTtBQUFBLE1BQzlCO0FBQUEsTUFFQSxJQUFJ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
