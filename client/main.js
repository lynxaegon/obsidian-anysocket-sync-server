/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/libs/Events.js
var require_Events = __commonJS({
  "src/libs/Events.js"(exports, module2) {
    module2.exports = class EventEmitter {
      constructor() {
        this.callbacks = {};
        this.callbacks_once = {};
      }
      on(event, cb) {
        if (!this.callbacks[event])
          this.callbacks[event] = [];
        this.callbacks[event].push(cb);
      }
      off(event, cb) {
        if (this.callbacks[event]) {
          this.callbacks[event] = this.callbacks[event].filter((item) => item !== cb);
        }
      }
      removeListener(event, cb) {
        this.off(event, cb);
      }
      removeAllListeners(event) {
        if (event === void 0) {
          this.callbacks = {};
        } else {
          delete this.callbacks[event];
        }
      }
      once(event, cb) {
        if (!this.callbacks_once[event])
          this.callbacks_once[event] = [];
        this.callbacks_once[event].push(cb);
      }
      emit(event, ...args) {
        let cbs = this.callbacks[event];
        if (cbs) {
          cbs.forEach((cb) => cb(...args));
        }
        cbs = this.callbacks_once[event];
        if (cbs) {
          cbs.forEach((cb) => cb(...args));
          delete this.callbacks_once[event];
        }
      }
    };
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AnySocketSyncPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// src/XSync.ts
var import_obsidian2 = require("obsidian");

// src/libs/AnysocketManager.ts
var import_obsidian = require("obsidian");

// src/libs/AnySocketLoader.ts
var AnySocketLoader = class {
  static load() {
    window.eval(`var AnySocket;AnySocket=(()=>{var e={147:(e,t,s)=>{const n=window.crypto||window.msCrypto;if(!n)throw new Error("Crypto is not supported in this browser!");const i=s(20),r="P-521";e.exports=new class{randomBytes(e){let t=new Uint8Array(e);for(let s=0;s<e;s+=65536)n.getRandomValues(t.subarray(s,s+Math.min(e-s,65536)));return t}createECDH(){return new Promise((async(e,t)=>{window.crypto.subtle.generateKey({name:"ECDH",namedCurve:r},!1,["deriveKey","deriveBits"]).then((function(t){e({generateKeys:()=>new Promise(((e,s)=>{window.crypto.subtle.exportKey("raw",t.publicKey).then((function(t){t=new Uint8Array(t),e(t)})).catch((function(e){s(e)}))})),computeSecret:e=>new Promise(((s,n)=>{window.crypto.subtle.importKey("raw",e,{name:"ECDH",namedCurve:r},!1,[]).then((function(e){window.crypto.subtle.deriveBits({name:"ECDH",namedCurve:r,public:e},t.privateKey,512).then((e=>{e=new Uint8Array(e),s(i.bufferToHex(e))}))})).catch((function(e){n(e)}))}))})})).catch((function(e){t(e)}))}))}pbkdf2Sync(e,t,s,n,r){let o={sha256:"SHA-256"};if(!o[r])throw new Error("Invalid algorithm "+r);return r=o[r],new Promise((async(o,c)=>{e instanceof CryptoKey||(e=await window.crypto.subtle.importKey("raw",i.utf8Encode(e),{name:"PBKDF2"},!1,["deriveKey","deriveBits"])),window.crypto.subtle.deriveBits({name:"PBKDF2",salt:i.utf8Encode(t),iterations:s,hash:{name:r}},e,8*n).then((function(e){o(new Uint8Array(e))})).catch((function(e){c(e)}))}))}}},954:e=>{e.exports=()=>()=>{}},69:()=>{},267:e=>{e.exports=class{constructor(){this.callbacks={},this.callbacks_once={}}on(e,t){this.callbacks[e]||(this.callbacks[e]=[]),this.callbacks[e].push(t)}off(e,t){this.callbacks[e]&&(this.callbacks[e]=this.callbacks[e].filter((e=>e!==t)))}removeListener(e,t){this.off(e,t)}removeAllListeners(e){void 0===e?this.callbacks={}:delete this.callbacks[e]}once(e,t){this.callbacks_once[e]||(this.callbacks_once[e]=[]),this.callbacks_once[e].push(t)}emit(e,...t){let s=this.callbacks[e];s&&s.forEach((e=>e(...t))),s=this.callbacks_once[e],s&&(s.forEach((e=>e(...t))),delete this.callbacks_once[e])}}},661:(e,t,s)=>{const n=s(510),i=s(20);n.encryptAES=(e,t)=>new Promise(((s,n)=>{window.crypto.subtle.importKey("raw",i.bufferFromHex(e),{name:"AES-CBC",length:256},!1,["encrypt"]).then((e=>{let r=window.crypto.getRandomValues(new Uint8Array(16));window.crypto.subtle.encrypt({name:"AES-CBC",iv:r},e,i.bufferFromString(t)).then((function(e){s(i.bufferToHex(r)+i.bufferToHex(new Uint8Array(e)))})).catch((function(e){n(e)}))})).catch(n)})),n.decryptAES=(e,t)=>new Promise(((s,n)=>{window.crypto.subtle.importKey("raw",i.bufferFromHex(e),{name:"AES-CBC",length:256},!1,["decrypt"]).then((e=>{window.crypto.subtle.decrypt({name:"AES-CBC",iv:i.bufferFromHex(t.substr(0,32))},e,i.bufferFromHex(t.substr(32))).then((function(e){s(i.bufferToString(new Uint8Array(e)))})).catch((e=>{n(e)}))})).catch((e=>{n(e)}))})),e.exports=n},20:e=>{e.exports={utf8Encode(e){let t=[],s=e.length,n=0;for(;n<s;){let s=e.codePointAt(n),i=0,r=0;for(s<=127?(i=0,r=0):s<=2047?(i=6,r=192):s<=65535?(i=12,r=224):s<=2097151&&(i=18,r=240),t.push(r|s>>i),i-=6;i>=0;)t.push(128|s>>i&63),i-=6;n+=s>=65536?2:1}return new Uint8Array(t)},bufferFromString(e){let t=new ArrayBuffer(e.length),s=new Uint8Array(t);for(let t=0,n=e.length;t<n;t++)s[t]=e.charCodeAt(t);return t},bufferToString(e){let t="";if(e){let s=new Uint8Array(e);for(let e=0;e<s.byteLength;e++)t+=String.fromCharCode(s[e])}return t},bufferToHex(e){return e.reduce(((e,t)=>e+this.i2hex(t)),"")},i2hex:e=>("0"+e.toString(16)).slice(-2),bufferFromHex(e){let t=new Uint8Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=parseInt(e.substring(s,s+2),16);return t},isBuffer:e=>!!(e.buffer instanceof ArrayBuffer&&e.BYTES_PER_ELEMENT)}},966:e=>{e.exports=class{constructor(...e){this.ws=new WebSocket(...e)}on(e,t){switch(e){case"open":this.ws.onopen=t;break;case"error":this.ws.onerror=t;break;case"message":this.ws.onmessage=e=>{t(e.data)};break;case"close":this.ws.onclose=t;break;default:throw new Error("Not implemented in browser! ("+e+")")}}send(...e){this.ws.send(e)}close(){this.ws.close()}terminate(){}}},506:(e,t,s)=>{const n=s(100),i=s(555);n.Transport={WS:s(866),HTTP:s(69)},n.Packer={pack:i.packBytes.bind(i),unpack:i.unpackBytes.bind(i)},e.exports=n},117:e=>{e.exports=class{constructor(){this.routes={_:[]},this.routesRegexp={_:[]},this._upgradeCallback=null,this._process=this._process.bind(this),this._processUpgrade=this._processUpgrade.bind(this)}on(e,t,s){return t instanceof RegExp?(this.routesRegexp[e]||(this.routesRegexp[e]=[]),this.routesRegexp[e].push({path:t,cb:s})):(this.routes[e]||(this.routes[e]={}),this.routes[e][t]=s),this}upgrade(e){return this._upgradeCallback=e,this}any(e,t){return this.on("_",e,t)}get(e,t){return this.on("get",e,t)}post(e,t){return this.on("post",e,t)}delete(e,t){return this.on("delete",e,t)}error(e){this.onError=e}_processUpgrade(e){try{if(!this._upgradeCallback)return;this._upgradeCallback(e)}catch(t){return this._finish(e,t)}}_process(e){try{if(this.routes._[e.url])return this.routes._[e.url](e),!0;if(this.routes[e.query.method]&&this.routes[e.query.method][e.url])return this.routes[e.query.method][e.url](e),!0;for(let t of this.routesRegexp._)if(t.path.test(e.url))return t.cb(e),!0;if(this.routesRegexp[e.query.method])for(let t of this.routesRegexp[e.query.method])if(t.path.test(e.url))return t.cb(e),!0}catch(t){return this._finish(e,t)}this._finish(e,new Error("No route for path: '"+e.url+"'"))}_finish(e,t){this.onError&&this.onError(e,t),e.isClosed()||e.status(404).end()}}},420:e=>{e.exports=class{constructor(e){this.anysocket=e}}},555:(e,t,s)=>{const n=s(20);e.exports=new class{packInt32(e){const t=new ArrayBuffer(4);return new DataView(t).setInt32(0,e,!1),String.fromCharCode.apply(String,new Uint8Array(t))}unpackInt32(e){const t=new ArrayBuffer(4),s=new Uint8Array(t);for(let t in e)s[t]=e.charCodeAt(t);return new DataView(t).getInt32(0)}packHex(e){let t="";for(let s=0;s<e.length;s+=2)t+=String.fromCharCode(parseInt(e.substr(s,2),16));return t}unpackHex(e){let t="";for(let s=0;s<e.length;s++){let n=Number(e.charCodeAt(s)).toString(16);t+=1===n.length?"0"+n:n}return t}packBytes(e){if(!(e instanceof ArrayBuffer||e instanceof Uint8Array))throw new Error("packBytes requires ArrayBuffer or UInt8Array");return n.bufferToString(e)}unpackBytes(e){return n.bufferFromString(e)}}},717:(e,t,s)=>{s(954)("AnyPacket");const n=Symbol("send function");e.exports=class{constructor(e,t,s){this.peer=e,this.seq=t.seq,this.msg=t.data,this[n]=s}reply(e){this[n](e,this.seq)}}},155:(e,t,s)=>{const n=s(954)("AnyPeer"),i=s(501),r=s(267),o=s(558),c=s(717),h=s(555),a=Symbol("private protocol"),u=Symbol("packets"),l=Symbol("links"),d=s(20),p=function(e){return!0===e||!1===e||"[object Boolean]"===toString.call(e)};e.exports=class extends r{constructor(e){super(),this[l]={},this[a]=e,this[u]={},this.id=e.peerID,this.connectionID=e.connectionID,this.syncedTime=null,this.options=e.options;const t={get:(e,s)=>{const n=e[s];return null!=n?n:(e.path||(e.path=[]),e.path.push(s),new Proxy(e,{get:t.get,apply:(e,t,s)=>{let n=e.path;return e.path=[],new Promise(((e,t)=>{let r=[];for(let e in s)d.isBuffer(s[e])&&(s[e]=h.packBytes(s[e]),r.push(e));const c=o.data({type:i.INTERNAL_PACKET_TYPE.RPC,method:n,params:s||null,bin:r}).setType(i.PACKET_TYPE.INTERNAL);this._send(c,!0).then((s=>{if(s.msg.error)t(s.msg);else{let t=s.msg.result;s.msg.bin&&(t=h.unpackBytes(t)),e(t)}})).catch((e=>{t(c.msg)}))}))}}))}};this.rpc=new Proxy((()=>{}),t),e.on("internal",this.onInternalComs.bind(this)),e.on("message",this.onMessage.bind(this)),e.on("e2e",(()=>{this.onE2E()})),e.on("disconnected",((e,t)=>{this.emit("disconnected",e,t)}))}isProxy(){return this[a].isProxy()}addLink(e){this[l][e.id]=e}removeLink(e){delete this[l][e.id]}getLinks(){return this[l]}getSyncedTime(e){return e=e||!1,new Promise(((t,s)=>{if(!e&&this.syncedTime)t(Object.assign({time:Date.now()+this.syncedTime.offset},this.syncedTime));else{let e=Date.now();this.sendInternal({type:i.INTERNAL_PACKET_TYPE.SYNCED_TIME,time:e},!0).then((e=>{const s=e.msg.o,n=e.msg.t,i=e.msg.t,r=Date.now();this.syncedTime={rtt:r-s-(i-n),offset:(n-s+(i-r))/2},t(Object.assign({time:Date.now()+this.syncedTime.offset},this.syncedTime))})).catch(s)}}))}e2e(){this[a].e2e()}isE2EEnabled(){return this[a].hasE2EEnabled()}send(e,t,s){const n=o.data(e).setType(i.PACKET_TYPE.LINK);return this._send(n,t,s)}forward(e){this[a].forward(e)}sendInternal(e,t,s){const n=o.data(e).setType(i.PACKET_TYPE.INTERNAL);return this._send(n,t,s)}onMessage(e,t){t.seq<0?this._resolveReply(t)||n("Dropped reply "+t.seq+". Delivered after Timeout"):this.emit("message",new c(this,t,this.send.bind(this)))}onE2E(){this.emit("e2e",this)}onInternalComs(e,t){t.seq<0?this._resolveReply(t)||n("Dropped reply "+t.seq+". Delivered after Timeout"):t.type==i.PACKET_TYPE.INTERNAL?this.emit("internal",new c(this,t,this.sendInternal.bind(this))):n("Dropped internal packet!",t)}disconnect(e){for(let e in this[u])clearTimeout(this[u][e].timeout),this[u][e].reject("Peer disconnected!");this[u]={},this[a].disconnect(e)}_send(e,t,s){return new Promise(((n,i)=>{this[a].isConnected()?(!p(t)&&t&&t>0&&e.setReplyTo(t),this[a].send(e),p(t)&&!0===t&&(this[u][e.seq]={time:(new Date).getTime(),resolve:n,reject:i,timeout:setTimeout((()=>{if(this[u][e.seq]){let t=this[u][e.seq];delete this[u][e.seq],this.disconnect("Missed reply timeout! Packet Type: "+o.TYPE._string(e.type)+" - "+e.seq),t.reject("Timeout!")}}),s||this[a].options.replyTimeout)})):i("Cannot send message. Peer is disconnected")}))}_recvForward(e){this[a]._recvPacketQueue.push({peer:this[a].peer,recv:e.msg,state:this[a].ENCRYPTION_STATE})}_resolveReply(e){if(e.seq*=-1,this[u][e.seq]){const t=this[u][e.seq];return delete this[u][e.seq],clearTimeout(t.timeout),t.resolve(new c(this,e,(()=>{n("Cannot reply to a reply packet!")}))),!0}return!1}}},288:(e,t,s)=>{const n=s(954)("AnyProtocol"),i=s(267),r=s(373),o=s(558),c=s(661),h=s(555),a=s(501),u=Symbol("secret key"),l=Symbol("private key"),d=Symbol("nonce"),p=Symbol("heartbeat timer"),T=Symbol("heartbeats missed"),E=Symbol("heartbeat ponged"),y=Symbol("authTimeout"),m=Symbol("e2eTimeout");e.exports=class extends i{constructor(e,t,s){super(),this._seq=0,this[u]=null,this[l]=null,this[d]=null,this[p]=0,this[T]=0,this[E]=!0,this[y]=!1,this[m]=!1,this.peerID=t.id,this.peer=t,this.options=Object.assign({authTimeout:5e3,e2eTimeout:5e3,replyTimeout:3e4,heartbeatInterval:5e3},s),this.connectionID=this.peer.connectionID,this.anysocket=e,this._packetQueue=r(this,this.processPacketQueue.bind(this),1),this._linkPacketQueue=r(this,this.processLinkPacketQueue.bind(this),1),this._recvPacketQueue=r(this,this.processRecvPacketQueue.bind(this),1),this._recvLinkPacketQueue=r(this,this.processRecvLinkPacketQueue.bind(this),1),this._packets={},this.changeState(a.PROTOCOL_STATES.ESTABLISHED),this.ENCRYPTION_STATE=a.PROTOCOL_ENCRYPTION.PLAIN,this.peer.on("message",((e,t)=>{this._recvPacketQueue.push({peer:e,recv:t,state:this.ENCRYPTION_STATE})})),this.peer.isClient()&&!this.peerID&&(this.changeState(a.PROTOCOL_STATES.AUTHING),this.send(o.data({id:this.anysocket.id,auth:this.anysocket.authPacket()}).setType(o.TYPE.AUTH))),this.peerID&&this.changeState(a.PROTOCOL_STATES.CONNECTED)}isProxy(){return!!this.peer.isProxy}isConnected(){return this.state!=a.PROTOCOL_STATES.DISCONNECTED}send(e){return 0==e.seq&&e.setSeq(this._getSeq()),e.type!=o.TYPE.HEARTBEAT&&this._heartbeat(),new Promise(((t,s)=>{const n=e=>{this.disconnect(e),s(e)};this.isLINKMessage(e.type)?this._linkPacketQueue.push({packet:e,resolve:t,reject:n}):this._send(e,t,n)}))}_send(e,t,s){n(this.peerID,">>>>",o.TYPE._string(e.type),e.seq),e.serialize(a.MAX_PACKET_SIZE,this._encrypt.bind(this)).then((e=>{for(let n=0;n<e.length;n++){const i={packet:e[n],reject:s};n==e.length-1&&(i.resolve=t),this._packetQueue.push(i)}})).catch(s)}forward(e){return new Promise(((t,s)=>{this._packetQueue.push({packet:this._encodeForwardPacket(e.to,e.from,e.msg),resolve:t,reject:s})}))}hasE2EEnabled(){return!!this[l]}e2e(){c.generateAESKey().then((e=>{this[l]=e.private,this[d]=e.nonce,this.changeState(a.PROTOCOL_STATES.SWITCHING_PROTOCOL),this.send(o.data({type:a.PROTOCOL_ENCRYPTION.E2EE,key:e.public,nonce:e.nonce}).setType(o.TYPE.SWITCH))})).catch((e=>{this.disconnect(e)}))}onPacket(e,t,s){return this._heartbeat(),new Promise(((e,i)=>{let r=!0;if(o.isForwardPacket(t))this.emit("forward",this.peerID,this._decodeForwardPacket(t)),e();else{let i=o.getSeq(t);this._packets[i]||(this._packets[i]=o.buffer());let h=this._packets[i];h.deserialize(t,s,this._decrypt.bind(this)).then((t=>{if(n(this.peerID,"<<<<",o.TYPE._string(h.type),h.seq),t){switch(delete this._packets[i],this.state){case a.PROTOCOL_STATES.ESTABLISHED:if(h.type==o.TYPE.AUTH){if(r=!1,!h.data.id||!this.anysocket.onAuth(h.data))return this.disconnect("Invalid Auth Packet!");this.peerID=h.data.id,this.send(o.data({id:this.anysocket.id,auth:this.anysocket.authPacket()}).setType(o.TYPE.AUTH)).then((()=>{this.changeState(a.PROTOCOL_STATES.CONNECTED),this.emit("ready",this)})),e()}break;case a.PROTOCOL_STATES.AUTHING:if(h.type==o.TYPE.AUTH){if(r=!1,this.changeState(a.PROTOCOL_STATES.CONNECTED),!h.data.id||!this.anysocket.onAuth(h.data))return this.disconnect("Invalid Auth Packet!");this.peerID=h.data.id,this.emit("ready",this),e()}break;case a.PROTOCOL_STATES.CONNECTED:h.type==o.TYPE.LINK?(r=!1,this.emit("message",this,{seq:h.seq,data:h.data}),e()):h.type==o.TYPE.INTERNAL?(r=!1,this.emit("internal",this,{seq:h.seq,type:h.type,data:h.data}),e()):h.type==o.TYPE.SWITCH?(r=!1,c.generateAESKey().then((t=>(this[l]=t.private,this[d]=h.data.nonce+t.nonce,c.getAESSessionKey(this[d],this.peerID,0).then((s=>(this[d]=s,c.computeAESsecret(this[l],h.data.key).then((s=>{this[u]=s,this.send(o.data({type:a.PROTOCOL_ENCRYPTION.E2EE,key:t.public,nonce:t.nonce}).setType(o.TYPE.SWITCH)).then((()=>{this.ENCRYPTION_STATE=a.PROTOCOL_ENCRYPTION.E2EE,this.changeState(a.PROTOCOL_STATES.CONNECTED),this.emit("e2e",this),e()}))})))))))).catch((e=>{this.disconnect(e)}))):h.type==o.TYPE.HEARTBEAT&&(r=!1,this._heartbeatPong(h.data),e());break;case a.PROTOCOL_STATES.SWITCHING_PROTOCOL:h.type==o.TYPE.SWITCH&&(r=!1,this[d]=this[d]+h.data.nonce,c.getAESSessionKey(this[d],this.anysocket.id,0).then((t=>(this[d]=t,c.computeAESsecret(this[l],h.data.key).then((t=>{this[u]=t,this.ENCRYPTION_STATE=a.PROTOCOL_ENCRYPTION.E2EE,this.changeState(a.PROTOCOL_STATES.CONNECTED),this.emit("e2e",this),e()}))))).catch((e=>{this.disconnect(e)})));break;case a.PROTOCOL_STATES.DISCONNECTED:r=!1,e()}if(r)return console.log("Invalid packet received! RECV:",h),this.disconnect("Invalid Packet!")}else e()}))}}))}changeState(e){switch(this.state=e,this.state){case a.PROTOCOL_STATES.ESTABLISHED:this[y]=setTimeout((()=>{this.disconnect("auth timed out")}),this.options.authTimeout),this._linkPacketQueue.pause(),this._recvLinkPacketQueue.pause();break;case a.PROTOCOL_STATES.AUTHING:clearTimeout(this[y]),this[y]=!1,this._linkPacketQueue.pause(),this._recvLinkPacketQueue.pause();break;case a.PROTOCOL_STATES.CONNECTED:clearTimeout(this[y]),this[y]=!1,clearTimeout(this[m]),this[m]=!1,this._linkPacketQueue.resume(),this._recvLinkPacketQueue.resume();break;case a.PROTOCOL_STATES.SWITCHING_PROTOCOL:this[m]=setTimeout((()=>{this.disconnect("e2e timed out")}),this.options.e2eTimeout),this._linkPacketQueue.pause(),this._recvLinkPacketQueue.pause();break;case a.PROTOCOL_STATES.DISCONNECTED:this._packetQueue.pause(),this._packetQueue.kill(),this._linkPacketQueue.pause(),this._linkPacketQueue.kill(),this._recvPacketQueue.pause(),this._recvPacketQueue.kill(),this._recvLinkPacketQueue.pause(),this._recvLinkPacketQueue.kill()}}disconnect(e){this.changeState(a.PROTOCOL_STATES.DISCONNECTED),this._heartbeat(),this.isProxy()?this.anysocket.unproxy(this.peer.id,this.peer.socket.id,e):this.peer.disconnect(e)}processPacketQueue(e,t){this.peer.send(e.packet).then((()=>{e.resolve&&e.resolve(),t(null,null)})).catch((s=>{e.reject(s),this._packetQueue.kill(),t(null,null)}))}processLinkPacketQueue(e,t){this._send(e.packet,e.resolve,e.reject),t(null,null)}processRecvPacketQueue(e,t){o.isForwardPacket(e.recv)?(this.emit("forward",this.peerID,this._decodeForwardPacket(e.recv)),t(null,null)):this.isLINKMessage(o.getType(e.recv))?(this._recvLinkPacketQueue.push(e),t(null,null)):this.onPacket(e.peer,e.recv,e.state).then((()=>{t(null,null)}))}processRecvLinkPacketQueue(e,t){this.onPacket(e.peer,e.recv,e.state).then((()=>{t(null,null)}))}_encrypt(e,t){return new Promise((s=>{switch(this.ENCRYPTION_STATE){case a.PROTOCOL_ENCRYPTION.PLAIN:s(e);break;case a.PROTOCOL_ENCRYPTION.E2EE:c.getAESSessionKey(this[u],this[d],t).then((t=>c.encryptAES(t,e).then(s))).catch((e=>{this.disconnect(e)}));break;default:throw new Error("[encrypt] Encryption state '"+this.ENCRYPTION_STATE+"' not implemented!")}}))}_decrypt(e,t,s){return new Promise((n=>{switch(e){case a.PROTOCOL_ENCRYPTION.PLAIN:n(t);break;case a.PROTOCOL_ENCRYPTION.E2EE:c.getAESSessionKey(this[u],this[d],s).then((e=>c.decryptAES(e,t).then(n))).catch((e=>{this.disconnect(e)}));break;default:throw new Error("[decrypt] Encryption state '"+e+"' not implemented!")}}))}_encodeForwardPacket(e,t,s){return o.TYPE.FORWARD+h.packHex(e)+h.packHex(t)+s}_decodeForwardPacket(e){return{to:h.unpackHex(e.substr(1,16)),from:h.unpackHex(e.substr(17,16)),msg:e.substr(33)}}_getSeq(){return this._seq>=2147483647&&(this._seq=0),this._seq++,this._seq}_heartbeat(){this.isProxy()||(clearTimeout(this[p]),this.state!=a.PROTOCOL_STATES.AUTHING&&this.state!=a.PROTOCOL_STATES.DISCONNECTED&&(this[p]=setTimeout((()=>{if(!this[E])return this[T]++,this[T]>=2?void this.disconnect("Missed Heartbeats"):void this._heartbeat();this[T]=0,this[E]=!1;const e=o.data(1).setType(o.TYPE.HEARTBEAT);this.send(e).catch((e=>{n("Heartbeat Error:",e),this.disconnect(e)}))}),this.options.heartbeatInterval)))}_heartbeatPong(e){if(1==e){const e=o.data(2).setType(o.TYPE.HEARTBEAT);this.send(e).catch((e=>{n("Heartbeat Error:",e),this.disconnect(e)}))}else this[E]=!0}isLINKMessage(e){return-1!=[o.TYPE.INTERNAL,o.TYPE.LINK].indexOf(e)}}},100:(e,t,s)=>{const n=s(954)("AnySocket"),i=s(69),r=s(267),o=s(661),c=s(20),h=s(501),a=s(69),u=s(117),l=Symbol("peers connected"),d=Symbol("ready peers"),p=Symbol("transports"),T=Symbol("onForward"),E=Symbol("onPeerConnected"),y=Symbol("onPeerReady"),m=Symbol("onPeerDisconnected"),f=Symbol("onPeerInternalMessage"),P=Symbol("findTransport"),k=Symbol("http bundle js"),w=Symbol("AnyMesh"),b=Symbol("HTTPServer"),C=s(155),_=s(420),S=s(288),g=s(366);class A extends r{constructor(){return super(),this._started=!1,this.id=o.uuidv4(),this.http=new u,n("AnySocketID:",this.id),this.rpc={},this[l]={},this[d]={},this[p]={},this[b]=null,this[w]=null,"undefined"==typeof window&&(this[k]=i.readFileSync("//../../dist/anysocket.browser.js")),this}filter(e){}broadcast(e,t){return t=t||!1,new Promise(((s,n)=>{const i=[];for(let r in this[d])r=this[d][r],i.push(r.send(e,t)),Promise.all(i).then(s).catch(n)}))}mesh(){if(this._started)throw new Error("Cannot enable Mesh while AnySocket is running. You must first stop AnySocket!");this[w]=new _(this)}setRPC(e){this.rpc=e}canProxy(e,t){return!1}proxy(e,t){return new Promise(((s,n)=>{e!=t&&e!=this.id?this[d][t].isProxy()?n("Cannot proxy via a proxy! atm... :)"):this[d][t].sendInternal({type:h.INTERNAL_PACKET_TYPE.PROXY,action:"proxy",id:e},!0).then((i=>{if(i.msg.ok&&!this[d][e]){let n=new S(this,new g(!0,this.id,e,this[d][t]),this[d][t].options);this[y](n),s(this[d][e])}else n("Cannot proxy!")})).catch(n):n("Cannot proxy loopback!")}))}unproxy(e,t,s){s=s||"Proxy Connection Closed",this[d][e]&&this[d][e].isProxy()&&(this[d][t].sendInternal({type:h.INTERNAL_PACKET_TYPE.PROXY,action:"unproxy",id:e}),this[m](this[d][e],s))}hasPeer(e){return!!this[d][e]}hasDirectPeer(e){return!(!this[d][e]||this[d][e].isProxy())}server(e,t){return this.listen(e,t)}listen(e,t){if(this._started=!0,"number"==typeof(t=t||{})&&(t={port:t}),t.ip=t.ip||"0.0.0.0",-1==["http","ws"].indexOf(e.toLowerCase())&&!t.port)throw new Error("Invalid port!");-1!=["ws"].indexOf(e.toLowerCase())&&(this[b]||this.listen("http",t),t={server:this[b]});let s=this[P](e);s=new s("server",t),this[p][s.id]=s,s.on("connected",(e=>{this[E](e,s.options)})),s.on("disconnected",((e,t)=>{this[m](e,t)}));let n=s.listen();return"http"==e&&(this[b]=s.server),n}connect(e,t,s,i){return new Promise(((r,o)=>{this._started=!0,i=Object.assign(i||{},{ip:t,port:s});let c=this[P](e);c=new c("client",i),c.on("connected",(e=>{this[p][c.id]=c,this[E](e,c.options,r),n("Transports Added",c.id,Object.keys(this[p]).length)})),c.on("disconnected",((e,t)=>{this[p][c.id].stop(),delete this[p][c.id],this[m](e,t),n("Transports left",c.id,Object.keys(this[p]).length),this[d][e.id]||o(t)})),c.connect().catch(o)}))}stop(){return this._started=!1,new Promise(((e,t)=>{const s=[];for(let e in this[p])s.push(this[p][e].stop());Promise.all(s).then((()=>{this[l]={},this[d]={},this[p]={},e()})).catch((e=>{throw e}))}))}onAuth(e){return!0}authPacket(){}[P](e){for(let t in A.Transport)if(A.Transport.hasOwnProperty(t)&&A.Transport[t].scheme()==e)return A.Transport[t];throw new Error("Invalid scheme '"+e+"'")}[E](e,t,s){if(n("Peer connected"),"http"==e.type)return e.on("upgrade",((e,t)=>{let s=new a(e,t);s.header("ANYSOCKET-ID",this.id),this.http._processUpgrade(s),this.emit("http_upgrade",s,e,t)})),void e.on("message",((e,t)=>{let s=new a(e,t);if("/@anysocket"==s.url)return s.body(this[k]),void s.end();e.body="",e.on("error",(e=>{console.log("Err",e)})).on("data",(t=>{e.body+=t,e.body.length>1e7&&e.connection.destroy()})).on("end",(()=>{e.body=e.body.toString(),s.header("ANYSOCKET-ID",this.id),this.http._process(s),this.emit("http",s,e,t)}))}));const i=new S(this,e,t);this[l][e.connectionID]=i,i.on("forward",this[T].bind(this)),i.once("ready",(e=>{this[y](e,s)}))}[T](e,t){if(this.id==t.to){if(!this[d][t.from])return void this[d][e].disconnect("Invalid forward packet! Client doesn't exist!");this[d][t.from]._recvForward(t)}else this.hasDirectPeer(t.to)?this[d][t.to].forward(t):console.error("FORWARD ERROR! We do not have the peer",t.to)}[y](e,t){if(this[d][e.peerID])return e.peerID=null,void e.disconnect("Duplicated AnySocket ID found!");n("Peer ready");const s=new C(e);return this[d][e.peerID]=s,s.on("message",(e=>{this.emit("message",e)})),s.on("e2e",(e=>{this.emit("e2e",e)})),s.on("internal",this[f].bind(this)),t&&t(s),setTimeout((()=>{this.emit("connected",s)}),0),s}[m](e,t){n("Peer disconnected",t,e.id);let s=null;if(this[l][e.connectionID]&&(s=this[l][e.connectionID].peerID,delete this[l][e.connectionID]),this[d][e.id]&&(s=e.id),s){const e=this[d][s];delete this[d][s];const n=e.getLinks();for(let t in n)n[t].sendInternal({type:h.INTERNAL_PACKET_TYPE.NETWORK,action:"disconnected",id:e.id}).catch((()=>{})),e.removeLink(n[t]),this[d][t]&&this[d][t].removeLink(e);e.disconnect(),this.emit("disconnected",e,t)}else e.disconnect()}[f](e){if(e.msg.type==h.INTERNAL_PACKET_TYPE.NETWORK){if("connected"==e.msg.action){if(!this[d][e.msg.id]){let t=new S(this,new g(!1,this.id,e.msg.id,this[d][e.peer.id]));this[y](t)}}else if("disconnected"==e.msg.action){if(!this[d][e.msg.id])return void e.peer.disconnect("Invalid proxy request!");this[m](this[d][e.msg.id],"Proxy Connection Closed")}}else if(e.msg.type==h.INTERNAL_PACKET_TYPE.PROXY){if("proxy"==e.msg.action){if(!this.canProxy(e.peer.id,e.msg.id)||!this[d][e.msg.id])return void e.peer.disconnect("Invalid proxy request!");if(this[d][e.msg.id].isProxy())return void e.reply({ok:!1});this[d][e.msg.id].addLink(this[d][e.peer.id]),this[d][e.peer.id].addLink(this[d][e.msg.id]),this[d][e.msg.id].sendInternal({type:h.INTERNAL_PACKET_TYPE.NETWORK,action:"connected",id:e.peer.id}),e.reply({ok:!0})}else if("unproxy"==e.msg.action){if(!this.canProxy(e.peer.id,e.msg.id)||!this[d][e.msg.id])return void e.peer.disconnect("Invalid proxy request!");this[d][e.msg.id].removeLink(this[d][e.peer.id]),this[d][e.peer.id].removeLink(this[d][e.msg.id]),this[d][e.msg.id].sendInternal({type:h.INTERNAL_PACKET_TYPE.NETWORK,action:"disconnected",id:e.peer.id})}}else if(e.msg.type==h.INTERNAL_PACKET_TYPE.RPC){let t=!1,s=this.rpc;for(let n in e.msg.method)if(t=s,s=s[e.msg.method[n]],!s)break;if(t&&s&&"function"==typeof s)try{for(let t of e.msg.bin)e.msg.params[t]=A.Packer.unpack(e.msg.params[t]);Promise.resolve(s.apply(t,e.msg.params)).then((t=>{let s=!1;c.isBuffer(t)&&(t=A.Packer.pack(t),s=!0),e.reply({result:t,bin:s})})).catch((t=>{e.reply({error:t,code:500})}))}catch(t){e.reply({error:t.message,code:500})}else e.reply({error:"Method not found",code:404})}else e.msg.type==h.INTERNAL_PACKET_TYPE.RPC_NOTIFY?console.log("RPC_NOTIFY",e.msg):e.msg.type==h.INTERNAL_PACKET_TYPE.SYNCED_TIME?e.reply({o:e.msg.time,t:Date.now()}):e.peer.disconnect("Invalid internal message")}}e.exports=A},558:(e,t,s)=>{const n=s(555),i=s(501),r=e=>n.unpackInt32(e.substr(2,4)),o=e=>parseInt(e.substr(1,1)),c={};class h{constructor(e){this.seq=0,this.type=0,this.buffer=[],this.data=null,e&&(this.data=e)}setType(e){return this.type=e,this}setSeq(e){return this.seq=e,this}setReplyTo(e){return e&&(this.seq=-e),this}async serialize(e,t){e=e||Number.MAX_SAFE_INTEGER;let s=[JSON.stringify(this.data)];s[0].length>e&&(c[e]=c[e]||new RegExp("(.{1,"+e+"})","g"),s=s[0].match(c[e]));for(let e=0;e<s.length;e++)s[e]=(e==s.length-1?i.PACKET_LENGTH.FULL:i.PACKET_LENGTH.PARTIAL).toString()+this.type.toString()+n.packInt32(this.seq)+await t(s[e],Math.abs(this.seq));return s}async deserialize(e,t,s){s=s||(e=>Promise.resolve(e));const n=e.substr(0,1)==i.PACKET_LENGTH.FULL;if(this.type=o(e),this.seq=r(e),this.buffer.push(await s(t,e.substr(6),Math.abs(this.seq))),n){try{this.buffer=this.buffer.join("");let e=JSON.parse(this.buffer);this.buffer=[],this.data=e}catch(e){this.data=null}return!0}return!1}}e.exports={data:e=>new h(e=e||{}),buffer:()=>new h,getSeq:e=>r(e),getType:e=>o(e),isForwardPacket:e=>e.substr(0,1)==i.PACKET_TYPE.FORWARD,TYPE:i.PACKET_TYPE}},366:(e,t,s)=>{const n=s(586),i=s(162);e.exports=class extends n{constructor(e,t,s,n){super(n),this.id=s,this.anysocketID=t,this.type=e?i.TYPE.CLIENT:i.TYPE.SERVER,this.isProxy=!0,this.init()}onConnect(){}send(e){return new Promise(((t,s)=>{try{this.socket.forward({to:this.id,from:this.anysocketID,msg:e}),t()}catch(e){s(e)}}))}onDisconnect(){}}},501:e=>{const t={PACKET_TYPE:{AUTH:1,INTERNAL:2,LINK:3,SWITCH:4,HEARTBEAT:5,FORWARD:6},PACKET_LENGTH:{FULL:1,PARTIAL:2},INTERNAL_PACKET_TYPE:{NETWORK:1,PROXY:2,RPC:3,RPC_NOTIFY:4,SYNCED_TIME:5},PROTOCOL_STATES:{ESTABLISHED:0,AUTHING:1,CONNECTED:2,SWITCHING_PROTOCOL:3,DISCONNECTED:4},PROTOCOL_ENCRYPTION:{PLAIN:1,E2EE:2},MAX_PACKET_SIZE:524288};for(let e in t)t[e]._string=s=>{for(let n in t[e])if(t[e][n]==s)return n;return s};e.exports=t},510:(e,t,s)=>{const n=s(147),i=s(20);e.exports=new class{uuidv4(){return"xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx".replace(/[xy]/g,(function(e){const t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))}generateAESKey(){return new Promise((async(e,t)=>{let s=await n.createECDH("secp521r1"),r=await s.generateKeys();e({private:s,public:i.bufferToString(r),nonce:i.bufferToHex(n.randomBytes(32))})}))}computeAESsecret(e,t){return new Promise((async(s,n)=>{let r=await e.computeSecret(i.bufferFromString(t),null,"hex");r=r.substr(0,128),s(r)}))}getAESSessionKey(e,t,s){return new Promise((async(r,o)=>{t=t+"_"+s,e=await n.pbkdf2Sync(e,t,1,32,"sha256"),r(e=i.bufferToHex(e))}))}encryptAES(e,t){return new Promise(((s,r)=>{try{let r=n.randomBytes(16),o=n.createCipheriv("aes-256-cbc",i.bufferFromHex(e),r),c=o.update(t);c=Buffer.concat([c,o.final()]);let h=r.toString("hex")+c.toString("hex");this.decryptAES(e,h),s(h)}catch(e){r(e)}}))}decryptAES(e,t){return new Promise(((s,r)=>{try{let r=Buffer.from(t.substr(0,32),"hex"),o=Buffer.from(t.substr(32),"hex"),c=n.createDecipheriv("aes-256-cbc",i.bufferFromHex(e),r),h=c.update(o);h=Buffer.concat([h,c.final()]),s(h.toString())}catch(e){r(e)}}))}}},586:(e,t,s)=>{const n=s(267),i=s(661),r=s(162);e.exports=class extends n{constructor(e){super(),this.connectionID=i.uuidv4(),this.connected=!0,this.socket=e,this.type=r.TYPE.NONE,this.inited=!1}init(){this.inited||(this.inited=!0,this.onConnect(),this.emit("connected",this))}isClient(){if(this.type==r.TYPE.NONE)throw new Error("Invalid transport type!!!");return this.type==r.TYPE.CLIENT}disconnect(e){this.connected&&(this.connected=!1,this.onDisconnect(),this.emit("disconnected",this,e))}send(e){throw new Error("send() must be implemented")}onConnect(){throw new Error("onConnect() must be implemented")}onDisconnect(){throw new Error("onDisconnect() must be implemented")}}},162:(e,t,s)=>{const n=s(267),i=s(661);class r extends n{constructor(e,t){super(),this.id=i.uuidv4(),this.options=Object.assign({},t),this.type=e,this.peers=new Map,this.started=!1}listen(){return new Promise(((e,t)=>{this.started?e():this.onListen().then((()=>{this.started=!0,e()})).catch((e=>{t(e)}))}))}connect(){return new Promise(((e,t)=>{this.started?e():this.onConnect().then((()=>{this.started=!0,e()})).catch((e=>{t(e)}))}))}stop(){return new Promise(((e,t)=>{if(this.started){this.started=!1;for(const e of this.peers.values())e.disconnect("Local Connection Closed");this.onStop().then((()=>{e()})).catch((e=>{t(e)}))}else e()}))}addPeer(e){e.type=this.type,e.on("connected",(()=>{this.peers.set(e.connectionID,e),this.emit("connected",e)})),e.on("disconnected",((e,t)=>{this.peers.delete(e.connectionID),this.emit("disconnected",e,t)})),e.init()}onConnect(){throw new Error("onConnect() must be implemented")}onListen(){throw new Error("onListen() must be implemented")}onStop(){throw new Error("onStop() must be implemented")}}var o,c,h;h=()=>{throw new Error("static scheme() must be implemented")},(c="scheme")in(o=r)?Object.defineProperty(o,c,{value:h,enumerable:!0,configurable:!0,writable:!0}):o[c]=h,e.exports=r,r.TYPE={CLIENT:"client",SERVER:"server",HTTP:"http"}},683:(e,t,s)=>{const n=s(586);e.exports=class extends n{onConnect(){this.socket.on("close",(()=>{this.disconnect("Remote Connection Closed")})),this.socket.on("error",(e=>{this.emit("error",this,e)})),this.socket.on("message",(e=>{this.emit("message",this,e)}))}send(e){return new Promise(((t,s)=>{try{this.socket.send(e),t()}catch(e){s(e)}}))}onDisconnect(){this.socket&&(this.socket.close(),this.socket.terminate(),this.socket=null)}}},866:(e,t,s)=>{const n=s(162),i=s(683),r=s(966);e.exports=class extends n{constructor(e,t){super(e,t)}static scheme(){return"ws"}onListen(){return new Promise(((e,t)=>{this.ws=new r.Server({server:this.options.server}),this.ws.on("connection",(e=>{this.addPeer(new i(e))})),this.ws.on("error",(e=>{t(e)})),this.ws.on("listening",(()=>{e()}))}))}onConnect(e){return new Promise(((t,s)=>{let n=!1,o=null;this.options.cookies&&(o={headers:{Cookie:this._formatCookies(this.options.cookies)}});let c=new r((e?"ws":"wss")+"://"+this.options.ip+":"+this.options.port+"/",o);c.on("open",(e=>{n=!0,this.addPeer(new i(c)),t()})),c.on("error",(i=>{e||n?s(i):this.onConnect(!0).then(t).catch(s),n=!1}))}))}onStop(){return new Promise(((e,t)=>{this.ws&&(this.ws.close(),this.ws=null),e()}))}_formatCookies(e){let t=[];for(let s in e)t.push(s+"="+e[s]);return t.join("; ")}}},373:(e,t,s)=>{"use strict";var n=s(650);function i(e,t,s){if("function"==typeof e&&(s=t,t=e,e=null),s<1)throw new Error("fastqueue concurrency must be greater than 1");var i=n(o),c=null,h=null,a=0,u=null,l={push:function(s,n){var o=i.get();o.context=e,o.release=d,o.value=s,o.callback=n||r,o.errorHandler=u,a===l.concurrency||l.paused?h?(h.next=o,h=o):(c=o,h=o,l.saturated()):(a++,t.call(e,o.value,o.worked))},drain:r,saturated:r,pause:function(){l.paused=!0},paused:!1,concurrency:s,running:function(){return a},resume:function(){if(l.paused){l.paused=!1;for(var e=0;e<l.concurrency;e++)a++,d()}},idle:function(){return 0===a&&0===l.length()},length:function(){for(var e=c,t=0;e;)e=e.next,t++;return t},getQueue:function(){for(var e=c,t=[];e;)t.push(e.value),e=e.next;return t},unshift:function(s,n){var o=i.get();o.context=e,o.release=d,o.value=s,o.callback=n||r,a===l.concurrency||l.paused?c?(o.next=c,c=o):(c=o,h=o,l.saturated()):(a++,t.call(e,o.value,o.worked))},empty:r,kill:function(){c=null,h=null,l.drain=r},killAndDrain:function(){c=null,h=null,l.drain(),l.drain=r},error:function(e){u=e}};return l;function d(s){s&&i.release(s);var n=c;n?l.paused?a--:(h===c&&(h=null),c=n.next,n.next=null,t.call(e,n.value,n.worked),null===h&&l.empty()):0==--a&&l.drain()}}function r(){}function o(){this.value=null,this.callback=r,this.next=null,this.release=r,this.context=null,this.errorHandler=null;var e=this;this.worked=function(t,s){var n=e.callback,i=e.errorHandler,o=e.value;e.value=null,e.callback=r,e.errorHandler&&i(t,o),n.call(e.context,t,s),e.release(e)}}e.exports=i,e.exports.promise=function(e,t,s){"function"==typeof e&&(s=t,t=e,e=null);var n=i(e,(function(e,s){t.call(this,e).then((function(e){s(null,e)}),s)}),s),r=n.push,o=n.unshift;return n.push=function(e){return new Promise((function(t,s){r(e,(function(e,n){e?s(e):t(n)}))}))},n.unshift=function(e){return new Promise((function(t,s){o(e,(function(e,n){e?s(e):t(n)}))}))},n}},650:e=>{"use strict";e.exports=function(e){var t=new e,s=t;return{get:function(){var n=t;return n.next?t=n.next:(t=new e,s=t),n.next=null,n},release:function(e){s.next=e,s=e}}}}},t={};return function s(n){if(t[n])return t[n].exports;var i=t[n]={exports:{}};return e[n](i,i.exports,s),i.exports}(506)})();`);
  }
};

// src/libs/Utils.ts
var Utils_default = new class Utils {
  async getSHA(data) {
    if (!data)
      return null;
    let sha = await crypto.subtle.digest("SHA-256", new TextEncoder("utf-8").encode(data));
    return Array.prototype.map.call(new Uint8Array(sha), (x) => ("00" + x.toString(16)).slice(-2)).join("");
  }
}();

// src/libs/AnysocketManager.ts
var EventEmitter = require_Events();
var AnysocketManager = class extends EventEmitter {
  constructor(xSync) {
    super();
    this.eventRefs = {};
    this.isConnected = false;
    this.notifiedOfConnectError = false;
    this.peer = null;
    this.xSync = xSync;
    this.plugin = xSync.plugin;
    AnySocketLoader.load();
    this.anysocket = new AnySocket();
    console.log("AnySocket Sync (" + this.plugin.VERSION + ") - Enabled");
    if (app.isMobile) {
      activeWindow.onblur = () => {
        this.emit("unload");
      };
      activeWindow.onfocus = () => {
        this.emit("reload");
      };
    }
  }
  async getTime() {
    return Date.now();
  }
  async init() {
    this.anysocket.removeAllListeners();
    let password = await Utils_default.getSHA(this.anysocket.id.substring(0, 16) + this.plugin.settings.password + this.anysocket.id.substring(16));
    this.anysocket.authPacket = () => {
      return password;
    };
    this.anysocket.onAuth = async (packet) => {
      return await Utils_default.getSHA(packet.id.substring(0, 16) + this.plugin.settings.password + packet.id.substring(16)) == packet.auth;
    };
    this.anysocket.on("message", async (packet) => {
      this.emit("message", packet);
    });
    this.anysocket.on("e2e", async (peer) => {
      this.getTime = async () => {
        return Math.round((await peer.getSyncedTime()).time);
      };
      await this.getTime();
      app.workspace.onLayoutReady(async () => {
        await this.checkForUpdates(peer);
      });
    });
    this.anysocket.on("disconnected", (peer) => {
      this.isConnected = false;
      this.peer = null;
      this.emit("disconnected");
      this.emit("reload");
    });
    this.connect();
  }
  async checkForUpdates(peer) {
    let result = await peer.rpc.onVersionCheck(this.plugin.VERSION, this.plugin.BUILD);
    if (result.type == "ok") {
      this.peer = peer;
      this.isConnected = true;
      this.emit("connected", peer);
    } else if (result.type == "update") {
      await this.xSync.storage.updatePlugin(result.files);
      window._anysocketID = this.anysocket.id;
      this.anysocket.removeAllListeners("disconnected");
      app.plugins.disablePlugin("anysocket-sync");
      new import_obsidian.Notice("\u{1F7E1} AnySocket Sync - Updated to version: " + result.version);
      app.plugins.enablePlugin("anysocket-sync");
    } else {
      this.anysocket.removeAllListeners();
      this.emit("unload");
      new import_obsidian.Notice("\u{1F7E1} AnySocket Sync - Incompatible client version " + this.plugin.VERSION);
    }
  }
  connect() {
    if (!this.isEnabled) {
      return;
    }
    if (!this.plugin.settings.password) {
      console.log("AnySocket Sync - Requires setup");
      new import_obsidian.Notice("\u{1F7E1} AnySocket Sync - Requires setup");
      this.emit("unload");
      return;
    }
    if (window._anysocketID) {
      this.anysocket.id = window._anysocketID;
      delete window._anysocketID;
    }
    this.anysocket.connect("ws", this.plugin.settings.host, this.plugin.settings.port).then(async (peer) => {
      peer.e2e();
      this.notifiedOfConnectError = false;
    }).catch((e) => {
      console.error("AnySocket Connect Error", e);
      this.isConnected = false;
      if (!this.notifiedOfConnectError) {
        this.notifiedOfConnectError = true;
        new import_obsidian.Notice("\u{1F7E1} AnySocket Sync - Could not connect to the server");
      }
      this.emit("reload");
    });
  }
  async send(packet, onReply) {
    if (!this.peer)
      return;
    if (onReply) {
      packet = await this.peer.send(packet, true);
      onReply(packet);
    } else {
      return await this.peer.send(packet);
    }
  }
  stop() {
    this.anysocket.stop();
  }
};

// src/libs/fs/FSAdapter.ts
var FSAdapter = class {
  constructor(basePath) {
    this.basePath = basePath;
  }
  async makeFolder(path) {
    await app.vault.createFolder(this.basePath + path).catch(() => {
    });
  }
  async write(path, data, mtime) {
    if (!await this.exists(path)) {
      let folder = path.split("/").slice(0, -1).join("/");
      if (folder) {
        await this.makeFolder(folder);
      }
    }
    if (data != null) {
      let options = null;
      if (mtime) {
        options = {
          mtime
        };
      }
      await app.vault.adapter.write(this.basePath + path, data, options);
    }
    return data;
  }
  async read(path) {
    try {
      return await app.vault.adapter.read(this.basePath + path);
    } catch (e) {
      return null;
    }
  }
  async exists(path) {
    return await app.vault.adapter.exists(this.basePath + path);
  }
  async delete(path) {
    await app.vault.delete(this.getFile(path), true);
  }
  async iterate(callback) {
    let files = app.vault.getAllLoadedFiles();
    for (let file of files) {
      await callback(file);
    }
  }
  getFile(path) {
    return app.vault.getAbstractFileByPath(path);
  }
};

// src/libs/fs/Storage.ts
var Storage = class {
  constructor() {
    this.inited = false;
    this.fsVault = new FSAdapter("./");
    this.fsInternal = new FSAdapter(".obsidian/plugins/anysocket-sync/");
  }
  async init() {
    if (this.inited)
      return;
    this.tree = {};
    this.inited = true;
  }
  async write(path, data, metadata) {
    await this.writeMetadata(path, metadata);
    return await this.fsVault.write(path, data, metadata.mtime);
  }
  async makeFolder(path, metadata) {
    await this.writeMetadata(path, metadata);
    return await this.fsVault.makeFolder(path);
  }
  async read(path) {
    return await this.fsVault.read(path);
  }
  async delete(path, metadata) {
    await this.writeMetadata(path, metadata);
    return await this.fsVault.delete(path);
  }
  async exists(path) {
    return await this.fsVault.exists(path);
  }
  async iterate(callback) {
    await this.fsVault.iterate(async (item) => {
      if (item.path == "/")
        return;
      await callback(item);
    });
  }
  async readMetadata(path) {
    if (!this.tree[path]) {
      return null;
    }
    return this.tree[path];
  }
  async writeMetadata(path, metadata) {
    if (!this.tree[path]) {
      this.tree[path] = {};
    }
    for (let key in metadata) {
      this.tree[path][key] = metadata[key];
    }
    return this.tree[path];
  }
  async updatePlugin(files) {
    for (let item of files) {
      await this.fsInternal.write(item.path, item.data);
    }
  }
  getFileByPath(path) {
    if (path.substring(0, 1) == "/") {
      path = path.substring(1);
    }
    return this.fsVault.getFile(path);
  }
};
Storage.tree = null;

// src/XSync.ts
var DEBUG = true;
var XSync = class {
  constructor(plugin) {
    this.isEnabled = false;
    this.eventRefs = {};
    this.storage = new Storage();
    this.reloadTimeout = null;
    this.plugin = plugin;
    this.anysocket = new AnysocketManager(this);
  }
  async enabled(value) {
    if (this.isEnabled !== value) {
      this.isEnabled = value;
      this.anysocket.isEnabled = value;
      if (this.isEnabled) {
        await this.load(false);
      } else {
        this.unload(false);
      }
    }
  }
  async listVersionHistory(path, callback) {
    if (!this.isEnabled) {
      return new import_obsidian2.Notice("\u{1F7E1} AnySocket Sync - Plugin is disabled");
    }
    if (!this.anysocket.isConnected) {
      return new import_obsidian2.Notice("\u{1F7E1} AnySocket Sync - Not Connected");
    }
    this.anysocket.send({
      type: "file_history",
      data: {
        type: "list_versions",
        path
      }
    }, (packet) => {
      callback(packet.msg);
    });
  }
  async readVersionHistory(path, timestamp, callback) {
    if (!this.isEnabled) {
      return new import_obsidian2.Notice("\u{1F7E1} AnySocket Sync - Plugin is disabled");
    }
    if (!this.anysocket.isConnected) {
      return new import_obsidian2.Notice("\u{1F7E1} AnySocket Sync - Not Connected");
    }
    this.anysocket.send({
      type: "file_history",
      data: {
        type: "read",
        path,
        timestamp
      }
    }, (packet) => {
      callback(packet.msg);
    });
  }
  async listFilesHistory(deletedOnly, callback) {
    if (!this.isEnabled) {
      return new import_obsidian2.Notice("\u{1F7E1} AnySocket Sync - Plugin is disabled");
    }
    if (!this.anysocket.isConnected) {
      return new import_obsidian2.Notice("\u{1F7E1} AnySocket Sync - Not Connected");
    }
    this.anysocket.send({
      type: "file_history",
      data: {
        type: "list_files",
        mode: deletedOnly ? "deleted" : "all"
      }
    }, (packet) => {
      callback(packet.msg);
    });
  }
  async sync() {
    DEBUG && console.log("sync");
    let data = [];
    await this.storage.iterate(async (item) => {
      let mtime = null;
      if (item.children === void 0) {
        mtime = item.stat.mtime;
      } else {
        mtime = await this.getFolderMtime(item);
        if (mtime === false) {
          return;
        }
      }
      let result = await this.getMetadata("sync", item, mtime);
      data.push({
        path: item.path,
        metadata: result.metadata
      });
    });
    this.anysocket.send({
      type: "sync",
      data
    });
  }
  async processLocalEvent(action, file, args) {
    if (action == "rename") {
      await this.processLocalEvent("delete", { path: args[0] });
      await this.processLocalEvent("create", file);
      return;
    }
    DEBUG && console.log("event", action, file.path);
    try {
      let result = await this.getMetadata(action, file);
      if (!result.changed)
        return;
      if (!this.anysocket.isConnected) {
        return;
      }
      result.metadata.path = file.path;
      this.anysocket.send({
        type: "file_event",
        data: result.metadata
      });
    } catch (e) {
      console.error(e);
    }
  }
  registerEvent(type) {
    this.eventRefs[type] = app.vault.on(type, async (file, ...args) => {
      if (!this.isEnabled)
        return;
      await this.processLocalEvent(type, file, args);
    });
  }
  unregisterEvent(type) {
    app.vault.offref(this.eventRefs[type]);
  }
  async load() {
    if (!this.isEnabled)
      return;
    if (this.inited == true)
      return;
    this.inited = true;
    await this.storage.init();
    await (async () => {
      let loaded = 0;
      let times = 2;
      return new Promise((resolve) => {
        let interval = setInterval(() => {
          let current = app.vault.getAllLoadedFiles();
          if (loaded < current.length) {
            loaded = current.length;
          } else if (loaded == current.length && --times <= 0) {
            clearInterval(interval);
            resolve();
          }
        }, 500);
      });
    })();
    this.registerEvent("create");
    this.registerEvent("modify");
    this.registerEvent("delete");
    this.registerEvent("rename");
    this.anysocket.on("connected", async (peer) => {
      new import_obsidian2.Notice("\u{1F7E2} AnySocket Sync - Connected");
      this.plugin.ribbonIcon.style.color = "";
      let syncPlugin = app.internalPlugins.plugins["sync"].instance;
      let deviceName = syncPlugin.deviceName ? syncPlugin.deviceName : syncPlugin.getDefaultDeviceName();
      await peer.rpc.setDeviceId(deviceName);
      await this.sync();
    });
    this.anysocket.on("message", (packet) => {
      switch (packet.msg.type) {
        case "file_data":
          this.onFileData(packet.msg.data, packet.peer);
          break;
      }
    });
    this.anysocket.on("reload", this.reload.bind(this));
    this.anysocket.on("unload", this.unload.bind(this));
    this.anysocket.on("disconnected", () => {
      new import_obsidian2.Notice("\u{1F534} AnySocket Sync - Lost connection");
      this.plugin.ribbonIcon.style.color = "red";
      DEBUG && console.log("disconnected");
    });
    this.anysocket.init();
  }
  unload() {
    clearTimeout(this.reloadTimeout);
    if (this.inited == false)
      return;
    this.inited = false;
    this.unregisterEvent("create");
    this.unregisterEvent("modify");
    this.unregisterEvent("delete");
    this.unregisterEvent("rename");
    this.anysocket.stop();
    this.anysocket.removeAllListeners();
    this.plugin.ribbonIcon.style.color = "red";
  }
  reload() {
    DEBUG && console.log("reloaded");
    this.unload();
    this.reloadTimeout = setTimeout(() => {
      this.load();
    }, 1e3);
  }
  async onFileData(data, peer) {
    DEBUG && console.log("FileData:", data);
    if (data.type == "send") {
      this.anysocket.send({
        type: "file_data",
        data: {
          type: "apply",
          data: await this.storage.read(data.path),
          path: data.path,
          metadata: await this.storage.readMetadata(data.path)
        }
      });
    } else if (data.type == "apply") {
      switch (data.metadata.action) {
        case "created":
          if (data.metadata.type == "folder") {
            await this.storage.makeFolder(data.path, data.metadata);
          } else {
            await this.storage.write(data.path, data.data, data.metadata);
          }
          break;
        case "deleted":
          await this.storage.delete(data.path, data.metadata);
          break;
      }
    } else if (data.type == "sync") {
      DEBUG && console.log("sync", data);
    }
    return true;
  }
  async getMetadata(action, file, itemTime) {
    let typeToAction = {
      "sync": "created",
      "restore": "created",
      "create": "created",
      "modify": "created",
      "rename": "created",
      "delete": "deleted"
    };
    let itemType;
    let itemData;
    if (action == "restore") {
      itemData = file;
      itemType = "file";
    } else {
      itemData = await this.storage.read(file.path);
      itemType = file.stat ? "file" : "folder";
    }
    let metadata = {
      action: typeToAction[action],
      sha1: await Utils_default.getSHA(itemData),
      mtime: itemTime || await this.anysocket.getTime(),
      type: itemType
    };
    if (action == "restore") {
      return metadata;
    }
    let storedMetadata = await this.storage.readMetadata(file.path);
    if (storedMetadata && metadata.action == storedMetadata.action && metadata.sha1 == storedMetadata.sha1) {
      return {
        changed: false,
        metadata: storedMetadata
      };
    }
    await this.storage.writeMetadata(file.path, metadata);
    return {
      changed: true,
      metadata
    };
  }
  async getFolderMtime(file) {
    if (file.stat) {
      return file.stat.mtime;
    }
    if (file.children.length <= 0) {
      return false;
    }
    let hasValue = false;
    let minMtime = await this.anysocket.getTime();
    for (let child of file.children) {
      let mtime = await this.getFolderMtime(child);
      if (mtime == false) {
        continue;
      }
      if (minMtime > mtime) {
        hasValue = true;
        minMtime = mtime;
      }
    }
    return hasValue ? minMtime : false;
  }
};

// src/libs/modals/RibbonModal.ts
var import_obsidian5 = require("obsidian");

// src/libs/modals/FilesHistoryModal.ts
var import_obsidian4 = require("obsidian");

// src/libs/modals/VersionHistoryModal.ts
var import_obsidian3 = require("obsidian");
var VersionHistoryModal = class extends import_obsidian3.Modal {
  constructor(plugin, path) {
    super(app);
    this.plugin = plugin;
    this.path = path;
    this.name = "Unknown";
    this.versions = [];
    this.type = "created";
    this.open();
    this.setup();
  }
  setup() {
    this.modalEl.addClass("anysocket-version-history");
    let elList = this.contentEl.createDiv("history-list");
    let elContainer = this.contentEl.createDiv("version-container");
    let elContent = elContainer.createDiv("version-content");
    let elTitle = elContent.createDiv("version-titlebar");
    let parts = this.path.split("/");
    this.name = parts[parts.length - 1];
    let fileName = elTitle.createDiv("version-filename").textContent = this.name;
    let actions = elTitle.createDiv("version-actions");
    this.buttonRestore = actions.createEl("button", { text: "Restore", onclick: this.onRestore.bind(this) });
    this.buttonRestore.disabled = true;
    let _originalContentEl = this.contentEl;
    this.contentEl = elContent;
    this.markdownView = new import_obsidian3.MarkdownPreviewView(this);
    this.contentEl = _originalContentEl;
    this.plugin.xSync.listVersionHistory(this.path, (data) => {
      this.versions = [];
      if (data && data.data.length <= 0) {
        return;
      }
      if (data.deleted) {
        this.type = "deleted";
      }
      for (let timestamp of data.data) {
        let item = elList.createDiv("version-timestamp");
        let versionItem = {
          timestamp,
          el: item
        };
        item.textContent = this.formatTimestamp(timestamp);
        item.onclick = () => {
          this.internalItemSelect(versionItem);
        };
        this.versions.push(versionItem);
      }
      this.internalItemSelect(this.versions[0]);
    });
  }
  formatTimestamp(timestamp) {
    let date = new Date(timestamp);
    let month = date.getMonth() + 1;
    let day = date.getDate();
    let year = date.getFullYear();
    let hours = date.getHours();
    let minutes = date.getMinutes();
    let ampm = hours >= 12 ? "PM" : "AM";
    hours = hours % 12;
    hours = hours ? hours : 12;
    minutes = minutes < 10 ? "0" + minutes : minutes;
    return `${month}/${day}/${year} ${hours}:${minutes} ${ampm}`;
  }
  internalItemSelect(item) {
    this.versions.map((v) => v.el.removeClass("active"));
    item.el.addClass("active");
    this.plugin.xSync.readVersionHistory(this.path, item.timestamp, (data) => {
      this.markdownView.set(data, true);
      this.markdownView.applyScroll(0);
    });
    this.selectedVersion = item;
    this.buttonRestore.textContent = "Restore";
    this.buttonRestore.disabled = false;
    if (this.type == "created") {
      if (this.selectedVersion.timestamp == this.versions[0].timestamp) {
        this.buttonRestore.textContent = "Current";
        this.buttonRestore.disabled = true;
      } else {
        this.buttonRestore.textContent = "Restore";
        this.buttonRestore.disabled = false;
      }
    }
  }
  async onRestore() {
    let data = this.markdownView.get();
    let metadata = await this.plugin.xSync.getMetadata("restore", data);
    metadata.sha1 = null;
    await this.plugin.xSync.storage.write(this.path, data, metadata);
    new import_obsidian3.Notice("Restored - " + this.name + " (" + this.formatTimestamp(this.selectedVersion.timestamp) + ")");
    this.close();
  }
};

// src/libs/modals/FilesHistoryModal.ts
var FilesHistoryModal = class extends import_obsidian4.SuggestModal {
  constructor(plugin, deletedOnly = false) {
    super(app);
    this.plugin = plugin;
    this.data = [];
    this.deletedOnly = deletedOnly;
    if (this.deletedOnly) {
      this.setPlaceholder("Search for deleted files...");
    } else {
      this.setPlaceholder("Search for files...");
    }
    this.plugin.xSync.listFilesHistory(this.deletedOnly, (data) => {
      this.data = data;
      this.open();
    });
    this.containerEl.addClass("anysocket-files-history");
  }
  getSuggestions(query) {
    return this.data.filter((item) => item.path.toLowerCase().includes(query.toLowerCase()));
  }
  async onChooseSuggestion(item, evt) {
    new VersionHistoryModal(this.plugin, item.path);
  }
  renderSuggestion(value, el) {
    el.createEl("div", { text: value.path }).addClass("item-path");
    let prefix = "Modified: ";
    if (this.deletedOnly) {
      prefix = "Deleted: ";
    }
    el.createEl("div", { text: prefix + this.formatTimestamp(value.mtime) }).addClass("item-metadata");
  }
  formatTimestamp(timestamp) {
    let date = new Date(timestamp);
    let month = date.getMonth() + 1;
    let day = date.getDate();
    let year = date.getFullYear();
    let hours = date.getHours();
    let minutes = date.getMinutes();
    let ampm = hours >= 12 ? "PM" : "AM";
    hours = hours % 12;
    hours = hours ? hours : 12;
    minutes = minutes < 10 ? "0" + minutes : minutes;
    return `${month}/${day}/${year} ${hours}:${minutes} ${ampm}`;
  }
};

// src/libs/modals/RibbonModal.ts
var COMMAND_TYPES = {
  SETTINGS: 1,
  DELETED_FILES: 2,
  VERSION_HISTORY: 3,
  PLUGIN_STATE: 4
};
var commandList = [
  {
    id: COMMAND_TYPES.SETTINGS,
    name: "Settings",
    canShow: (plugin) => {
      return true;
    }
  },
  {
    id: COMMAND_TYPES.DELETED_FILES,
    name: "Deleted Files",
    canShow: (plugin) => {
      return plugin.xSync.anysocket.isConnected;
    }
  },
  {
    id: COMMAND_TYPES.VERSION_HISTORY,
    name: "Version History",
    canShow: (plugin) => {
      return plugin.xSync.anysocket.isConnected;
    }
  },
  {
    id: COMMAND_TYPES.PLUGIN_STATE,
    name: "Enable Sync",
    canShow: (plugin) => {
      return !plugin.xSync.isEnabled;
    }
  },
  {
    id: COMMAND_TYPES.PLUGIN_STATE,
    name: "Disable Sync",
    canShow: (plugin) => {
      return plugin.xSync.isEnabled;
    }
  }
];
var RibbonModal = class extends import_obsidian5.SuggestModal {
  constructor(plugin) {
    super(app);
    this.plugin = plugin;
    this.setPlaceholder("Type a command...");
  }
  getSuggestions(query) {
    return commandList.filter((item) => {
      if (item.canShow(this.plugin)) {
        return item.name.toLowerCase().includes(query.toLowerCase());
      }
    });
  }
  async onChooseSuggestion(item, evt) {
    switch (item.id) {
      case COMMAND_TYPES.SETTINGS:
        const setting = this.app.setting;
        await setting.open();
        setting.openTabById("anysocket-sync");
        break;
      case COMMAND_TYPES.VERSION_HISTORY:
        new FilesHistoryModal(this.plugin, false);
        break;
      case COMMAND_TYPES.DELETED_FILES:
        new FilesHistoryModal(this.plugin, true);
        break;
      case COMMAND_TYPES.PLUGIN_STATE:
        if (this.plugin.isLoading) {
          break;
        }
        this.plugin.isLoading = true;
        await this.plugin.xSync.enabled(!this.plugin.xSync.isEnabled);
        this.plugin.isLoading = false;
        break;
    }
  }
  renderSuggestion(value, el) {
    el.createEl("div", { cls: "as-item", text: value.name });
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  host: "127.0.0.1",
  port: "3000",
  password: ""
};
var AnySocketSyncPlugin = class extends import_obsidian6.Plugin {
  constructor() {
    super(...arguments);
    this.VERSION = "1.0.0";
    this.BUILD = "1718569596679";
    this.isLoading = false;
  }
  async onload() {
    await this.loadSettings();
    this.registerEvent(this.app.workspace.on("file-menu", (menu, file) => {
      if (!file.stat) {
        return;
      }
      menu.addItem((item) => {
        item.setTitle("Version History").setIcon("history").onClick(async () => {
          new VersionHistoryModal(this, file.path);
        });
      });
    }));
    this.ribbonIcon = this.addRibbonIcon("paper-plane", "AnySocket Sync", async (evt) => {
      new RibbonModal(this).open();
    });
    this.ribbonIcon.style.color = "red";
    this.addSettingTab(new AnySocketSyncSettingTab(this));
    this.xSync = new XSync(this);
    await this.xSync.enabled(true);
  }
  async onunload() {
    await this.xSync.enabled(false);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var AnySocketSyncSettingTab = class extends import_obsidian6.PluginSettingTab {
  constructor(plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings" });
    new import_obsidian6.Setting(containerEl).setName("Host").addText((text) => text.setPlaceholder("127.0.0.1").setValue(this.plugin.settings.host).onChange(async (value) => {
      this.plugin.settings.host = value;
    }));
    new import_obsidian6.Setting(containerEl).setName("Port").addText((text) => text.setPlaceholder("3000").setValue(this.plugin.settings.port).onChange(async (value) => {
      this.plugin.settings.port = value;
    }));
    new import_obsidian6.Setting(containerEl).setName("Password").addText((text) => {
      text.setPlaceholder("pass").setValue(this.plugin.settings.password).onChange(async (value) => {
        this.plugin.settings.password = value;
      });
      text.inputEl.type = "password";
    });
    new import_obsidian6.Setting(containerEl).addButton((button) => button.setButtonText("Save").onClick(async () => {
      await this.plugin.saveSettings();
      this.plugin.xSync.reload();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL2xpYnMvRXZlbnRzLmpzIiwgInNyYy9tYWluLnRzIiwgInNyYy9YU3luYy50cyIsICJzcmMvbGlicy9Bbnlzb2NrZXRNYW5hZ2VyLnRzIiwgInNyYy9saWJzL0FueVNvY2tldExvYWRlci50cyIsICJzcmMvbGlicy9VdGlscy50cyIsICJzcmMvbGlicy9mcy9GU0FkYXB0ZXIudHMiLCAic3JjL2xpYnMvZnMvU3RvcmFnZS50cyIsICJzcmMvbGlicy9tb2RhbHMvUmliYm9uTW9kYWwudHMiLCAic3JjL2xpYnMvbW9kYWxzL0ZpbGVzSGlzdG9yeU1vZGFsLnRzIiwgInNyYy9saWJzL21vZGFscy9WZXJzaW9uSGlzdG9yeU1vZGFsLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJtb2R1bGUuZXhwb3J0cyA9IGNsYXNzIEV2ZW50RW1pdHRlciB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMuY2FsbGJhY2tzID0ge307XG5cdFx0dGhpcy5jYWxsYmFja3Nfb25jZSA9IHt9O1xuXHR9XG5cblx0b24oZXZlbnQsIGNiKSB7XG5cdFx0aWYgKCF0aGlzLmNhbGxiYWNrc1tldmVudF0pXG5cdFx0XHR0aGlzLmNhbGxiYWNrc1tldmVudF0gPSBbXTtcblx0XHR0aGlzLmNhbGxiYWNrc1tldmVudF0ucHVzaChjYilcblx0fVxuXG5cdG9mZihldmVudCwgY2IpIHtcblx0XHRpZih0aGlzLmNhbGxiYWNrc1tldmVudF0pIHtcblx0XHRcdHRoaXMuY2FsbGJhY2tzW2V2ZW50XSA9IHRoaXMuY2FsbGJhY2tzW2V2ZW50XS5maWx0ZXIoaXRlbSA9PiBpdGVtICE9PSBjYik7XG5cdFx0fVxuXHR9XG5cblx0cmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGNiKSB7XG5cdFx0dGhpcy5vZmYoZXZlbnQsIGNiKTtcblx0fVxuXG5cdHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkge1xuXHRcdGlmKGV2ZW50ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHRoaXMuY2FsbGJhY2tzID0ge307XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlbGV0ZSB0aGlzLmNhbGxiYWNrc1tldmVudF07XG5cdFx0fVxuXHR9XG5cblx0b25jZShldmVudCwgY2IpIHtcblx0XHRpZiAoIXRoaXMuY2FsbGJhY2tzX29uY2VbZXZlbnRdKVxuXHRcdFx0dGhpcy5jYWxsYmFja3Nfb25jZVtldmVudF0gPSBbXTtcblx0XHR0aGlzLmNhbGxiYWNrc19vbmNlW2V2ZW50XS5wdXNoKGNiKVxuXHR9XG5cblx0ZW1pdChldmVudCwgLi4uYXJncykge1xuXHRcdGxldCBjYnMgPSB0aGlzLmNhbGxiYWNrc1tldmVudF07XG5cdFx0aWYgKGNicykge1xuXHRcdFx0Y2JzLmZvckVhY2goY2IgPT4gY2IoLi4uYXJncykpO1xuXHRcdH1cblxuXHRcdGNicyA9IHRoaXMuY2FsbGJhY2tzX29uY2VbZXZlbnRdO1xuXHRcdGlmIChjYnMpIHtcblx0XHRcdGNicy5mb3JFYWNoKGNiID0+IGNiKC4uLmFyZ3MpKTtcblx0XHRcdGRlbGV0ZSB0aGlzLmNhbGxiYWNrc19vbmNlW2V2ZW50XTtcblx0XHR9XG5cdH1cbn07XG4iLCAiaW1wb3J0IHtcblx0UGx1Z2luLFxuXHRQbHVnaW5TZXR0aW5nVGFiLFxuXHRTZXR0aW5nXG59IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCBYU3luYyBmcm9tICcuL1hTeW5jJztcbmltcG9ydCB7UmliYm9uTW9kYWx9IGZyb20gXCIuL2xpYnMvbW9kYWxzL1JpYmJvbk1vZGFsXCI7XG5pbXBvcnQge1ZlcnNpb25IaXN0b3J5TW9kYWx9IGZyb20gXCIuL2xpYnMvbW9kYWxzL1ZlcnNpb25IaXN0b3J5TW9kYWxcIjtcblxuaW50ZXJmYWNlIEFueVNvY2tldFN5bmNTZXR0aW5ncyB7XG5cdGhvc3Q6IHN0cmluZztcblx0cG9ydDogc3RyaW5nO1xuXHRwYXNzd29yZDogc3RyaW5nO1xufVxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBBbnlTb2NrZXRTeW5jU2V0dGluZ3MgPSB7XG5cdGhvc3Q6ICcxMjcuMC4wLjEnLFxuXHRwb3J0OiBcIjMwMDBcIixcblx0cGFzc3dvcmQ6IFwiXCJcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW55U29ja2V0U3luY1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG5cdFZFUlNJT04gPSBcIl9fYW55c29ja2V0c3luY192ZXJzaW9uX19cIjtcblx0QlVJTEQgPSBcIl9fYW55c29ja2V0c3luY19idWlsZF9fXCI7XG5cdHNldHRpbmdzOiBBbnlTb2NrZXRTeW5jU2V0dGluZ3M7XG5cdHhTeW5jOiBYU3luYztcblx0cmliYm9uSWNvbjogSFRNTEVsZW1lbnQ7XG5cdGlzTG9hZGluZyA9IGZhbHNlO1xuXG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50KHRoaXMuYXBwLndvcmtzcGFjZS5vbihcImZpbGUtbWVudVwiLCAobWVudSwgZmlsZSkgPT4ge1xuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0Ly8gaWYgZm9sZGVyLCByZXR1cm5cblx0XHRcdGlmKCFmaWxlLnN0YXQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0bWVudS5hZGRJdGVtKChpdGVtKSA9PiB7XG5cdFx0XHRcdGl0ZW1cblx0XHRcdFx0XHQuc2V0VGl0bGUoXCJWZXJzaW9uIEhpc3RvcnlcIilcblx0XHRcdFx0XHQuc2V0SWNvbihcImhpc3RvcnlcIilcblx0XHRcdFx0XHQub25DbGljayhhc3luYyAoKSA9PiB7XG5cdFx0XHRcdFx0XHRuZXcgVmVyc2lvbkhpc3RvcnlNb2RhbCh0aGlzLCBmaWxlLnBhdGgpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fSkpO1xuXG5cdFx0dGhpcy5yaWJib25JY29uID0gdGhpcy5hZGRSaWJib25JY29uKCdwYXBlci1wbGFuZScsICdBbnlTb2NrZXQgU3luYycsIGFzeW5jIChldnQ6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRcdChuZXcgUmliYm9uTW9kYWwodGhpcykpLm9wZW4oKTtcblx0XHR9KTtcblx0XHR0aGlzLnJpYmJvbkljb24uc3R5bGUuY29sb3IgPSBcInJlZFwiO1xuXG5cdFx0Ly8gVGhpcyBhZGRzIGEgc2V0dGluZ3MgdGFiIHNvIHRoZSB1c2VyIGNhbiBjb25maWd1cmUgdmFyaW91cyBhc3BlY3RzIG9mIHRoZSBwbHVnaW5cblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IEFueVNvY2tldFN5bmNTZXR0aW5nVGFiKHRoaXMpKTtcblxuXHRcdHRoaXMueFN5bmMgPSBuZXcgWFN5bmModGhpcyk7XG5cdFx0YXdhaXQgdGhpcy54U3luYy5lbmFibGVkKHRydWUpO1xuXG5cblx0fVxuXG5cdGFzeW5jIG9udW5sb2FkKCkge1xuXHRcdGF3YWl0IHRoaXMueFN5bmMuZW5hYmxlZChmYWxzZSk7XG5cdH1cblxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG5cdH1cblxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblx0fVxufVxuXG5jbGFzcyBBbnlTb2NrZXRTeW5jU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuXHRwbHVnaW46IEFueVNvY2tldFN5bmNQbHVnaW47XG5cblx0Y29uc3RydWN0b3IocGx1Z2luOiBBbnlTb2NrZXRTeW5jUGx1Z2luKSB7XG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xuXHR9XG5cblx0ZGlzcGxheSgpOiB2b2lkIHtcblx0XHRjb25zdCB7Y29udGFpbmVyRWx9ID0gdGhpcztcblxuXHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7dGV4dDogJ1NldHRpbmdzJ30pO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnSG9zdCcpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCcxMjcuMC4wLjEnKVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaG9zdClcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmhvc3QgPSB2YWx1ZTtcblx0XHRcdFx0fSkpO1xuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ1BvcnQnKVxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XG5cdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignMzAwMCcpXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5wb3J0KVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucG9ydCA9IHZhbHVlO1xuXHRcdFx0XHR9KSk7XG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnUGFzc3dvcmQnKVxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB7XG5cdFx0XHRcdFx0dGV4dFxuXHRcdFx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdwYXNzJylcblx0XHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXNzd29yZClcblx0XHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucGFzc3dvcmQgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHRleHQuaW5wdXRFbC50eXBlID0gXCJwYXNzd29yZFwiO1xuXHRcdFx0XHR9XG5cdFx0XHQpXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuYWRkQnV0dG9uKChidXR0b24pID0+XG5cdFx0XHRcdGJ1dHRvbi5zZXRCdXR0b25UZXh0KFwiU2F2ZVwiKS5vbkNsaWNrKGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi54U3luYy5yZWxvYWQoKTtcblx0XHRcdFx0fSlcblx0XHRcdCk7XG5cdH1cbn1cbiIsICIvLyBAdHMtbm9jaGVja1xuaW1wb3J0IHtcblx0VEFic3RyYWN0RmlsZSxcblx0UGx1Z2luLCBOb3RpY2UsXG59IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IEFueXNvY2tldE1hbmFnZXIgZnJvbSBcIi4vbGlicy9Bbnlzb2NrZXRNYW5hZ2VyXCI7XG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4vbGlicy9VdGlsc1wiO1xuaW1wb3J0IFN0b3JhZ2UgZnJvbSBcIi4vbGlicy9mcy9TdG9yYWdlXCI7XG5pbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSBcInV0aWxcIjtcblxuY29uc3QgREVCVUcgPSB0cnVlO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhTeW5jIHtcblx0cGx1Z2luOiBQbHVnaW47XG5cdGlzRW5hYmxlZCA9IGZhbHNlO1xuXHRldmVudFJlZnM6IGFueSA9IHt9O1xuXHRhbnlzb2NrZXQ6IGFueTtcblx0c3RvcmFnZTogU3RvcmFnZSA9IG5ldyBTdG9yYWdlKCk7XG5cdHJlbG9hZFRpbWVvdXQgPSBudWxsO1xuXHRkZXZpY2VOYW1lOiBcIlVua25vd25cIjtcblxuXHRjb25zdHJ1Y3RvcihwbHVnaW46IFBsdWdpbikge1xuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xuXHRcdHRoaXMuYW55c29ja2V0ID0gbmV3IEFueXNvY2tldE1hbmFnZXIodGhpcyk7XG5cblx0XHQvKiByZWFsdGltZSBDUkRUIHN5bmNcblx0XHR0aGlzLnBsdWdpbi5yZWdpc3RlckVkaXRvckV4dGVuc2lvbihcblx0XHRcdEVkaXRvclZpZXcudXBkYXRlTGlzdGVuZXIub2YoKHVwZGF0ZSkgPT4ge1xuXHRcdFx0XHRpZiAodXBkYXRlLmNoYW5nZXMpIHtcblx0XHRcdFx0XHQvLyBJdGVyYXRlIG92ZXIgdGhlIGNoYW5nZXNcblx0XHRcdFx0XHR1cGRhdGUuY2hhbmdlcy5pdGVyQ2hhbmdlcygoZnJvbUEsIHRvQSwgZnJvbUIsIHRvQiwgaW5zZXJ0ZWQpID0+IHtcblx0XHRcdFx0XHRcdGlmIChmcm9tQSA9PT0gdG9BICYmIGZyb21CICE9PSB0b0IpIHtcblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhbiBpbnNlcnRpb25cblx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coXCJJbnNlcnRpb24gZGV0ZWN0ZWQgZnJvbVwiLCBmcm9tQiwgXCJ0b1wiLCB0b0IsIFwiOlwiLCBpbnNlcnRlZC50b1N0cmluZygpKTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoZnJvbUEgIT09IHRvQSAmJiBmcm9tQiA9PT0gdG9CKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBkZWxldGlvblxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIkRlbGV0aW9uIGRldGVjdGVkIGZyb21cIiwgZnJvbUEsIFwidG9cIiwgdG9BKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSByZXBsYWNlIChkZWxldGlvbiBmb2xsb3dlZCBieSBhbiBpbnNlcnRpb24pXG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiUmVwbGFjZSBkZXRlY3RlZCBmcm9tXCIsIGZyb21BLCBcInRvXCIsIHRvQSwgXCJ3aXRoXCIsIGluc2VydGVkLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdCk7XG5cdFx0ICovXG5cdH1cblxuXHRhc3luYyBlbmFibGVkKHZhbHVlKSB7XG5cdFx0aWYgKHRoaXMuaXNFbmFibGVkICE9PSB2YWx1ZSkge1xuXHRcdFx0dGhpcy5pc0VuYWJsZWQgPSB2YWx1ZTtcblx0XHRcdHRoaXMuYW55c29ja2V0LmlzRW5hYmxlZCA9IHZhbHVlO1xuXHRcdFx0aWYgKHRoaXMuaXNFbmFibGVkKSB7XG5cdFx0XHRcdGF3YWl0IHRoaXMubG9hZChmYWxzZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLnVubG9hZChmYWxzZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0YXN5bmMgbGlzdFZlcnNpb25IaXN0b3J5KHBhdGgsIGNhbGxiYWNrKSB7XG5cdFx0aWYgKCF0aGlzLmlzRW5hYmxlZCkge1xuXHRcdFx0cmV0dXJuIG5ldyBOb3RpY2UoXCJcdUQ4M0RcdURGRTEgQW55U29ja2V0IFN5bmMgLSBQbHVnaW4gaXMgZGlzYWJsZWRcIik7XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLmFueXNvY2tldC5pc0Nvbm5lY3RlZCkge1xuXHRcdFx0cmV0dXJuIG5ldyBOb3RpY2UoXCJcdUQ4M0RcdURGRTEgQW55U29ja2V0IFN5bmMgLSBOb3QgQ29ubmVjdGVkXCIpO1xuXHRcdH1cblxuXHRcdHRoaXMuYW55c29ja2V0LnNlbmQoe1xuXHRcdFx0dHlwZTogXCJmaWxlX2hpc3RvcnlcIixcblx0XHRcdGRhdGE6IHtcblx0XHRcdFx0dHlwZTogXCJsaXN0X3ZlcnNpb25zXCIsXG5cdFx0XHRcdHBhdGg6IHBhdGgsXG5cdFx0XHR9XG5cdFx0fSwgKHBhY2tldCkgPT4ge1xuXHRcdFx0Y2FsbGJhY2socGFja2V0Lm1zZyk7XG5cdFx0fSk7XG5cdH1cblxuXHRhc3luYyByZWFkVmVyc2lvbkhpc3RvcnkocGF0aCwgdGltZXN0YW1wLCBjYWxsYmFjaykge1xuXHRcdGlmICghdGhpcy5pc0VuYWJsZWQpIHtcblx0XHRcdHJldHVybiBuZXcgTm90aWNlKFwiXHVEODNEXHVERkUxIEFueVNvY2tldCBTeW5jIC0gUGx1Z2luIGlzIGRpc2FibGVkXCIpO1xuXHRcdH1cblxuXHRcdGlmICghdGhpcy5hbnlzb2NrZXQuaXNDb25uZWN0ZWQpIHtcblx0XHRcdHJldHVybiBuZXcgTm90aWNlKFwiXHVEODNEXHVERkUxIEFueVNvY2tldCBTeW5jIC0gTm90IENvbm5lY3RlZFwiKTtcblx0XHR9XG5cblx0XHR0aGlzLmFueXNvY2tldC5zZW5kKHtcblx0XHRcdHR5cGU6IFwiZmlsZV9oaXN0b3J5XCIsXG5cdFx0XHRkYXRhOiB7XG5cdFx0XHRcdHR5cGU6IFwicmVhZFwiLFxuXHRcdFx0XHRwYXRoOiBwYXRoLFxuXHRcdFx0XHR0aW1lc3RhbXA6IHRpbWVzdGFtcFxuXHRcdFx0fVxuXHRcdH0sIChwYWNrZXQpID0+IHtcblx0XHRcdGNhbGxiYWNrKHBhY2tldC5tc2cpO1xuXHRcdH0pO1xuXHR9XG5cblx0YXN5bmMgbGlzdEZpbGVzSGlzdG9yeShkZWxldGVkT25seSwgY2FsbGJhY2spIHtcblx0XHRpZiAoIXRoaXMuaXNFbmFibGVkKSB7XG5cdFx0XHRyZXR1cm4gbmV3IE5vdGljZShcIlx1RDgzRFx1REZFMSBBbnlTb2NrZXQgU3luYyAtIFBsdWdpbiBpcyBkaXNhYmxlZFwiKTtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuYW55c29ja2V0LmlzQ29ubmVjdGVkKSB7XG5cdFx0XHRyZXR1cm4gbmV3IE5vdGljZShcIlx1RDgzRFx1REZFMSBBbnlTb2NrZXQgU3luYyAtIE5vdCBDb25uZWN0ZWRcIik7XG5cdFx0fVxuXG5cdFx0dGhpcy5hbnlzb2NrZXQuc2VuZCh7XG5cdFx0XHR0eXBlOiBcImZpbGVfaGlzdG9yeVwiLFxuXHRcdFx0ZGF0YToge1xuXHRcdFx0XHR0eXBlOiBcImxpc3RfZmlsZXNcIixcblx0XHRcdFx0bW9kZTogZGVsZXRlZE9ubHkgPyBcImRlbGV0ZWRcIjogXCJhbGxcIlxuXHRcdFx0fVxuXHRcdH0sIChwYWNrZXQpID0+IHtcblx0XHRcdGNhbGxiYWNrKHBhY2tldC5tc2cpO1xuXHRcdH0pO1xuXHR9XG5cblx0YXN5bmMgc3luYygpIHtcblx0XHRERUJVRyAmJiBjb25zb2xlLmxvZyhcInN5bmNcIik7XG5cdFx0bGV0IGRhdGEgPSBbXTtcblx0XHRhd2FpdCB0aGlzLnN0b3JhZ2UuaXRlcmF0ZShhc3luYyAoaXRlbTogYW55KSA9PiB7XG5cdFx0XHRsZXQgbXRpbWUgPSBudWxsO1xuXHRcdFx0aWYgKGl0ZW0uY2hpbGRyZW4gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRtdGltZSA9IGl0ZW0uc3RhdC5tdGltZTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRtdGltZSA9IGF3YWl0IHRoaXMuZ2V0Rm9sZGVyTXRpbWUoaXRlbSk7XG5cdFx0XHRcdC8vIHNraXAgZW1wdHkgZm9sZGVyc1xuXHRcdFx0XHRpZihtdGltZSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0bGV0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZ2V0TWV0YWRhdGEoXCJzeW5jXCIsIGl0ZW0sIG10aW1lKTtcblx0XHRcdGRhdGEucHVzaCh7XG5cdFx0XHRcdHBhdGg6IGl0ZW0ucGF0aCxcblx0XHRcdFx0bWV0YWRhdGE6IHJlc3VsdC5tZXRhZGF0YVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHR0aGlzLmFueXNvY2tldC5zZW5kKHtcblx0XHRcdHR5cGU6IFwic3luY1wiLFxuXHRcdFx0ZGF0YTogZGF0YVxuXHRcdH0pO1xuXHR9XG5cblx0Ly8gY3JlYXRlLCBtb2RpZnksIGRlbGV0ZSwgcmVuYW1lXG5cdGFzeW5jIHByb2Nlc3NMb2NhbEV2ZW50KGFjdGlvbjogc3RyaW5nLCBmaWxlOiBUQWJzdHJhY3RGaWxlLCBhcmdzOiBhbnkpIHtcblx0XHRpZiAoYWN0aW9uID09IFwicmVuYW1lXCIpIHtcblx0XHRcdGF3YWl0IHRoaXMucHJvY2Vzc0xvY2FsRXZlbnQoXCJkZWxldGVcIiwge3BhdGg6IGFyZ3NbMF19KVxuXHRcdFx0YXdhaXQgdGhpcy5wcm9jZXNzTG9jYWxFdmVudChcImNyZWF0ZVwiLCBmaWxlKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0REVCVUcgJiYgY29uc29sZS5sb2coXCJldmVudFwiLCBhY3Rpb24sIGZpbGUucGF0aCk7XG5cblx0XHR0cnkge1xuXHRcdFx0bGV0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZ2V0TWV0YWRhdGEoYWN0aW9uLCBmaWxlKTtcblx0XHRcdGlmICghcmVzdWx0LmNoYW5nZWQpXG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0aWYgKCF0aGlzLmFueXNvY2tldC5pc0Nvbm5lY3RlZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHJlc3VsdC5tZXRhZGF0YS5wYXRoID0gZmlsZS5wYXRoO1xuXHRcdFx0dGhpcy5hbnlzb2NrZXQuc2VuZCh7XG5cdFx0XHRcdHR5cGU6IFwiZmlsZV9ldmVudFwiLFxuXHRcdFx0XHRkYXRhOiByZXN1bHQubWV0YWRhdGFcblx0XHRcdH0pO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoZSk7XG5cdFx0fVxuXHR9XG5cblx0cmVnaXN0ZXJFdmVudCh0eXBlOiBhbnkpIHtcblx0XHR0aGlzLmV2ZW50UmVmc1t0eXBlXSA9IGFwcC52YXVsdC5vbih0eXBlLCBhc3luYyAoZmlsZSwgLi4uYXJncykgPT4ge1xuXHRcdFx0aWYgKCF0aGlzLmlzRW5hYmxlZClcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRhd2FpdCB0aGlzLnByb2Nlc3NMb2NhbEV2ZW50KHR5cGUsIGZpbGUsIGFyZ3MpO1xuXHRcdH0pO1xuXHR9XG5cblx0dW5yZWdpc3RlckV2ZW50KHR5cGU6IGFueSkge1xuXHRcdGFwcC52YXVsdC5vZmZyZWYodGhpcy5ldmVudFJlZnNbdHlwZV0pXG5cdH1cblxuXHRhc3luYyBsb2FkKCkge1xuXHRcdGlmICghdGhpcy5pc0VuYWJsZWQpXG5cdFx0XHRyZXR1cm47XG5cblx0XHRpZiAodGhpcy5pbml0ZWQgPT0gdHJ1ZSlcblx0XHRcdHJldHVybjtcblx0XHR0aGlzLmluaXRlZCA9IHRydWU7XG5cblx0XHRhd2FpdCB0aGlzLnN0b3JhZ2UuaW5pdCgpO1xuXHRcdGF3YWl0IChhc3luYyAoKSA9PiB7XG5cdFx0XHRsZXQgbG9hZGVkID0gMDtcblx0XHRcdGxldCB0aW1lcyA9IDI7XG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcblx0XHRcdFx0bGV0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0XHRcdGxldCBjdXJyZW50ID0gYXBwLnZhdWx0LmdldEFsbExvYWRlZEZpbGVzKCk7XG5cdFx0XHRcdFx0aWYgKGxvYWRlZCA8IGN1cnJlbnQubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRsb2FkZWQgPSBjdXJyZW50Lmxlbmd0aDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGxvYWRlZCA9PSBjdXJyZW50Lmxlbmd0aCAmJiAtLXRpbWVzIDw9IDApIHtcblx0XHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuXHRcdFx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSwgNTAwKTtcblx0XHRcdH0pO1xuXHRcdH0pKCk7XG5cblx0XHQvLyB3YWl0IGZvciB2YXVsdCBjcmVhdGlvbiBiZWZvcmUgcmVnaXN0ZXJpbmcgdG8gZXZlbnRzXG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50KFwiY3JlYXRlXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJFdmVudChcIm1vZGlmeVwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXCJkZWxldGVcIik7XG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50KFwicmVuYW1lXCIpO1xuXG5cdFx0dGhpcy5hbnlzb2NrZXQub24oXCJjb25uZWN0ZWRcIiwgYXN5bmMgKHBlZXIpID0+IHtcblx0XHRcdG5ldyBOb3RpY2UoXCJcdUQ4M0RcdURGRTIgQW55U29ja2V0IFN5bmMgLSBDb25uZWN0ZWRcIik7XG5cdFx0XHR0aGlzLnBsdWdpbi5yaWJib25JY29uLnN0eWxlLmNvbG9yID0gXCJcIjtcblxuXHRcdFx0bGV0IHN5bmNQbHVnaW4gPSBhcHAuaW50ZXJuYWxQbHVnaW5zLnBsdWdpbnNbXCJzeW5jXCJdLmluc3RhbmNlO1xuXHRcdFx0bGV0IGRldmljZU5hbWUgPSBzeW5jUGx1Z2luLmRldmljZU5hbWUgPyBzeW5jUGx1Z2luLmRldmljZU5hbWUgOiBzeW5jUGx1Z2luLmdldERlZmF1bHREZXZpY2VOYW1lKCk7XG5cblx0XHRcdGF3YWl0IHBlZXIucnBjLnNldERldmljZUlkKGRldmljZU5hbWUpO1xuXHRcdFx0YXdhaXQgdGhpcy5zeW5jKCk7XG5cdFx0fSk7XG5cblx0XHR0aGlzLmFueXNvY2tldC5vbihcIm1lc3NhZ2VcIiwgKHBhY2tldCkgPT4ge1xuXHRcdFx0c3dpdGNoIChwYWNrZXQubXNnLnR5cGUpIHtcblx0XHRcdFx0Y2FzZSBcImZpbGVfZGF0YVwiOlxuXHRcdFx0XHRcdHRoaXMub25GaWxlRGF0YShwYWNrZXQubXNnLmRhdGEsIHBhY2tldC5wZWVyKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9KTtcblx0XHR0aGlzLmFueXNvY2tldC5vbihcInJlbG9hZFwiLCB0aGlzLnJlbG9hZC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLmFueXNvY2tldC5vbihcInVubG9hZFwiLCB0aGlzLnVubG9hZC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLmFueXNvY2tldC5vbihcImRpc2Nvbm5lY3RlZFwiLCAoKSA9PiB7XG5cdFx0XHRuZXcgTm90aWNlKFwiXHVEODNEXHVERDM0IEFueVNvY2tldCBTeW5jIC0gTG9zdCBjb25uZWN0aW9uXCIpO1xuXHRcdFx0dGhpcy5wbHVnaW4ucmliYm9uSWNvbi5zdHlsZS5jb2xvciA9IFwicmVkXCI7XG5cblx0XHRcdERFQlVHICYmIGNvbnNvbGUubG9nKFwiZGlzY29ubmVjdGVkXCIpO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5hbnlzb2NrZXQuaW5pdCgpO1xuXHR9XG5cblx0dW5sb2FkKCkge1xuXHRcdGNsZWFyVGltZW91dCh0aGlzLnJlbG9hZFRpbWVvdXQpO1xuXG5cdFx0aWYgKHRoaXMuaW5pdGVkID09IGZhbHNlKVxuXHRcdFx0cmV0dXJuO1xuXHRcdHRoaXMuaW5pdGVkID0gZmFsc2U7XG5cblx0XHR0aGlzLnVucmVnaXN0ZXJFdmVudChcImNyZWF0ZVwiKTtcblx0XHR0aGlzLnVucmVnaXN0ZXJFdmVudChcIm1vZGlmeVwiKTtcblx0XHR0aGlzLnVucmVnaXN0ZXJFdmVudChcImRlbGV0ZVwiKTtcblx0XHR0aGlzLnVucmVnaXN0ZXJFdmVudChcInJlbmFtZVwiKTtcblxuXHRcdHRoaXMuYW55c29ja2V0LnN0b3AoKTtcblxuXHRcdHRoaXMuYW55c29ja2V0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuXHRcdHRoaXMucGx1Z2luLnJpYmJvbkljb24uc3R5bGUuY29sb3IgPSBcInJlZFwiO1xuXHR9XG5cblx0cmVsb2FkKCkge1xuXHRcdERFQlVHICYmIGNvbnNvbGUubG9nKFwicmVsb2FkZWRcIik7XG5cdFx0dGhpcy51bmxvYWQoKTtcblx0XHR0aGlzLnJlbG9hZFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdHRoaXMubG9hZCgpO1xuXHRcdH0sIDEwMDApO1xuXHR9XG5cblx0YXN5bmMgb25GaWxlRGF0YShkYXRhLCBwZWVyKSB7XG5cdFx0REVCVUcgJiYgY29uc29sZS5sb2coXCJGaWxlRGF0YTpcIiwgZGF0YSk7XG5cdFx0aWYgKGRhdGEudHlwZSA9PSBcInNlbmRcIikge1xuXHRcdFx0dGhpcy5hbnlzb2NrZXQuc2VuZCh7XG5cdFx0XHRcdHR5cGU6IFwiZmlsZV9kYXRhXCIsXG5cdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHR0eXBlOiBcImFwcGx5XCIsXG5cdFx0XHRcdFx0ZGF0YTogYXdhaXQgdGhpcy5zdG9yYWdlLnJlYWQoZGF0YS5wYXRoKSxcblx0XHRcdFx0XHRwYXRoOiBkYXRhLnBhdGgsXG5cdFx0XHRcdFx0bWV0YWRhdGE6IGF3YWl0IHRoaXMuc3RvcmFnZS5yZWFkTWV0YWRhdGEoZGF0YS5wYXRoKVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9IGVsc2UgaWYgKGRhdGEudHlwZSA9PSBcImFwcGx5XCIpIHtcblx0XHRcdHN3aXRjaCAoZGF0YS5tZXRhZGF0YS5hY3Rpb24pIHtcblx0XHRcdFx0Y2FzZSBcImNyZWF0ZWRcIjpcblx0XHRcdFx0XHRpZiAoZGF0YS5tZXRhZGF0YS50eXBlID09IFwiZm9sZGVyXCIpIHtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMuc3RvcmFnZS5tYWtlRm9sZGVyKGRhdGEucGF0aCwgZGF0YS5tZXRhZGF0YSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMuc3RvcmFnZS53cml0ZShkYXRhLnBhdGgsIGRhdGEuZGF0YSwgZGF0YS5tZXRhZGF0YSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZGVsZXRlZFwiOlxuXHRcdFx0XHRcdGF3YWl0IHRoaXMuc3RvcmFnZS5kZWxldGUoZGF0YS5wYXRoLCBkYXRhLm1ldGFkYXRhKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKGRhdGEudHlwZSA9PSBcInN5bmNcIikge1xuXHRcdFx0REVCVUcgJiYgY29uc29sZS5sb2coXCJzeW5jXCIsIGRhdGEpO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGFzeW5jIGdldE1ldGFkYXRhKGFjdGlvbiwgZmlsZSwgaXRlbVRpbWUpIHtcblx0XHRsZXQgdHlwZVRvQWN0aW9uID0ge1xuXHRcdFx0XCJzeW5jXCI6IFwiY3JlYXRlZFwiLFxuXHRcdFx0XCJyZXN0b3JlXCI6IFwiY3JlYXRlZFwiLFxuXHRcdFx0XCJjcmVhdGVcIjogXCJjcmVhdGVkXCIsXG5cdFx0XHRcIm1vZGlmeVwiOiBcImNyZWF0ZWRcIixcblx0XHRcdFwicmVuYW1lXCI6IFwiY3JlYXRlZFwiLFxuXHRcdFx0XCJkZWxldGVcIjogXCJkZWxldGVkXCJcblx0XHR9XG5cblx0XHRsZXQgaXRlbVR5cGU7XG5cdFx0bGV0IGl0ZW1EYXRhO1xuXHRcdGlmIChhY3Rpb24gPT0gXCJyZXN0b3JlXCIpIHtcblx0XHRcdGl0ZW1EYXRhID0gZmlsZTtcblx0XHRcdGl0ZW1UeXBlID0gXCJmaWxlXCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGl0ZW1EYXRhID0gYXdhaXQgdGhpcy5zdG9yYWdlLnJlYWQoZmlsZS5wYXRoKTtcblx0XHRcdGl0ZW1UeXBlID0gZmlsZS5zdGF0ID8gXCJmaWxlXCIgOiBcImZvbGRlclwiO1xuXHRcdH1cblxuXHRcdGxldCBtZXRhZGF0YSA9IHtcblx0XHRcdGFjdGlvbjogdHlwZVRvQWN0aW9uW2FjdGlvbl0sXG5cdFx0XHRzaGExOiBhd2FpdCBVdGlscy5nZXRTSEEoaXRlbURhdGEpLFxuXHRcdFx0bXRpbWU6IGl0ZW1UaW1lIHx8IGF3YWl0IHRoaXMuYW55c29ja2V0LmdldFRpbWUoKSxcblx0XHRcdHR5cGU6IGl0ZW1UeXBlXG5cdFx0fTtcblxuXHRcdGlmKGFjdGlvbiA9PSBcInJlc3RvcmVcIikge1xuXHRcdFx0cmV0dXJuIG1ldGFkYXRhO1xuXHRcdH1cblxuXHRcdC8vIGlmIHRoZSBzdG9yZWRNZXRhZGF0YSAoc2hhMSkgaXMgdGhlIHNhbWUgYXMgdGhlIGN1cnJlbnQgb25lXG5cdFx0Ly8gdGhpcyBtZWFucyB0aGF0IHdlIGp1c3Qgd3JvdGUgdGhpcyBmaWxlLCBzbyB3ZSBza2lwXG5cdFx0bGV0IHN0b3JlZE1ldGFkYXRhID0gYXdhaXQgdGhpcy5zdG9yYWdlLnJlYWRNZXRhZGF0YShmaWxlLnBhdGgpO1xuXHRcdGlmIChzdG9yZWRNZXRhZGF0YSAmJiBtZXRhZGF0YS5hY3Rpb24gPT0gc3RvcmVkTWV0YWRhdGEuYWN0aW9uICYmIG1ldGFkYXRhLnNoYTEgPT0gc3RvcmVkTWV0YWRhdGEuc2hhMSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0Y2hhbmdlZDogZmFsc2UsXG5cdFx0XHRcdG1ldGFkYXRhOiBzdG9yZWRNZXRhZGF0YVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRhd2FpdCB0aGlzLnN0b3JhZ2Uud3JpdGVNZXRhZGF0YShmaWxlLnBhdGgsIG1ldGFkYXRhKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRjaGFuZ2VkOiB0cnVlLFxuXHRcdFx0bWV0YWRhdGE6IG1ldGFkYXRhXG5cdFx0fTtcblx0fVxuXG5cdGFzeW5jIGdldEZvbGRlck10aW1lKGZpbGUpIHtcblx0XHRpZihmaWxlLnN0YXQpIHtcblx0XHRcdHJldHVybiBmaWxlLnN0YXQubXRpbWU7XG5cdFx0fVxuXG5cdFx0aWYoZmlsZS5jaGlsZHJlbi5sZW5ndGggPD0gMCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGxldCBoYXNWYWx1ZSA9IGZhbHNlO1xuXHRcdGxldCBtaW5NdGltZSA9IGF3YWl0IHRoaXMuYW55c29ja2V0LmdldFRpbWUoKTtcblx0XHRmb3IobGV0IGNoaWxkIG9mIGZpbGUuY2hpbGRyZW4pIHtcblx0XHRcdGxldCBtdGltZSA9IGF3YWl0IHRoaXMuZ2V0Rm9sZGVyTXRpbWUoY2hpbGQpO1xuXHRcdFx0aWYobXRpbWUgPT0gZmFsc2UpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmKG1pbk10aW1lID4gbXRpbWUpIHtcblx0XHRcdFx0aGFzVmFsdWUgPSB0cnVlO1xuXHRcdFx0XHRtaW5NdGltZSA9IG10aW1lO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBoYXNWYWx1ZSA/IG1pbk10aW1lIDogZmFsc2U7XG5cdH1cbn1cbiIsICIvLyBAdHMtbm9jaGVja1xuaW1wb3J0IHtOb3RpY2UsIFBsdWdpbn0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgQW55U29ja2V0TG9hZGVyIGZyb20gXCIuL0FueVNvY2tldExvYWRlclwiO1xuaW1wb3J0IFV0aWxzIGZyb20gXCIuL1V0aWxzXCI7XG5pbXBvcnQgWFN5bmMgZnJvbSBcIi4uL1hTeW5jXCI7XG5jb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCcuL0V2ZW50cycpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbnlzb2NrZXRNYW5hZ2VyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcblx0cGx1Z2luOiBQbHVnaW47XG5cdHhTeW5jOiBYU3luYztcblx0ZXZlbnRSZWZzOiBhbnkgPSB7fTtcblx0YW55c29ja2V0OiBhbnk7XG5cdGlzQ29ubmVjdGVkOiBib29sZWFuID0gZmFsc2U7XG5cdG5vdGlmaWVkT2ZDb25uZWN0RXJyb3IgPSBmYWxzZTtcblx0cGVlciA9IG51bGw7XG5cblx0Y29uc3RydWN0b3IoeFN5bmM6IFhTeW5jKSB7XG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMueFN5bmMgPSB4U3luYztcblx0XHR0aGlzLnBsdWdpbiA9IHhTeW5jLnBsdWdpbjtcblx0XHRBbnlTb2NrZXRMb2FkZXIubG9hZCgpO1xuXHRcdHRoaXMuYW55c29ja2V0ID0gbmV3IEFueVNvY2tldCgpO1xuXG5cdFx0Y29uc29sZS5sb2coXCJBbnlTb2NrZXQgU3luYyAoXCIgKyB0aGlzLnBsdWdpbi5WRVJTSU9OICsgXCIpIC0gRW5hYmxlZFwiKTtcblx0XHRpZiAoYXBwLmlzTW9iaWxlKSB7XG5cdFx0XHRhY3RpdmVXaW5kb3cub25ibHVyID0gKCkgPT4ge1xuXHRcdFx0XHR0aGlzLmVtaXQoXCJ1bmxvYWRcIik7XG5cdFx0XHR9O1xuXHRcdFx0YWN0aXZlV2luZG93Lm9uZm9jdXMgPSAoKSA9PiB7XG5cdFx0XHRcdHRoaXMuZW1pdChcInJlbG9hZFwiKTtcblx0XHRcdH07XG5cdFx0fVxuXHR9XG5cblx0YXN5bmMgZ2V0VGltZSgpIHtcblx0XHRyZXR1cm4gRGF0ZS5ub3coKTtcblx0fVxuXG5cdGFzeW5jIGluaXQoKSB7XG5cdFx0dGhpcy5hbnlzb2NrZXQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG5cblx0XHRsZXQgcGFzc3dvcmQgPSBhd2FpdCBVdGlscy5nZXRTSEEodGhpcy5hbnlzb2NrZXQuaWQuc3Vic3RyaW5nKDAsIDE2KSArXG5cdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXNzd29yZCArXG5cdFx0XHR0aGlzLmFueXNvY2tldC5pZC5zdWJzdHJpbmcoMTYpKVxuXG5cdFx0dGhpcy5hbnlzb2NrZXQuYXV0aFBhY2tldCA9ICgpID0+IHtcblx0XHRcdHJldHVybiBwYXNzd29yZDtcblx0XHR9XG5cdFx0dGhpcy5hbnlzb2NrZXQub25BdXRoID0gYXN5bmMgKHBhY2tldCkgPT4ge1xuXHRcdFx0cmV0dXJuIGF3YWl0IFV0aWxzLmdldFNIQShwYWNrZXQuaWQuc3Vic3RyaW5nKDAsIDE2KSArXG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnBhc3N3b3JkICtcblx0XHRcdFx0cGFja2V0LmlkLnN1YnN0cmluZygxNikpID09IHBhY2tldC5hdXRoO1xuXHRcdH1cblxuXHRcdHRoaXMuYW55c29ja2V0Lm9uKFwibWVzc2FnZVwiLCBhc3luYyAocGFja2V0OiBhbnkpID0+IHtcblx0XHRcdHRoaXMuZW1pdChcIm1lc3NhZ2VcIiwgcGFja2V0KTtcblx0XHR9KTtcblxuXHRcdHRoaXMuYW55c29ja2V0Lm9uKFwiZTJlXCIsIGFzeW5jIChwZWVyOiBhbnkpID0+IHtcblx0XHRcdHRoaXMuZ2V0VGltZSA9IGFzeW5jICgpID0+IHtcblx0XHRcdFx0cmV0dXJuIE1hdGgucm91bmQoKGF3YWl0IHBlZXIuZ2V0U3luY2VkVGltZSgpKS50aW1lKTtcblx0XHRcdH1cblx0XHRcdGF3YWl0IHRoaXMuZ2V0VGltZSgpO1xuXG5cdFx0XHRhcHAud29ya3NwYWNlLm9uTGF5b3V0UmVhZHkoYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRhd2FpdCB0aGlzLmNoZWNrRm9yVXBkYXRlcyhwZWVyKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdHRoaXMuYW55c29ja2V0Lm9uKFwiZGlzY29ubmVjdGVkXCIsIChwZWVyOiBhbnkpID0+IHtcblx0XHRcdHRoaXMuaXNDb25uZWN0ZWQgPSBmYWxzZTtcblx0XHRcdHRoaXMucGVlciA9IG51bGw7XG5cdFx0XHR0aGlzLmVtaXQoXCJkaXNjb25uZWN0ZWRcIik7XG5cdFx0XHR0aGlzLmVtaXQoXCJyZWxvYWRcIik7XG5cdFx0fSk7XG5cblx0XHR0aGlzLmNvbm5lY3QoKTtcblx0fVxuXG5cdGFzeW5jIGNoZWNrRm9yVXBkYXRlcyhwZWVyKSB7XG5cdFx0bGV0IHJlc3VsdCA9IGF3YWl0IHBlZXIucnBjLm9uVmVyc2lvbkNoZWNrKHRoaXMucGx1Z2luLlZFUlNJT04sIHRoaXMucGx1Z2luLkJVSUxEKTtcblx0XHRpZihyZXN1bHQudHlwZSA9PSBcIm9rXCIpIHtcblx0XHRcdHRoaXMucGVlciA9IHBlZXI7XG5cdFx0XHR0aGlzLmlzQ29ubmVjdGVkID0gdHJ1ZTtcblx0XHRcdHRoaXMuZW1pdChcImNvbm5lY3RlZFwiLCBwZWVyKTtcblx0XHR9IGVsc2UgaWYgKHJlc3VsdC50eXBlID09IFwidXBkYXRlXCIpIHtcblx0XHRcdGF3YWl0IHRoaXMueFN5bmMuc3RvcmFnZS51cGRhdGVQbHVnaW4ocmVzdWx0LmZpbGVzKTtcblx0XHRcdHdpbmRvdy5fYW55c29ja2V0SUQgPSB0aGlzLmFueXNvY2tldC5pZDtcblx0XHRcdC8vIGlnbm9yZSBkaXNjb25uZWN0ZWQgbWVzc2FnZVxuXHRcdFx0dGhpcy5hbnlzb2NrZXQucmVtb3ZlQWxsTGlzdGVuZXJzKFwiZGlzY29ubmVjdGVkXCIpO1xuXHRcdFx0YXBwLnBsdWdpbnMuZGlzYWJsZVBsdWdpbihcImFueXNvY2tldC1zeW5jXCIpO1xuXHRcdFx0bmV3IE5vdGljZShcIlx1RDgzRFx1REZFMSBBbnlTb2NrZXQgU3luYyAtIFVwZGF0ZWQgdG8gdmVyc2lvbjogXCIgKyByZXN1bHQudmVyc2lvbik7XG5cdFx0XHRhcHAucGx1Z2lucy5lbmFibGVQbHVnaW4oXCJhbnlzb2NrZXQtc3luY1wiKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5hbnlzb2NrZXQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG5cdFx0XHR0aGlzLmVtaXQoXCJ1bmxvYWRcIik7XG5cdFx0XHRuZXcgTm90aWNlKFwiXHVEODNEXHVERkUxIEFueVNvY2tldCBTeW5jIC0gSW5jb21wYXRpYmxlIGNsaWVudCB2ZXJzaW9uIFwiICsgdGhpcy5wbHVnaW4uVkVSU0lPTik7XG5cdFx0fVxuXHR9XG5cblx0Y29ubmVjdCgpIHtcblx0XHRpZighdGhpcy5pc0VuYWJsZWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZighdGhpcy5wbHVnaW4uc2V0dGluZ3MucGFzc3dvcmQpIHtcblx0XHRcdGNvbnNvbGUubG9nKFwiQW55U29ja2V0IFN5bmMgLSBSZXF1aXJlcyBzZXR1cFwiKTtcblx0XHRcdG5ldyBOb3RpY2UoXCJcdUQ4M0RcdURGRTEgQW55U29ja2V0IFN5bmMgLSBSZXF1aXJlcyBzZXR1cFwiKTtcblx0XHRcdHRoaXMuZW1pdChcInVubG9hZFwiKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBVc2VkIG9ubHkgdG8ga2VlcCB0aGUgc2FtZSBBbnlTb2NrZXQgSUQgYWZ0ZXIgaG90IHJlbG9hZFxuXHRcdGlmKHdpbmRvdy5fYW55c29ja2V0SUQpIHtcblx0XHRcdHRoaXMuYW55c29ja2V0LmlkID0gd2luZG93Ll9hbnlzb2NrZXRJRDtcblx0XHRcdGRlbGV0ZSB3aW5kb3cuX2FueXNvY2tldElEO1xuXHRcdH1cblx0XHR0aGlzLmFueXNvY2tldC5jb25uZWN0KFwid3NcIiwgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaG9zdCwgdGhpcy5wbHVnaW4uc2V0dGluZ3MucG9ydCkudGhlbihhc3luYyAocGVlcjogYW55KSA9PiB7XG5cdFx0XHRwZWVyLmUyZSgpO1xuXHRcdFx0dGhpcy5ub3RpZmllZE9mQ29ubmVjdEVycm9yID0gZmFsc2U7XG5cdFx0fSkuY2F0Y2goKGUpID0+IHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJBbnlTb2NrZXQgQ29ubmVjdCBFcnJvclwiLCBlKTtcblx0XHRcdHRoaXMuaXNDb25uZWN0ZWQgPSBmYWxzZTtcblx0XHRcdGlmKCF0aGlzLm5vdGlmaWVkT2ZDb25uZWN0RXJyb3IpIHtcblx0XHRcdFx0dGhpcy5ub3RpZmllZE9mQ29ubmVjdEVycm9yID0gdHJ1ZTtcblx0XHRcdFx0bmV3IE5vdGljZShcIlx1RDgzRFx1REZFMSBBbnlTb2NrZXQgU3luYyAtIENvdWxkIG5vdCBjb25uZWN0IHRvIHRoZSBzZXJ2ZXJcIiwgKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuZW1pdChcInJlbG9hZFwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGFzeW5jIHNlbmQocGFja2V0LCBvblJlcGx5KSB7XG5cdFx0aWYoIXRoaXMucGVlcilcblx0XHRcdHJldHVybjtcblxuXHRcdGlmKG9uUmVwbHkpIHtcblx0XHRcdHBhY2tldCA9IGF3YWl0IHRoaXMucGVlci5zZW5kKHBhY2tldCwgdHJ1ZSk7XG5cdFx0XHRvblJlcGx5KHBhY2tldCk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0cmV0dXJuIGF3YWl0IHRoaXMucGVlci5zZW5kKHBhY2tldCk7XG5cdFx0fVxuXHR9XG5cblx0c3RvcCgpIHtcblx0XHR0aGlzLmFueXNvY2tldC5zdG9wKCk7XG5cdH1cbn1cbiIsICJleHBvcnQgZGVmYXVsdCBjbGFzcyBBbnlTb2NrZXRMb2FkZXIge1xuXHRzdGF0aWMgbG9hZCgpIHtcblx0XHR3aW5kb3cuZXZhbChcInZhciBBbnlTb2NrZXQ7QW55U29ja2V0PSgoKT0+e3ZhciBlPXsxNDc6KGUsdCxzKT0+e2NvbnN0IG49d2luZG93LmNyeXB0b3x8d2luZG93Lm1zQ3J5cHRvO2lmKCFuKXRocm93IG5ldyBFcnJvcihcXFwiQ3J5cHRvIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyIVxcXCIpO2NvbnN0IGk9cygyMCkscj1cXFwiUC01MjFcXFwiO2UuZXhwb3J0cz1uZXcgY2xhc3N7cmFuZG9tQnl0ZXMoZSl7bGV0IHQ9bmV3IFVpbnQ4QXJyYXkoZSk7Zm9yKGxldCBzPTA7czxlO3MrPTY1NTM2KW4uZ2V0UmFuZG9tVmFsdWVzKHQuc3ViYXJyYXkocyxzK01hdGgubWluKGUtcyw2NTUzNikpKTtyZXR1cm4gdH1jcmVhdGVFQ0RIKCl7cmV0dXJuIG5ldyBQcm9taXNlKChhc3luYyhlLHQpPT57d2luZG93LmNyeXB0by5zdWJ0bGUuZ2VuZXJhdGVLZXkoe25hbWU6XFxcIkVDREhcXFwiLG5hbWVkQ3VydmU6cn0sITEsW1xcXCJkZXJpdmVLZXlcXFwiLFxcXCJkZXJpdmVCaXRzXFxcIl0pLnRoZW4oKGZ1bmN0aW9uKHQpe2Uoe2dlbmVyYXRlS2V5czooKT0+bmV3IFByb21pc2UoKChlLHMpPT57d2luZG93LmNyeXB0by5zdWJ0bGUuZXhwb3J0S2V5KFxcXCJyYXdcXFwiLHQucHVibGljS2V5KS50aGVuKChmdW5jdGlvbih0KXt0PW5ldyBVaW50OEFycmF5KHQpLGUodCl9KSkuY2F0Y2goKGZ1bmN0aW9uKGUpe3MoZSl9KSl9KSksY29tcHV0ZVNlY3JldDplPT5uZXcgUHJvbWlzZSgoKHMsbik9Pnt3aW5kb3cuY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXFxcInJhd1xcXCIsZSx7bmFtZTpcXFwiRUNESFxcXCIsbmFtZWRDdXJ2ZTpyfSwhMSxbXSkudGhlbigoZnVuY3Rpb24oZSl7d2luZG93LmNyeXB0by5zdWJ0bGUuZGVyaXZlQml0cyh7bmFtZTpcXFwiRUNESFxcXCIsbmFtZWRDdXJ2ZTpyLHB1YmxpYzplfSx0LnByaXZhdGVLZXksNTEyKS50aGVuKChlPT57ZT1uZXcgVWludDhBcnJheShlKSxzKGkuYnVmZmVyVG9IZXgoZSkpfSkpfSkpLmNhdGNoKChmdW5jdGlvbihlKXtuKGUpfSkpfSkpfSl9KSkuY2F0Y2goKGZ1bmN0aW9uKGUpe3QoZSl9KSl9KSl9cGJrZGYyU3luYyhlLHQscyxuLHIpe2xldCBvPXtzaGEyNTY6XFxcIlNIQS0yNTZcXFwifTtpZighb1tyXSl0aHJvdyBuZXcgRXJyb3IoXFxcIkludmFsaWQgYWxnb3JpdGhtIFxcXCIrcik7cmV0dXJuIHI9b1tyXSxuZXcgUHJvbWlzZSgoYXN5bmMobyxjKT0+e2UgaW5zdGFuY2VvZiBDcnlwdG9LZXl8fChlPWF3YWl0IHdpbmRvdy5jcnlwdG8uc3VidGxlLmltcG9ydEtleShcXFwicmF3XFxcIixpLnV0ZjhFbmNvZGUoZSkse25hbWU6XFxcIlBCS0RGMlxcXCJ9LCExLFtcXFwiZGVyaXZlS2V5XFxcIixcXFwiZGVyaXZlQml0c1xcXCJdKSksd2luZG93LmNyeXB0by5zdWJ0bGUuZGVyaXZlQml0cyh7bmFtZTpcXFwiUEJLREYyXFxcIixzYWx0OmkudXRmOEVuY29kZSh0KSxpdGVyYXRpb25zOnMsaGFzaDp7bmFtZTpyfX0sZSw4Km4pLnRoZW4oKGZ1bmN0aW9uKGUpe28obmV3IFVpbnQ4QXJyYXkoZSkpfSkpLmNhdGNoKChmdW5jdGlvbihlKXtjKGUpfSkpfSkpfX19LDk1NDplPT57ZS5leHBvcnRzPSgpPT4oKT0+e319LDY5OigpPT57fSwyNjc6ZT0+e2UuZXhwb3J0cz1jbGFzc3tjb25zdHJ1Y3Rvcigpe3RoaXMuY2FsbGJhY2tzPXt9LHRoaXMuY2FsbGJhY2tzX29uY2U9e319b24oZSx0KXt0aGlzLmNhbGxiYWNrc1tlXXx8KHRoaXMuY2FsbGJhY2tzW2VdPVtdKSx0aGlzLmNhbGxiYWNrc1tlXS5wdXNoKHQpfW9mZihlLHQpe3RoaXMuY2FsbGJhY2tzW2VdJiYodGhpcy5jYWxsYmFja3NbZV09dGhpcy5jYWxsYmFja3NbZV0uZmlsdGVyKChlPT5lIT09dCkpKX1yZW1vdmVMaXN0ZW5lcihlLHQpe3RoaXMub2ZmKGUsdCl9cmVtb3ZlQWxsTGlzdGVuZXJzKGUpe3ZvaWQgMD09PWU/dGhpcy5jYWxsYmFja3M9e306ZGVsZXRlIHRoaXMuY2FsbGJhY2tzW2VdfW9uY2UoZSx0KXt0aGlzLmNhbGxiYWNrc19vbmNlW2VdfHwodGhpcy5jYWxsYmFja3Nfb25jZVtlXT1bXSksdGhpcy5jYWxsYmFja3Nfb25jZVtlXS5wdXNoKHQpfWVtaXQoZSwuLi50KXtsZXQgcz10aGlzLmNhbGxiYWNrc1tlXTtzJiZzLmZvckVhY2goKGU9PmUoLi4udCkpKSxzPXRoaXMuY2FsbGJhY2tzX29uY2VbZV0scyYmKHMuZm9yRWFjaCgoZT0+ZSguLi50KSkpLGRlbGV0ZSB0aGlzLmNhbGxiYWNrc19vbmNlW2VdKX19fSw2NjE6KGUsdCxzKT0+e2NvbnN0IG49cyg1MTApLGk9cygyMCk7bi5lbmNyeXB0QUVTPShlLHQpPT5uZXcgUHJvbWlzZSgoKHMsbik9Pnt3aW5kb3cuY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXFxcInJhd1xcXCIsaS5idWZmZXJGcm9tSGV4KGUpLHtuYW1lOlxcXCJBRVMtQ0JDXFxcIixsZW5ndGg6MjU2fSwhMSxbXFxcImVuY3J5cHRcXFwiXSkudGhlbigoZT0+e2xldCByPXdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KDE2KSk7d2luZG93LmNyeXB0by5zdWJ0bGUuZW5jcnlwdCh7bmFtZTpcXFwiQUVTLUNCQ1xcXCIsaXY6cn0sZSxpLmJ1ZmZlckZyb21TdHJpbmcodCkpLnRoZW4oKGZ1bmN0aW9uKGUpe3MoaS5idWZmZXJUb0hleChyKStpLmJ1ZmZlclRvSGV4KG5ldyBVaW50OEFycmF5KGUpKSl9KSkuY2F0Y2goKGZ1bmN0aW9uKGUpe24oZSl9KSl9KSkuY2F0Y2gobil9KSksbi5kZWNyeXB0QUVTPShlLHQpPT5uZXcgUHJvbWlzZSgoKHMsbik9Pnt3aW5kb3cuY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXFxcInJhd1xcXCIsaS5idWZmZXJGcm9tSGV4KGUpLHtuYW1lOlxcXCJBRVMtQ0JDXFxcIixsZW5ndGg6MjU2fSwhMSxbXFxcImRlY3J5cHRcXFwiXSkudGhlbigoZT0+e3dpbmRvdy5jcnlwdG8uc3VidGxlLmRlY3J5cHQoe25hbWU6XFxcIkFFUy1DQkNcXFwiLGl2OmkuYnVmZmVyRnJvbUhleCh0LnN1YnN0cigwLDMyKSl9LGUsaS5idWZmZXJGcm9tSGV4KHQuc3Vic3RyKDMyKSkpLnRoZW4oKGZ1bmN0aW9uKGUpe3MoaS5idWZmZXJUb1N0cmluZyhuZXcgVWludDhBcnJheShlKSkpfSkpLmNhdGNoKChlPT57bihlKX0pKX0pKS5jYXRjaCgoZT0+e24oZSl9KSl9KSksZS5leHBvcnRzPW59LDIwOmU9PntlLmV4cG9ydHM9e3V0ZjhFbmNvZGUoZSl7bGV0IHQ9W10scz1lLmxlbmd0aCxuPTA7Zm9yKDtuPHM7KXtsZXQgcz1lLmNvZGVQb2ludEF0KG4pLGk9MCxyPTA7Zm9yKHM8PTEyNz8oaT0wLHI9MCk6czw9MjA0Nz8oaT02LHI9MTkyKTpzPD02NTUzNT8oaT0xMixyPTIyNCk6czw9MjA5NzE1MSYmKGk9MTgscj0yNDApLHQucHVzaChyfHM+PmkpLGktPTY7aT49MDspdC5wdXNoKDEyOHxzPj5pJjYzKSxpLT02O24rPXM+PTY1NTM2PzI6MX1yZXR1cm4gbmV3IFVpbnQ4QXJyYXkodCl9LGJ1ZmZlckZyb21TdHJpbmcoZSl7bGV0IHQ9bmV3IEFycmF5QnVmZmVyKGUubGVuZ3RoKSxzPW5ldyBVaW50OEFycmF5KHQpO2ZvcihsZXQgdD0wLG49ZS5sZW5ndGg7dDxuO3QrKylzW3RdPWUuY2hhckNvZGVBdCh0KTtyZXR1cm4gdH0sYnVmZmVyVG9TdHJpbmcoZSl7bGV0IHQ9XFxcIlxcXCI7aWYoZSl7bGV0IHM9bmV3IFVpbnQ4QXJyYXkoZSk7Zm9yKGxldCBlPTA7ZTxzLmJ5dGVMZW5ndGg7ZSsrKXQrPVN0cmluZy5mcm9tQ2hhckNvZGUoc1tlXSl9cmV0dXJuIHR9LGJ1ZmZlclRvSGV4KGUpe3JldHVybiBlLnJlZHVjZSgoKGUsdCk9PmUrdGhpcy5pMmhleCh0KSksXFxcIlxcXCIpfSxpMmhleDplPT4oXFxcIjBcXFwiK2UudG9TdHJpbmcoMTYpKS5zbGljZSgtMiksYnVmZmVyRnJvbUhleChlKXtsZXQgdD1uZXcgVWludDhBcnJheShlLmxlbmd0aC8yKTtmb3IobGV0IHM9MDtzPGUubGVuZ3RoO3MrPTIpdFtzLzJdPXBhcnNlSW50KGUuc3Vic3RyaW5nKHMscysyKSwxNik7cmV0dXJuIHR9LGlzQnVmZmVyOmU9PiEhKGUuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXImJmUuQllURVNfUEVSX0VMRU1FTlQpfX0sOTY2OmU9PntlLmV4cG9ydHM9Y2xhc3N7Y29uc3RydWN0b3IoLi4uZSl7dGhpcy53cz1uZXcgV2ViU29ja2V0KC4uLmUpfW9uKGUsdCl7c3dpdGNoKGUpe2Nhc2VcXFwib3BlblxcXCI6dGhpcy53cy5vbm9wZW49dDticmVhaztjYXNlXFxcImVycm9yXFxcIjp0aGlzLndzLm9uZXJyb3I9dDticmVhaztjYXNlXFxcIm1lc3NhZ2VcXFwiOnRoaXMud3Mub25tZXNzYWdlPWU9Pnt0KGUuZGF0YSl9O2JyZWFrO2Nhc2VcXFwiY2xvc2VcXFwiOnRoaXMud3Mub25jbG9zZT10O2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFxcXCJOb3QgaW1wbGVtZW50ZWQgaW4gYnJvd3NlciEgKFxcXCIrZStcXFwiKVxcXCIpfX1zZW5kKC4uLmUpe3RoaXMud3Muc2VuZChlKX1jbG9zZSgpe3RoaXMud3MuY2xvc2UoKX10ZXJtaW5hdGUoKXt9fX0sNTA2OihlLHQscyk9Pntjb25zdCBuPXMoMTAwKSxpPXMoNTU1KTtuLlRyYW5zcG9ydD17V1M6cyg4NjYpLEhUVFA6cyg2OSl9LG4uUGFja2VyPXtwYWNrOmkucGFja0J5dGVzLmJpbmQoaSksdW5wYWNrOmkudW5wYWNrQnl0ZXMuYmluZChpKX0sZS5leHBvcnRzPW59LDExNzplPT57ZS5leHBvcnRzPWNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5yb3V0ZXM9e186W119LHRoaXMucm91dGVzUmVnZXhwPXtfOltdfSx0aGlzLl91cGdyYWRlQ2FsbGJhY2s9bnVsbCx0aGlzLl9wcm9jZXNzPXRoaXMuX3Byb2Nlc3MuYmluZCh0aGlzKSx0aGlzLl9wcm9jZXNzVXBncmFkZT10aGlzLl9wcm9jZXNzVXBncmFkZS5iaW5kKHRoaXMpfW9uKGUsdCxzKXtyZXR1cm4gdCBpbnN0YW5jZW9mIFJlZ0V4cD8odGhpcy5yb3V0ZXNSZWdleHBbZV18fCh0aGlzLnJvdXRlc1JlZ2V4cFtlXT1bXSksdGhpcy5yb3V0ZXNSZWdleHBbZV0ucHVzaCh7cGF0aDp0LGNiOnN9KSk6KHRoaXMucm91dGVzW2VdfHwodGhpcy5yb3V0ZXNbZV09e30pLHRoaXMucm91dGVzW2VdW3RdPXMpLHRoaXN9dXBncmFkZShlKXtyZXR1cm4gdGhpcy5fdXBncmFkZUNhbGxiYWNrPWUsdGhpc31hbnkoZSx0KXtyZXR1cm4gdGhpcy5vbihcXFwiX1xcXCIsZSx0KX1nZXQoZSx0KXtyZXR1cm4gdGhpcy5vbihcXFwiZ2V0XFxcIixlLHQpfXBvc3QoZSx0KXtyZXR1cm4gdGhpcy5vbihcXFwicG9zdFxcXCIsZSx0KX1kZWxldGUoZSx0KXtyZXR1cm4gdGhpcy5vbihcXFwiZGVsZXRlXFxcIixlLHQpfWVycm9yKGUpe3RoaXMub25FcnJvcj1lfV9wcm9jZXNzVXBncmFkZShlKXt0cnl7aWYoIXRoaXMuX3VwZ3JhZGVDYWxsYmFjaylyZXR1cm47dGhpcy5fdXBncmFkZUNhbGxiYWNrKGUpfWNhdGNoKHQpe3JldHVybiB0aGlzLl9maW5pc2goZSx0KX19X3Byb2Nlc3MoZSl7dHJ5e2lmKHRoaXMucm91dGVzLl9bZS51cmxdKXJldHVybiB0aGlzLnJvdXRlcy5fW2UudXJsXShlKSwhMDtpZih0aGlzLnJvdXRlc1tlLnF1ZXJ5Lm1ldGhvZF0mJnRoaXMucm91dGVzW2UucXVlcnkubWV0aG9kXVtlLnVybF0pcmV0dXJuIHRoaXMucm91dGVzW2UucXVlcnkubWV0aG9kXVtlLnVybF0oZSksITA7Zm9yKGxldCB0IG9mIHRoaXMucm91dGVzUmVnZXhwLl8paWYodC5wYXRoLnRlc3QoZS51cmwpKXJldHVybiB0LmNiKGUpLCEwO2lmKHRoaXMucm91dGVzUmVnZXhwW2UucXVlcnkubWV0aG9kXSlmb3IobGV0IHQgb2YgdGhpcy5yb3V0ZXNSZWdleHBbZS5xdWVyeS5tZXRob2RdKWlmKHQucGF0aC50ZXN0KGUudXJsKSlyZXR1cm4gdC5jYihlKSwhMH1jYXRjaCh0KXtyZXR1cm4gdGhpcy5fZmluaXNoKGUsdCl9dGhpcy5fZmluaXNoKGUsbmV3IEVycm9yKFxcXCJObyByb3V0ZSBmb3IgcGF0aDogJ1xcXCIrZS51cmwrXFxcIidcXFwiKSl9X2ZpbmlzaChlLHQpe3RoaXMub25FcnJvciYmdGhpcy5vbkVycm9yKGUsdCksZS5pc0Nsb3NlZCgpfHxlLnN0YXR1cyg0MDQpLmVuZCgpfX19LDQyMDplPT57ZS5leHBvcnRzPWNsYXNze2NvbnN0cnVjdG9yKGUpe3RoaXMuYW55c29ja2V0PWV9fX0sNTU1OihlLHQscyk9Pntjb25zdCBuPXMoMjApO2UuZXhwb3J0cz1uZXcgY2xhc3N7cGFja0ludDMyKGUpe2NvbnN0IHQ9bmV3IEFycmF5QnVmZmVyKDQpO3JldHVybiBuZXcgRGF0YVZpZXcodCkuc2V0SW50MzIoMCxlLCExKSxTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxuZXcgVWludDhBcnJheSh0KSl9dW5wYWNrSW50MzIoZSl7Y29uc3QgdD1uZXcgQXJyYXlCdWZmZXIoNCkscz1uZXcgVWludDhBcnJheSh0KTtmb3IobGV0IHQgaW4gZSlzW3RdPWUuY2hhckNvZGVBdCh0KTtyZXR1cm4gbmV3IERhdGFWaWV3KHQpLmdldEludDMyKDApfXBhY2tIZXgoZSl7bGV0IHQ9XFxcIlxcXCI7Zm9yKGxldCBzPTA7czxlLmxlbmd0aDtzKz0yKXQrPVN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoZS5zdWJzdHIocywyKSwxNikpO3JldHVybiB0fXVucGFja0hleChlKXtsZXQgdD1cXFwiXFxcIjtmb3IobGV0IHM9MDtzPGUubGVuZ3RoO3MrKyl7bGV0IG49TnVtYmVyKGUuY2hhckNvZGVBdChzKSkudG9TdHJpbmcoMTYpO3QrPTE9PT1uLmxlbmd0aD9cXFwiMFxcXCIrbjpufXJldHVybiB0fXBhY2tCeXRlcyhlKXtpZighKGUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcnx8ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKXRocm93IG5ldyBFcnJvcihcXFwicGFja0J5dGVzIHJlcXVpcmVzIEFycmF5QnVmZmVyIG9yIFVJbnQ4QXJyYXlcXFwiKTtyZXR1cm4gbi5idWZmZXJUb1N0cmluZyhlKX11bnBhY2tCeXRlcyhlKXtyZXR1cm4gbi5idWZmZXJGcm9tU3RyaW5nKGUpfX19LDcxNzooZSx0LHMpPT57cyg5NTQpKFxcXCJBbnlQYWNrZXRcXFwiKTtjb25zdCBuPVN5bWJvbChcXFwic2VuZCBmdW5jdGlvblxcXCIpO2UuZXhwb3J0cz1jbGFzc3tjb25zdHJ1Y3RvcihlLHQscyl7dGhpcy5wZWVyPWUsdGhpcy5zZXE9dC5zZXEsdGhpcy5tc2c9dC5kYXRhLHRoaXNbbl09c31yZXBseShlKXt0aGlzW25dKGUsdGhpcy5zZXEpfX19LDE1NTooZSx0LHMpPT57Y29uc3Qgbj1zKDk1NCkoXFxcIkFueVBlZXJcXFwiKSxpPXMoNTAxKSxyPXMoMjY3KSxvPXMoNTU4KSxjPXMoNzE3KSxoPXMoNTU1KSxhPVN5bWJvbChcXFwicHJpdmF0ZSBwcm90b2NvbFxcXCIpLHU9U3ltYm9sKFxcXCJwYWNrZXRzXFxcIiksbD1TeW1ib2woXFxcImxpbmtzXFxcIiksZD1zKDIwKSxwPWZ1bmN0aW9uKGUpe3JldHVybiEwPT09ZXx8ITE9PT1lfHxcXFwiW29iamVjdCBCb29sZWFuXVxcXCI9PT10b1N0cmluZy5jYWxsKGUpfTtlLmV4cG9ydHM9Y2xhc3MgZXh0ZW5kcyBye2NvbnN0cnVjdG9yKGUpe3N1cGVyKCksdGhpc1tsXT17fSx0aGlzW2FdPWUsdGhpc1t1XT17fSx0aGlzLmlkPWUucGVlcklELHRoaXMuY29ubmVjdGlvbklEPWUuY29ubmVjdGlvbklELHRoaXMuc3luY2VkVGltZT1udWxsLHRoaXMub3B0aW9ucz1lLm9wdGlvbnM7Y29uc3QgdD17Z2V0OihlLHMpPT57Y29uc3Qgbj1lW3NdO3JldHVybiBudWxsIT1uP246KGUucGF0aHx8KGUucGF0aD1bXSksZS5wYXRoLnB1c2gocyksbmV3IFByb3h5KGUse2dldDp0LmdldCxhcHBseTooZSx0LHMpPT57bGV0IG49ZS5wYXRoO3JldHVybiBlLnBhdGg9W10sbmV3IFByb21pc2UoKChlLHQpPT57bGV0IHI9W107Zm9yKGxldCBlIGluIHMpZC5pc0J1ZmZlcihzW2VdKSYmKHNbZV09aC5wYWNrQnl0ZXMoc1tlXSksci5wdXNoKGUpKTtjb25zdCBjPW8uZGF0YSh7dHlwZTppLklOVEVSTkFMX1BBQ0tFVF9UWVBFLlJQQyxtZXRob2Q6bixwYXJhbXM6c3x8bnVsbCxiaW46cn0pLnNldFR5cGUoaS5QQUNLRVRfVFlQRS5JTlRFUk5BTCk7dGhpcy5fc2VuZChjLCEwKS50aGVuKChzPT57aWYocy5tc2cuZXJyb3IpdChzLm1zZyk7ZWxzZXtsZXQgdD1zLm1zZy5yZXN1bHQ7cy5tc2cuYmluJiYodD1oLnVucGFja0J5dGVzKHQpKSxlKHQpfX0pKS5jYXRjaCgoZT0+e3QoYy5tc2cpfSkpfSkpfX0pKX19O3RoaXMucnBjPW5ldyBQcm94eSgoKCk9Pnt9KSx0KSxlLm9uKFxcXCJpbnRlcm5hbFxcXCIsdGhpcy5vbkludGVybmFsQ29tcy5iaW5kKHRoaXMpKSxlLm9uKFxcXCJtZXNzYWdlXFxcIix0aGlzLm9uTWVzc2FnZS5iaW5kKHRoaXMpKSxlLm9uKFxcXCJlMmVcXFwiLCgoKT0+e3RoaXMub25FMkUoKX0pKSxlLm9uKFxcXCJkaXNjb25uZWN0ZWRcXFwiLCgoZSx0KT0+e3RoaXMuZW1pdChcXFwiZGlzY29ubmVjdGVkXFxcIixlLHQpfSkpfWlzUHJveHkoKXtyZXR1cm4gdGhpc1thXS5pc1Byb3h5KCl9YWRkTGluayhlKXt0aGlzW2xdW2UuaWRdPWV9cmVtb3ZlTGluayhlKXtkZWxldGUgdGhpc1tsXVtlLmlkXX1nZXRMaW5rcygpe3JldHVybiB0aGlzW2xdfWdldFN5bmNlZFRpbWUoZSl7cmV0dXJuIGU9ZXx8ITEsbmV3IFByb21pc2UoKCh0LHMpPT57aWYoIWUmJnRoaXMuc3luY2VkVGltZSl0KE9iamVjdC5hc3NpZ24oe3RpbWU6RGF0ZS5ub3coKSt0aGlzLnN5bmNlZFRpbWUub2Zmc2V0fSx0aGlzLnN5bmNlZFRpbWUpKTtlbHNle2xldCBlPURhdGUubm93KCk7dGhpcy5zZW5kSW50ZXJuYWwoe3R5cGU6aS5JTlRFUk5BTF9QQUNLRVRfVFlQRS5TWU5DRURfVElNRSx0aW1lOmV9LCEwKS50aGVuKChlPT57Y29uc3Qgcz1lLm1zZy5vLG49ZS5tc2cudCxpPWUubXNnLnQscj1EYXRlLm5vdygpO3RoaXMuc3luY2VkVGltZT17cnR0OnItcy0oaS1uKSxvZmZzZXQ6KG4tcysoaS1yKSkvMn0sdChPYmplY3QuYXNzaWduKHt0aW1lOkRhdGUubm93KCkrdGhpcy5zeW5jZWRUaW1lLm9mZnNldH0sdGhpcy5zeW5jZWRUaW1lKSl9KSkuY2F0Y2gocyl9fSkpfWUyZSgpe3RoaXNbYV0uZTJlKCl9aXNFMkVFbmFibGVkKCl7cmV0dXJuIHRoaXNbYV0uaGFzRTJFRW5hYmxlZCgpfXNlbmQoZSx0LHMpe2NvbnN0IG49by5kYXRhKGUpLnNldFR5cGUoaS5QQUNLRVRfVFlQRS5MSU5LKTtyZXR1cm4gdGhpcy5fc2VuZChuLHQscyl9Zm9yd2FyZChlKXt0aGlzW2FdLmZvcndhcmQoZSl9c2VuZEludGVybmFsKGUsdCxzKXtjb25zdCBuPW8uZGF0YShlKS5zZXRUeXBlKGkuUEFDS0VUX1RZUEUuSU5URVJOQUwpO3JldHVybiB0aGlzLl9zZW5kKG4sdCxzKX1vbk1lc3NhZ2UoZSx0KXt0LnNlcTwwP3RoaXMuX3Jlc29sdmVSZXBseSh0KXx8bihcXFwiRHJvcHBlZCByZXBseSBcXFwiK3Quc2VxK1xcXCIuIERlbGl2ZXJlZCBhZnRlciBUaW1lb3V0XFxcIik6dGhpcy5lbWl0KFxcXCJtZXNzYWdlXFxcIixuZXcgYyh0aGlzLHQsdGhpcy5zZW5kLmJpbmQodGhpcykpKX1vbkUyRSgpe3RoaXMuZW1pdChcXFwiZTJlXFxcIix0aGlzKX1vbkludGVybmFsQ29tcyhlLHQpe3Quc2VxPDA/dGhpcy5fcmVzb2x2ZVJlcGx5KHQpfHxuKFxcXCJEcm9wcGVkIHJlcGx5IFxcXCIrdC5zZXErXFxcIi4gRGVsaXZlcmVkIGFmdGVyIFRpbWVvdXRcXFwiKTp0LnR5cGU9PWkuUEFDS0VUX1RZUEUuSU5URVJOQUw/dGhpcy5lbWl0KFxcXCJpbnRlcm5hbFxcXCIsbmV3IGModGhpcyx0LHRoaXMuc2VuZEludGVybmFsLmJpbmQodGhpcykpKTpuKFxcXCJEcm9wcGVkIGludGVybmFsIHBhY2tldCFcXFwiLHQpfWRpc2Nvbm5lY3QoZSl7Zm9yKGxldCBlIGluIHRoaXNbdV0pY2xlYXJUaW1lb3V0KHRoaXNbdV1bZV0udGltZW91dCksdGhpc1t1XVtlXS5yZWplY3QoXFxcIlBlZXIgZGlzY29ubmVjdGVkIVxcXCIpO3RoaXNbdV09e30sdGhpc1thXS5kaXNjb25uZWN0KGUpfV9zZW5kKGUsdCxzKXtyZXR1cm4gbmV3IFByb21pc2UoKChuLGkpPT57dGhpc1thXS5pc0Nvbm5lY3RlZCgpPyghcCh0KSYmdCYmdD4wJiZlLnNldFJlcGx5VG8odCksdGhpc1thXS5zZW5kKGUpLHAodCkmJiEwPT09dCYmKHRoaXNbdV1bZS5zZXFdPXt0aW1lOihuZXcgRGF0ZSkuZ2V0VGltZSgpLHJlc29sdmU6bixyZWplY3Q6aSx0aW1lb3V0OnNldFRpbWVvdXQoKCgpPT57aWYodGhpc1t1XVtlLnNlcV0pe2xldCB0PXRoaXNbdV1bZS5zZXFdO2RlbGV0ZSB0aGlzW3VdW2Uuc2VxXSx0aGlzLmRpc2Nvbm5lY3QoXFxcIk1pc3NlZCByZXBseSB0aW1lb3V0ISBQYWNrZXQgVHlwZTogXFxcIitvLlRZUEUuX3N0cmluZyhlLnR5cGUpK1xcXCIgLSBcXFwiK2Uuc2VxKSx0LnJlamVjdChcXFwiVGltZW91dCFcXFwiKX19KSxzfHx0aGlzW2FdLm9wdGlvbnMucmVwbHlUaW1lb3V0KX0pKTppKFxcXCJDYW5ub3Qgc2VuZCBtZXNzYWdlLiBQZWVyIGlzIGRpc2Nvbm5lY3RlZFxcXCIpfSkpfV9yZWN2Rm9yd2FyZChlKXt0aGlzW2FdLl9yZWN2UGFja2V0UXVldWUucHVzaCh7cGVlcjp0aGlzW2FdLnBlZXIscmVjdjplLm1zZyxzdGF0ZTp0aGlzW2FdLkVOQ1JZUFRJT05fU1RBVEV9KX1fcmVzb2x2ZVJlcGx5KGUpe2lmKGUuc2VxKj0tMSx0aGlzW3VdW2Uuc2VxXSl7Y29uc3QgdD10aGlzW3VdW2Uuc2VxXTtyZXR1cm4gZGVsZXRlIHRoaXNbdV1bZS5zZXFdLGNsZWFyVGltZW91dCh0LnRpbWVvdXQpLHQucmVzb2x2ZShuZXcgYyh0aGlzLGUsKCgpPT57bihcXFwiQ2Fubm90IHJlcGx5IHRvIGEgcmVwbHkgcGFja2V0IVxcXCIpfSkpKSwhMH1yZXR1cm4hMX19fSwyODg6KGUsdCxzKT0+e2NvbnN0IG49cyg5NTQpKFxcXCJBbnlQcm90b2NvbFxcXCIpLGk9cygyNjcpLHI9cygzNzMpLG89cyg1NTgpLGM9cyg2NjEpLGg9cyg1NTUpLGE9cyg1MDEpLHU9U3ltYm9sKFxcXCJzZWNyZXQga2V5XFxcIiksbD1TeW1ib2woXFxcInByaXZhdGUga2V5XFxcIiksZD1TeW1ib2woXFxcIm5vbmNlXFxcIikscD1TeW1ib2woXFxcImhlYXJ0YmVhdCB0aW1lclxcXCIpLFQ9U3ltYm9sKFxcXCJoZWFydGJlYXRzIG1pc3NlZFxcXCIpLEU9U3ltYm9sKFxcXCJoZWFydGJlYXQgcG9uZ2VkXFxcIikseT1TeW1ib2woXFxcImF1dGhUaW1lb3V0XFxcIiksbT1TeW1ib2woXFxcImUyZVRpbWVvdXRcXFwiKTtlLmV4cG9ydHM9Y2xhc3MgZXh0ZW5kcyBpe2NvbnN0cnVjdG9yKGUsdCxzKXtzdXBlcigpLHRoaXMuX3NlcT0wLHRoaXNbdV09bnVsbCx0aGlzW2xdPW51bGwsdGhpc1tkXT1udWxsLHRoaXNbcF09MCx0aGlzW1RdPTAsdGhpc1tFXT0hMCx0aGlzW3ldPSExLHRoaXNbbV09ITEsdGhpcy5wZWVySUQ9dC5pZCx0aGlzLnBlZXI9dCx0aGlzLm9wdGlvbnM9T2JqZWN0LmFzc2lnbih7YXV0aFRpbWVvdXQ6NWUzLGUyZVRpbWVvdXQ6NWUzLHJlcGx5VGltZW91dDozZTQsaGVhcnRiZWF0SW50ZXJ2YWw6NWUzfSxzKSx0aGlzLmNvbm5lY3Rpb25JRD10aGlzLnBlZXIuY29ubmVjdGlvbklELHRoaXMuYW55c29ja2V0PWUsdGhpcy5fcGFja2V0UXVldWU9cih0aGlzLHRoaXMucHJvY2Vzc1BhY2tldFF1ZXVlLmJpbmQodGhpcyksMSksdGhpcy5fbGlua1BhY2tldFF1ZXVlPXIodGhpcyx0aGlzLnByb2Nlc3NMaW5rUGFja2V0UXVldWUuYmluZCh0aGlzKSwxKSx0aGlzLl9yZWN2UGFja2V0UXVldWU9cih0aGlzLHRoaXMucHJvY2Vzc1JlY3ZQYWNrZXRRdWV1ZS5iaW5kKHRoaXMpLDEpLHRoaXMuX3JlY3ZMaW5rUGFja2V0UXVldWU9cih0aGlzLHRoaXMucHJvY2Vzc1JlY3ZMaW5rUGFja2V0UXVldWUuYmluZCh0aGlzKSwxKSx0aGlzLl9wYWNrZXRzPXt9LHRoaXMuY2hhbmdlU3RhdGUoYS5QUk9UT0NPTF9TVEFURVMuRVNUQUJMSVNIRUQpLHRoaXMuRU5DUllQVElPTl9TVEFURT1hLlBST1RPQ09MX0VOQ1JZUFRJT04uUExBSU4sdGhpcy5wZWVyLm9uKFxcXCJtZXNzYWdlXFxcIiwoKGUsdCk9Pnt0aGlzLl9yZWN2UGFja2V0UXVldWUucHVzaCh7cGVlcjplLHJlY3Y6dCxzdGF0ZTp0aGlzLkVOQ1JZUFRJT05fU1RBVEV9KX0pKSx0aGlzLnBlZXIuaXNDbGllbnQoKSYmIXRoaXMucGVlcklEJiYodGhpcy5jaGFuZ2VTdGF0ZShhLlBST1RPQ09MX1NUQVRFUy5BVVRISU5HKSx0aGlzLnNlbmQoby5kYXRhKHtpZDp0aGlzLmFueXNvY2tldC5pZCxhdXRoOnRoaXMuYW55c29ja2V0LmF1dGhQYWNrZXQoKX0pLnNldFR5cGUoby5UWVBFLkFVVEgpKSksdGhpcy5wZWVySUQmJnRoaXMuY2hhbmdlU3RhdGUoYS5QUk9UT0NPTF9TVEFURVMuQ09OTkVDVEVEKX1pc1Byb3h5KCl7cmV0dXJuISF0aGlzLnBlZXIuaXNQcm94eX1pc0Nvbm5lY3RlZCgpe3JldHVybiB0aGlzLnN0YXRlIT1hLlBST1RPQ09MX1NUQVRFUy5ESVNDT05ORUNURUR9c2VuZChlKXtyZXR1cm4gMD09ZS5zZXEmJmUuc2V0U2VxKHRoaXMuX2dldFNlcSgpKSxlLnR5cGUhPW8uVFlQRS5IRUFSVEJFQVQmJnRoaXMuX2hlYXJ0YmVhdCgpLG5ldyBQcm9taXNlKCgodCxzKT0+e2NvbnN0IG49ZT0+e3RoaXMuZGlzY29ubmVjdChlKSxzKGUpfTt0aGlzLmlzTElOS01lc3NhZ2UoZS50eXBlKT90aGlzLl9saW5rUGFja2V0UXVldWUucHVzaCh7cGFja2V0OmUscmVzb2x2ZTp0LHJlamVjdDpufSk6dGhpcy5fc2VuZChlLHQsbil9KSl9X3NlbmQoZSx0LHMpe24odGhpcy5wZWVySUQsXFxcIj4+Pj5cXFwiLG8uVFlQRS5fc3RyaW5nKGUudHlwZSksZS5zZXEpLGUuc2VyaWFsaXplKGEuTUFYX1BBQ0tFVF9TSVpFLHRoaXMuX2VuY3J5cHQuYmluZCh0aGlzKSkudGhlbigoZT0+e2ZvcihsZXQgbj0wO248ZS5sZW5ndGg7bisrKXtjb25zdCBpPXtwYWNrZXQ6ZVtuXSxyZWplY3Q6c307bj09ZS5sZW5ndGgtMSYmKGkucmVzb2x2ZT10KSx0aGlzLl9wYWNrZXRRdWV1ZS5wdXNoKGkpfX0pKS5jYXRjaChzKX1mb3J3YXJkKGUpe3JldHVybiBuZXcgUHJvbWlzZSgoKHQscyk9Pnt0aGlzLl9wYWNrZXRRdWV1ZS5wdXNoKHtwYWNrZXQ6dGhpcy5fZW5jb2RlRm9yd2FyZFBhY2tldChlLnRvLGUuZnJvbSxlLm1zZykscmVzb2x2ZTp0LHJlamVjdDpzfSl9KSl9aGFzRTJFRW5hYmxlZCgpe3JldHVybiEhdGhpc1tsXX1lMmUoKXtjLmdlbmVyYXRlQUVTS2V5KCkudGhlbigoZT0+e3RoaXNbbF09ZS5wcml2YXRlLHRoaXNbZF09ZS5ub25jZSx0aGlzLmNoYW5nZVN0YXRlKGEuUFJPVE9DT0xfU1RBVEVTLlNXSVRDSElOR19QUk9UT0NPTCksdGhpcy5zZW5kKG8uZGF0YSh7dHlwZTphLlBST1RPQ09MX0VOQ1JZUFRJT04uRTJFRSxrZXk6ZS5wdWJsaWMsbm9uY2U6ZS5ub25jZX0pLnNldFR5cGUoby5UWVBFLlNXSVRDSCkpfSkpLmNhdGNoKChlPT57dGhpcy5kaXNjb25uZWN0KGUpfSkpfW9uUGFja2V0KGUsdCxzKXtyZXR1cm4gdGhpcy5faGVhcnRiZWF0KCksbmV3IFByb21pc2UoKChlLGkpPT57bGV0IHI9ITA7aWYoby5pc0ZvcndhcmRQYWNrZXQodCkpdGhpcy5lbWl0KFxcXCJmb3J3YXJkXFxcIix0aGlzLnBlZXJJRCx0aGlzLl9kZWNvZGVGb3J3YXJkUGFja2V0KHQpKSxlKCk7ZWxzZXtsZXQgaT1vLmdldFNlcSh0KTt0aGlzLl9wYWNrZXRzW2ldfHwodGhpcy5fcGFja2V0c1tpXT1vLmJ1ZmZlcigpKTtsZXQgaD10aGlzLl9wYWNrZXRzW2ldO2guZGVzZXJpYWxpemUodCxzLHRoaXMuX2RlY3J5cHQuYmluZCh0aGlzKSkudGhlbigodD0+e2lmKG4odGhpcy5wZWVySUQsXFxcIjw8PDxcXFwiLG8uVFlQRS5fc3RyaW5nKGgudHlwZSksaC5zZXEpLHQpe3N3aXRjaChkZWxldGUgdGhpcy5fcGFja2V0c1tpXSx0aGlzLnN0YXRlKXtjYXNlIGEuUFJPVE9DT0xfU1RBVEVTLkVTVEFCTElTSEVEOmlmKGgudHlwZT09by5UWVBFLkFVVEgpe2lmKHI9ITEsIWguZGF0YS5pZHx8IXRoaXMuYW55c29ja2V0Lm9uQXV0aChoLmRhdGEpKXJldHVybiB0aGlzLmRpc2Nvbm5lY3QoXFxcIkludmFsaWQgQXV0aCBQYWNrZXQhXFxcIik7dGhpcy5wZWVySUQ9aC5kYXRhLmlkLHRoaXMuc2VuZChvLmRhdGEoe2lkOnRoaXMuYW55c29ja2V0LmlkLGF1dGg6dGhpcy5hbnlzb2NrZXQuYXV0aFBhY2tldCgpfSkuc2V0VHlwZShvLlRZUEUuQVVUSCkpLnRoZW4oKCgpPT57dGhpcy5jaGFuZ2VTdGF0ZShhLlBST1RPQ09MX1NUQVRFUy5DT05ORUNURUQpLHRoaXMuZW1pdChcXFwicmVhZHlcXFwiLHRoaXMpfSkpLGUoKX1icmVhaztjYXNlIGEuUFJPVE9DT0xfU1RBVEVTLkFVVEhJTkc6aWYoaC50eXBlPT1vLlRZUEUuQVVUSCl7aWYocj0hMSx0aGlzLmNoYW5nZVN0YXRlKGEuUFJPVE9DT0xfU1RBVEVTLkNPTk5FQ1RFRCksIWguZGF0YS5pZHx8IXRoaXMuYW55c29ja2V0Lm9uQXV0aChoLmRhdGEpKXJldHVybiB0aGlzLmRpc2Nvbm5lY3QoXFxcIkludmFsaWQgQXV0aCBQYWNrZXQhXFxcIik7dGhpcy5wZWVySUQ9aC5kYXRhLmlkLHRoaXMuZW1pdChcXFwicmVhZHlcXFwiLHRoaXMpLGUoKX1icmVhaztjYXNlIGEuUFJPVE9DT0xfU1RBVEVTLkNPTk5FQ1RFRDpoLnR5cGU9PW8uVFlQRS5MSU5LPyhyPSExLHRoaXMuZW1pdChcXFwibWVzc2FnZVxcXCIsdGhpcyx7c2VxOmguc2VxLGRhdGE6aC5kYXRhfSksZSgpKTpoLnR5cGU9PW8uVFlQRS5JTlRFUk5BTD8ocj0hMSx0aGlzLmVtaXQoXFxcImludGVybmFsXFxcIix0aGlzLHtzZXE6aC5zZXEsdHlwZTpoLnR5cGUsZGF0YTpoLmRhdGF9KSxlKCkpOmgudHlwZT09by5UWVBFLlNXSVRDSD8ocj0hMSxjLmdlbmVyYXRlQUVTS2V5KCkudGhlbigodD0+KHRoaXNbbF09dC5wcml2YXRlLHRoaXNbZF09aC5kYXRhLm5vbmNlK3Qubm9uY2UsYy5nZXRBRVNTZXNzaW9uS2V5KHRoaXNbZF0sdGhpcy5wZWVySUQsMCkudGhlbigocz0+KHRoaXNbZF09cyxjLmNvbXB1dGVBRVNzZWNyZXQodGhpc1tsXSxoLmRhdGEua2V5KS50aGVuKChzPT57dGhpc1t1XT1zLHRoaXMuc2VuZChvLmRhdGEoe3R5cGU6YS5QUk9UT0NPTF9FTkNSWVBUSU9OLkUyRUUsa2V5OnQucHVibGljLG5vbmNlOnQubm9uY2V9KS5zZXRUeXBlKG8uVFlQRS5TV0lUQ0gpKS50aGVuKCgoKT0+e3RoaXMuRU5DUllQVElPTl9TVEFURT1hLlBST1RPQ09MX0VOQ1JZUFRJT04uRTJFRSx0aGlzLmNoYW5nZVN0YXRlKGEuUFJPVE9DT0xfU1RBVEVTLkNPTk5FQ1RFRCksdGhpcy5lbWl0KFxcXCJlMmVcXFwiLHRoaXMpLGUoKX0pKX0pKSkpKSkpKS5jYXRjaCgoZT0+e3RoaXMuZGlzY29ubmVjdChlKX0pKSk6aC50eXBlPT1vLlRZUEUuSEVBUlRCRUFUJiYocj0hMSx0aGlzLl9oZWFydGJlYXRQb25nKGguZGF0YSksZSgpKTticmVhaztjYXNlIGEuUFJPVE9DT0xfU1RBVEVTLlNXSVRDSElOR19QUk9UT0NPTDpoLnR5cGU9PW8uVFlQRS5TV0lUQ0gmJihyPSExLHRoaXNbZF09dGhpc1tkXStoLmRhdGEubm9uY2UsYy5nZXRBRVNTZXNzaW9uS2V5KHRoaXNbZF0sdGhpcy5hbnlzb2NrZXQuaWQsMCkudGhlbigodD0+KHRoaXNbZF09dCxjLmNvbXB1dGVBRVNzZWNyZXQodGhpc1tsXSxoLmRhdGEua2V5KS50aGVuKCh0PT57dGhpc1t1XT10LHRoaXMuRU5DUllQVElPTl9TVEFURT1hLlBST1RPQ09MX0VOQ1JZUFRJT04uRTJFRSx0aGlzLmNoYW5nZVN0YXRlKGEuUFJPVE9DT0xfU1RBVEVTLkNPTk5FQ1RFRCksdGhpcy5lbWl0KFxcXCJlMmVcXFwiLHRoaXMpLGUoKX0pKSkpKS5jYXRjaCgoZT0+e3RoaXMuZGlzY29ubmVjdChlKX0pKSk7YnJlYWs7Y2FzZSBhLlBST1RPQ09MX1NUQVRFUy5ESVNDT05ORUNURUQ6cj0hMSxlKCl9aWYocilyZXR1cm4gY29uc29sZS5sb2coXFxcIkludmFsaWQgcGFja2V0IHJlY2VpdmVkISBSRUNWOlxcXCIsaCksdGhpcy5kaXNjb25uZWN0KFxcXCJJbnZhbGlkIFBhY2tldCFcXFwiKX1lbHNlIGUoKX0pKX19KSl9Y2hhbmdlU3RhdGUoZSl7c3dpdGNoKHRoaXMuc3RhdGU9ZSx0aGlzLnN0YXRlKXtjYXNlIGEuUFJPVE9DT0xfU1RBVEVTLkVTVEFCTElTSEVEOnRoaXNbeV09c2V0VGltZW91dCgoKCk9Pnt0aGlzLmRpc2Nvbm5lY3QoXFxcImF1dGggdGltZWQgb3V0XFxcIil9KSx0aGlzLm9wdGlvbnMuYXV0aFRpbWVvdXQpLHRoaXMuX2xpbmtQYWNrZXRRdWV1ZS5wYXVzZSgpLHRoaXMuX3JlY3ZMaW5rUGFja2V0UXVldWUucGF1c2UoKTticmVhaztjYXNlIGEuUFJPVE9DT0xfU1RBVEVTLkFVVEhJTkc6Y2xlYXJUaW1lb3V0KHRoaXNbeV0pLHRoaXNbeV09ITEsdGhpcy5fbGlua1BhY2tldFF1ZXVlLnBhdXNlKCksdGhpcy5fcmVjdkxpbmtQYWNrZXRRdWV1ZS5wYXVzZSgpO2JyZWFrO2Nhc2UgYS5QUk9UT0NPTF9TVEFURVMuQ09OTkVDVEVEOmNsZWFyVGltZW91dCh0aGlzW3ldKSx0aGlzW3ldPSExLGNsZWFyVGltZW91dCh0aGlzW21dKSx0aGlzW21dPSExLHRoaXMuX2xpbmtQYWNrZXRRdWV1ZS5yZXN1bWUoKSx0aGlzLl9yZWN2TGlua1BhY2tldFF1ZXVlLnJlc3VtZSgpO2JyZWFrO2Nhc2UgYS5QUk9UT0NPTF9TVEFURVMuU1dJVENISU5HX1BST1RPQ09MOnRoaXNbbV09c2V0VGltZW91dCgoKCk9Pnt0aGlzLmRpc2Nvbm5lY3QoXFxcImUyZSB0aW1lZCBvdXRcXFwiKX0pLHRoaXMub3B0aW9ucy5lMmVUaW1lb3V0KSx0aGlzLl9saW5rUGFja2V0UXVldWUucGF1c2UoKSx0aGlzLl9yZWN2TGlua1BhY2tldFF1ZXVlLnBhdXNlKCk7YnJlYWs7Y2FzZSBhLlBST1RPQ09MX1NUQVRFUy5ESVNDT05ORUNURUQ6dGhpcy5fcGFja2V0UXVldWUucGF1c2UoKSx0aGlzLl9wYWNrZXRRdWV1ZS5raWxsKCksdGhpcy5fbGlua1BhY2tldFF1ZXVlLnBhdXNlKCksdGhpcy5fbGlua1BhY2tldFF1ZXVlLmtpbGwoKSx0aGlzLl9yZWN2UGFja2V0UXVldWUucGF1c2UoKSx0aGlzLl9yZWN2UGFja2V0UXVldWUua2lsbCgpLHRoaXMuX3JlY3ZMaW5rUGFja2V0UXVldWUucGF1c2UoKSx0aGlzLl9yZWN2TGlua1BhY2tldFF1ZXVlLmtpbGwoKX19ZGlzY29ubmVjdChlKXt0aGlzLmNoYW5nZVN0YXRlKGEuUFJPVE9DT0xfU1RBVEVTLkRJU0NPTk5FQ1RFRCksdGhpcy5faGVhcnRiZWF0KCksdGhpcy5pc1Byb3h5KCk/dGhpcy5hbnlzb2NrZXQudW5wcm94eSh0aGlzLnBlZXIuaWQsdGhpcy5wZWVyLnNvY2tldC5pZCxlKTp0aGlzLnBlZXIuZGlzY29ubmVjdChlKX1wcm9jZXNzUGFja2V0UXVldWUoZSx0KXt0aGlzLnBlZXIuc2VuZChlLnBhY2tldCkudGhlbigoKCk9PntlLnJlc29sdmUmJmUucmVzb2x2ZSgpLHQobnVsbCxudWxsKX0pKS5jYXRjaCgocz0+e2UucmVqZWN0KHMpLHRoaXMuX3BhY2tldFF1ZXVlLmtpbGwoKSx0KG51bGwsbnVsbCl9KSl9cHJvY2Vzc0xpbmtQYWNrZXRRdWV1ZShlLHQpe3RoaXMuX3NlbmQoZS5wYWNrZXQsZS5yZXNvbHZlLGUucmVqZWN0KSx0KG51bGwsbnVsbCl9cHJvY2Vzc1JlY3ZQYWNrZXRRdWV1ZShlLHQpe28uaXNGb3J3YXJkUGFja2V0KGUucmVjdik/KHRoaXMuZW1pdChcXFwiZm9yd2FyZFxcXCIsdGhpcy5wZWVySUQsdGhpcy5fZGVjb2RlRm9yd2FyZFBhY2tldChlLnJlY3YpKSx0KG51bGwsbnVsbCkpOnRoaXMuaXNMSU5LTWVzc2FnZShvLmdldFR5cGUoZS5yZWN2KSk/KHRoaXMuX3JlY3ZMaW5rUGFja2V0UXVldWUucHVzaChlKSx0KG51bGwsbnVsbCkpOnRoaXMub25QYWNrZXQoZS5wZWVyLGUucmVjdixlLnN0YXRlKS50aGVuKCgoKT0+e3QobnVsbCxudWxsKX0pKX1wcm9jZXNzUmVjdkxpbmtQYWNrZXRRdWV1ZShlLHQpe3RoaXMub25QYWNrZXQoZS5wZWVyLGUucmVjdixlLnN0YXRlKS50aGVuKCgoKT0+e3QobnVsbCxudWxsKX0pKX1fZW5jcnlwdChlLHQpe3JldHVybiBuZXcgUHJvbWlzZSgocz0+e3N3aXRjaCh0aGlzLkVOQ1JZUFRJT05fU1RBVEUpe2Nhc2UgYS5QUk9UT0NPTF9FTkNSWVBUSU9OLlBMQUlOOnMoZSk7YnJlYWs7Y2FzZSBhLlBST1RPQ09MX0VOQ1JZUFRJT04uRTJFRTpjLmdldEFFU1Nlc3Npb25LZXkodGhpc1t1XSx0aGlzW2RdLHQpLnRoZW4oKHQ9PmMuZW5jcnlwdEFFUyh0LGUpLnRoZW4ocykpKS5jYXRjaCgoZT0+e3RoaXMuZGlzY29ubmVjdChlKX0pKTticmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcihcXFwiW2VuY3J5cHRdIEVuY3J5cHRpb24gc3RhdGUgJ1xcXCIrdGhpcy5FTkNSWVBUSU9OX1NUQVRFK1xcXCInIG5vdCBpbXBsZW1lbnRlZCFcXFwiKX19KSl9X2RlY3J5cHQoZSx0LHMpe3JldHVybiBuZXcgUHJvbWlzZSgobj0+e3N3aXRjaChlKXtjYXNlIGEuUFJPVE9DT0xfRU5DUllQVElPTi5QTEFJTjpuKHQpO2JyZWFrO2Nhc2UgYS5QUk9UT0NPTF9FTkNSWVBUSU9OLkUyRUU6Yy5nZXRBRVNTZXNzaW9uS2V5KHRoaXNbdV0sdGhpc1tkXSxzKS50aGVuKChlPT5jLmRlY3J5cHRBRVMoZSx0KS50aGVuKG4pKSkuY2F0Y2goKGU9Pnt0aGlzLmRpc2Nvbm5lY3QoZSl9KSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXFxcIltkZWNyeXB0XSBFbmNyeXB0aW9uIHN0YXRlICdcXFwiK2UrXFxcIicgbm90IGltcGxlbWVudGVkIVxcXCIpfX0pKX1fZW5jb2RlRm9yd2FyZFBhY2tldChlLHQscyl7cmV0dXJuIG8uVFlQRS5GT1JXQVJEK2gucGFja0hleChlKStoLnBhY2tIZXgodCkrc31fZGVjb2RlRm9yd2FyZFBhY2tldChlKXtyZXR1cm57dG86aC51bnBhY2tIZXgoZS5zdWJzdHIoMSwxNikpLGZyb206aC51bnBhY2tIZXgoZS5zdWJzdHIoMTcsMTYpKSxtc2c6ZS5zdWJzdHIoMzMpfX1fZ2V0U2VxKCl7cmV0dXJuIHRoaXMuX3NlcT49MjE0NzQ4MzY0NyYmKHRoaXMuX3NlcT0wKSx0aGlzLl9zZXErKyx0aGlzLl9zZXF9X2hlYXJ0YmVhdCgpe3RoaXMuaXNQcm94eSgpfHwoY2xlYXJUaW1lb3V0KHRoaXNbcF0pLHRoaXMuc3RhdGUhPWEuUFJPVE9DT0xfU1RBVEVTLkFVVEhJTkcmJnRoaXMuc3RhdGUhPWEuUFJPVE9DT0xfU1RBVEVTLkRJU0NPTk5FQ1RFRCYmKHRoaXNbcF09c2V0VGltZW91dCgoKCk9PntpZighdGhpc1tFXSlyZXR1cm4gdGhpc1tUXSsrLHRoaXNbVF0+PTI/dm9pZCB0aGlzLmRpc2Nvbm5lY3QoXFxcIk1pc3NlZCBIZWFydGJlYXRzXFxcIik6dm9pZCB0aGlzLl9oZWFydGJlYXQoKTt0aGlzW1RdPTAsdGhpc1tFXT0hMTtjb25zdCBlPW8uZGF0YSgxKS5zZXRUeXBlKG8uVFlQRS5IRUFSVEJFQVQpO3RoaXMuc2VuZChlKS5jYXRjaCgoZT0+e24oXFxcIkhlYXJ0YmVhdCBFcnJvcjpcXFwiLGUpLHRoaXMuZGlzY29ubmVjdChlKX0pKX0pLHRoaXMub3B0aW9ucy5oZWFydGJlYXRJbnRlcnZhbCkpKX1faGVhcnRiZWF0UG9uZyhlKXtpZigxPT1lKXtjb25zdCBlPW8uZGF0YSgyKS5zZXRUeXBlKG8uVFlQRS5IRUFSVEJFQVQpO3RoaXMuc2VuZChlKS5jYXRjaCgoZT0+e24oXFxcIkhlYXJ0YmVhdCBFcnJvcjpcXFwiLGUpLHRoaXMuZGlzY29ubmVjdChlKX0pKX1lbHNlIHRoaXNbRV09ITB9aXNMSU5LTWVzc2FnZShlKXtyZXR1cm4tMSE9W28uVFlQRS5JTlRFUk5BTCxvLlRZUEUuTElOS10uaW5kZXhPZihlKX19fSwxMDA6KGUsdCxzKT0+e2NvbnN0IG49cyg5NTQpKFxcXCJBbnlTb2NrZXRcXFwiKSxpPXMoNjkpLHI9cygyNjcpLG89cyg2NjEpLGM9cygyMCksaD1zKDUwMSksYT1zKDY5KSx1PXMoMTE3KSxsPVN5bWJvbChcXFwicGVlcnMgY29ubmVjdGVkXFxcIiksZD1TeW1ib2woXFxcInJlYWR5IHBlZXJzXFxcIikscD1TeW1ib2woXFxcInRyYW5zcG9ydHNcXFwiKSxUPVN5bWJvbChcXFwib25Gb3J3YXJkXFxcIiksRT1TeW1ib2woXFxcIm9uUGVlckNvbm5lY3RlZFxcXCIpLHk9U3ltYm9sKFxcXCJvblBlZXJSZWFkeVxcXCIpLG09U3ltYm9sKFxcXCJvblBlZXJEaXNjb25uZWN0ZWRcXFwiKSxmPVN5bWJvbChcXFwib25QZWVySW50ZXJuYWxNZXNzYWdlXFxcIiksUD1TeW1ib2woXFxcImZpbmRUcmFuc3BvcnRcXFwiKSxrPVN5bWJvbChcXFwiaHR0cCBidW5kbGUganNcXFwiKSx3PVN5bWJvbChcXFwiQW55TWVzaFxcXCIpLGI9U3ltYm9sKFxcXCJIVFRQU2VydmVyXFxcIiksQz1zKDE1NSksXz1zKDQyMCksUz1zKDI4OCksZz1zKDM2Nik7Y2xhc3MgQSBleHRlbmRzIHJ7Y29uc3RydWN0b3IoKXtyZXR1cm4gc3VwZXIoKSx0aGlzLl9zdGFydGVkPSExLHRoaXMuaWQ9by51dWlkdjQoKSx0aGlzLmh0dHA9bmV3IHUsbihcXFwiQW55U29ja2V0SUQ6XFxcIix0aGlzLmlkKSx0aGlzLnJwYz17fSx0aGlzW2xdPXt9LHRoaXNbZF09e30sdGhpc1twXT17fSx0aGlzW2JdPW51bGwsdGhpc1t3XT1udWxsLFxcXCJ1bmRlZmluZWRcXFwiPT10eXBlb2Ygd2luZG93JiYodGhpc1trXT1pLnJlYWRGaWxlU3luYyhcXFwiLy8uLi8uLi9kaXN0L2FueXNvY2tldC5icm93c2VyLmpzXFxcIikpLHRoaXN9ZmlsdGVyKGUpe31icm9hZGNhc3QoZSx0KXtyZXR1cm4gdD10fHwhMSxuZXcgUHJvbWlzZSgoKHMsbik9Pntjb25zdCBpPVtdO2ZvcihsZXQgciBpbiB0aGlzW2RdKXI9dGhpc1tkXVtyXSxpLnB1c2goci5zZW5kKGUsdCkpLFByb21pc2UuYWxsKGkpLnRoZW4ocykuY2F0Y2gobil9KSl9bWVzaCgpe2lmKHRoaXMuX3N0YXJ0ZWQpdGhyb3cgbmV3IEVycm9yKFxcXCJDYW5ub3QgZW5hYmxlIE1lc2ggd2hpbGUgQW55U29ja2V0IGlzIHJ1bm5pbmcuIFlvdSBtdXN0IGZpcnN0IHN0b3AgQW55U29ja2V0IVxcXCIpO3RoaXNbd109bmV3IF8odGhpcyl9c2V0UlBDKGUpe3RoaXMucnBjPWV9Y2FuUHJveHkoZSx0KXtyZXR1cm4hMX1wcm94eShlLHQpe3JldHVybiBuZXcgUHJvbWlzZSgoKHMsbik9PntlIT10JiZlIT10aGlzLmlkP3RoaXNbZF1bdF0uaXNQcm94eSgpP24oXFxcIkNhbm5vdCBwcm94eSB2aWEgYSBwcm94eSEgYXRtLi4uIDopXFxcIik6dGhpc1tkXVt0XS5zZW5kSW50ZXJuYWwoe3R5cGU6aC5JTlRFUk5BTF9QQUNLRVRfVFlQRS5QUk9YWSxhY3Rpb246XFxcInByb3h5XFxcIixpZDplfSwhMCkudGhlbigoaT0+e2lmKGkubXNnLm9rJiYhdGhpc1tkXVtlXSl7bGV0IG49bmV3IFModGhpcyxuZXcgZyghMCx0aGlzLmlkLGUsdGhpc1tkXVt0XSksdGhpc1tkXVt0XS5vcHRpb25zKTt0aGlzW3ldKG4pLHModGhpc1tkXVtlXSl9ZWxzZSBuKFxcXCJDYW5ub3QgcHJveHkhXFxcIil9KSkuY2F0Y2gobik6bihcXFwiQ2Fubm90IHByb3h5IGxvb3BiYWNrIVxcXCIpfSkpfXVucHJveHkoZSx0LHMpe3M9c3x8XFxcIlByb3h5IENvbm5lY3Rpb24gQ2xvc2VkXFxcIix0aGlzW2RdW2VdJiZ0aGlzW2RdW2VdLmlzUHJveHkoKSYmKHRoaXNbZF1bdF0uc2VuZEludGVybmFsKHt0eXBlOmguSU5URVJOQUxfUEFDS0VUX1RZUEUuUFJPWFksYWN0aW9uOlxcXCJ1bnByb3h5XFxcIixpZDplfSksdGhpc1ttXSh0aGlzW2RdW2VdLHMpKX1oYXNQZWVyKGUpe3JldHVybiEhdGhpc1tkXVtlXX1oYXNEaXJlY3RQZWVyKGUpe3JldHVybiEoIXRoaXNbZF1bZV18fHRoaXNbZF1bZV0uaXNQcm94eSgpKX1zZXJ2ZXIoZSx0KXtyZXR1cm4gdGhpcy5saXN0ZW4oZSx0KX1saXN0ZW4oZSx0KXtpZih0aGlzLl9zdGFydGVkPSEwLFxcXCJudW1iZXJcXFwiPT10eXBlb2YodD10fHx7fSkmJih0PXtwb3J0OnR9KSx0LmlwPXQuaXB8fFxcXCIwLjAuMC4wXFxcIiwtMT09W1xcXCJodHRwXFxcIixcXFwid3NcXFwiXS5pbmRleE9mKGUudG9Mb3dlckNhc2UoKSkmJiF0LnBvcnQpdGhyb3cgbmV3IEVycm9yKFxcXCJJbnZhbGlkIHBvcnQhXFxcIik7LTEhPVtcXFwid3NcXFwiXS5pbmRleE9mKGUudG9Mb3dlckNhc2UoKSkmJih0aGlzW2JdfHx0aGlzLmxpc3RlbihcXFwiaHR0cFxcXCIsdCksdD17c2VydmVyOnRoaXNbYl19KTtsZXQgcz10aGlzW1BdKGUpO3M9bmV3IHMoXFxcInNlcnZlclxcXCIsdCksdGhpc1twXVtzLmlkXT1zLHMub24oXFxcImNvbm5lY3RlZFxcXCIsKGU9Pnt0aGlzW0VdKGUscy5vcHRpb25zKX0pKSxzLm9uKFxcXCJkaXNjb25uZWN0ZWRcXFwiLCgoZSx0KT0+e3RoaXNbbV0oZSx0KX0pKTtsZXQgbj1zLmxpc3RlbigpO3JldHVyblxcXCJodHRwXFxcIj09ZSYmKHRoaXNbYl09cy5zZXJ2ZXIpLG59Y29ubmVjdChlLHQscyxpKXtyZXR1cm4gbmV3IFByb21pc2UoKChyLG8pPT57dGhpcy5fc3RhcnRlZD0hMCxpPU9iamVjdC5hc3NpZ24oaXx8e30se2lwOnQscG9ydDpzfSk7bGV0IGM9dGhpc1tQXShlKTtjPW5ldyBjKFxcXCJjbGllbnRcXFwiLGkpLGMub24oXFxcImNvbm5lY3RlZFxcXCIsKGU9Pnt0aGlzW3BdW2MuaWRdPWMsdGhpc1tFXShlLGMub3B0aW9ucyxyKSxuKFxcXCJUcmFuc3BvcnRzIEFkZGVkXFxcIixjLmlkLE9iamVjdC5rZXlzKHRoaXNbcF0pLmxlbmd0aCl9KSksYy5vbihcXFwiZGlzY29ubmVjdGVkXFxcIiwoKGUsdCk9Pnt0aGlzW3BdW2MuaWRdLnN0b3AoKSxkZWxldGUgdGhpc1twXVtjLmlkXSx0aGlzW21dKGUsdCksbihcXFwiVHJhbnNwb3J0cyBsZWZ0XFxcIixjLmlkLE9iamVjdC5rZXlzKHRoaXNbcF0pLmxlbmd0aCksdGhpc1tkXVtlLmlkXXx8byh0KX0pKSxjLmNvbm5lY3QoKS5jYXRjaChvKX0pKX1zdG9wKCl7cmV0dXJuIHRoaXMuX3N0YXJ0ZWQ9ITEsbmV3IFByb21pc2UoKChlLHQpPT57Y29uc3Qgcz1bXTtmb3IobGV0IGUgaW4gdGhpc1twXSlzLnB1c2godGhpc1twXVtlXS5zdG9wKCkpO1Byb21pc2UuYWxsKHMpLnRoZW4oKCgpPT57dGhpc1tsXT17fSx0aGlzW2RdPXt9LHRoaXNbcF09e30sZSgpfSkpLmNhdGNoKChlPT57dGhyb3cgZX0pKX0pKX1vbkF1dGgoZSl7cmV0dXJuITB9YXV0aFBhY2tldCgpe31bUF0oZSl7Zm9yKGxldCB0IGluIEEuVHJhbnNwb3J0KWlmKEEuVHJhbnNwb3J0Lmhhc093blByb3BlcnR5KHQpJiZBLlRyYW5zcG9ydFt0XS5zY2hlbWUoKT09ZSlyZXR1cm4gQS5UcmFuc3BvcnRbdF07dGhyb3cgbmV3IEVycm9yKFxcXCJJbnZhbGlkIHNjaGVtZSAnXFxcIitlK1xcXCInXFxcIil9W0VdKGUsdCxzKXtpZihuKFxcXCJQZWVyIGNvbm5lY3RlZFxcXCIpLFxcXCJodHRwXFxcIj09ZS50eXBlKXJldHVybiBlLm9uKFxcXCJ1cGdyYWRlXFxcIiwoKGUsdCk9PntsZXQgcz1uZXcgYShlLHQpO3MuaGVhZGVyKFxcXCJBTllTT0NLRVQtSURcXFwiLHRoaXMuaWQpLHRoaXMuaHR0cC5fcHJvY2Vzc1VwZ3JhZGUocyksdGhpcy5lbWl0KFxcXCJodHRwX3VwZ3JhZGVcXFwiLHMsZSx0KX0pKSx2b2lkIGUub24oXFxcIm1lc3NhZ2VcXFwiLCgoZSx0KT0+e2xldCBzPW5ldyBhKGUsdCk7aWYoXFxcIi9AYW55c29ja2V0XFxcIj09cy51cmwpcmV0dXJuIHMuYm9keSh0aGlzW2tdKSx2b2lkIHMuZW5kKCk7ZS5ib2R5PVxcXCJcXFwiLGUub24oXFxcImVycm9yXFxcIiwoZT0+e2NvbnNvbGUubG9nKFxcXCJFcnJcXFwiLGUpfSkpLm9uKFxcXCJkYXRhXFxcIiwodD0+e2UuYm9keSs9dCxlLmJvZHkubGVuZ3RoPjFlNyYmZS5jb25uZWN0aW9uLmRlc3Ryb3koKX0pKS5vbihcXFwiZW5kXFxcIiwoKCk9PntlLmJvZHk9ZS5ib2R5LnRvU3RyaW5nKCkscy5oZWFkZXIoXFxcIkFOWVNPQ0tFVC1JRFxcXCIsdGhpcy5pZCksdGhpcy5odHRwLl9wcm9jZXNzKHMpLHRoaXMuZW1pdChcXFwiaHR0cFxcXCIscyxlLHQpfSkpfSkpO2NvbnN0IGk9bmV3IFModGhpcyxlLHQpO3RoaXNbbF1bZS5jb25uZWN0aW9uSURdPWksaS5vbihcXFwiZm9yd2FyZFxcXCIsdGhpc1tUXS5iaW5kKHRoaXMpKSxpLm9uY2UoXFxcInJlYWR5XFxcIiwoZT0+e3RoaXNbeV0oZSxzKX0pKX1bVF0oZSx0KXtpZih0aGlzLmlkPT10LnRvKXtpZighdGhpc1tkXVt0LmZyb21dKXJldHVybiB2b2lkIHRoaXNbZF1bZV0uZGlzY29ubmVjdChcXFwiSW52YWxpZCBmb3J3YXJkIHBhY2tldCEgQ2xpZW50IGRvZXNuJ3QgZXhpc3QhXFxcIik7dGhpc1tkXVt0LmZyb21dLl9yZWN2Rm9yd2FyZCh0KX1lbHNlIHRoaXMuaGFzRGlyZWN0UGVlcih0LnRvKT90aGlzW2RdW3QudG9dLmZvcndhcmQodCk6Y29uc29sZS5lcnJvcihcXFwiRk9SV0FSRCBFUlJPUiEgV2UgZG8gbm90IGhhdmUgdGhlIHBlZXJcXFwiLHQudG8pfVt5XShlLHQpe2lmKHRoaXNbZF1bZS5wZWVySURdKXJldHVybiBlLnBlZXJJRD1udWxsLHZvaWQgZS5kaXNjb25uZWN0KFxcXCJEdXBsaWNhdGVkIEFueVNvY2tldCBJRCBmb3VuZCFcXFwiKTtuKFxcXCJQZWVyIHJlYWR5XFxcIik7Y29uc3Qgcz1uZXcgQyhlKTtyZXR1cm4gdGhpc1tkXVtlLnBlZXJJRF09cyxzLm9uKFxcXCJtZXNzYWdlXFxcIiwoZT0+e3RoaXMuZW1pdChcXFwibWVzc2FnZVxcXCIsZSl9KSkscy5vbihcXFwiZTJlXFxcIiwoZT0+e3RoaXMuZW1pdChcXFwiZTJlXFxcIixlKX0pKSxzLm9uKFxcXCJpbnRlcm5hbFxcXCIsdGhpc1tmXS5iaW5kKHRoaXMpKSx0JiZ0KHMpLHNldFRpbWVvdXQoKCgpPT57dGhpcy5lbWl0KFxcXCJjb25uZWN0ZWRcXFwiLHMpfSksMCksc31bbV0oZSx0KXtuKFxcXCJQZWVyIGRpc2Nvbm5lY3RlZFxcXCIsdCxlLmlkKTtsZXQgcz1udWxsO2lmKHRoaXNbbF1bZS5jb25uZWN0aW9uSURdJiYocz10aGlzW2xdW2UuY29ubmVjdGlvbklEXS5wZWVySUQsZGVsZXRlIHRoaXNbbF1bZS5jb25uZWN0aW9uSURdKSx0aGlzW2RdW2UuaWRdJiYocz1lLmlkKSxzKXtjb25zdCBlPXRoaXNbZF1bc107ZGVsZXRlIHRoaXNbZF1bc107Y29uc3Qgbj1lLmdldExpbmtzKCk7Zm9yKGxldCB0IGluIG4pblt0XS5zZW5kSW50ZXJuYWwoe3R5cGU6aC5JTlRFUk5BTF9QQUNLRVRfVFlQRS5ORVRXT1JLLGFjdGlvbjpcXFwiZGlzY29ubmVjdGVkXFxcIixpZDplLmlkfSkuY2F0Y2goKCgpPT57fSkpLGUucmVtb3ZlTGluayhuW3RdKSx0aGlzW2RdW3RdJiZ0aGlzW2RdW3RdLnJlbW92ZUxpbmsoZSk7ZS5kaXNjb25uZWN0KCksdGhpcy5lbWl0KFxcXCJkaXNjb25uZWN0ZWRcXFwiLGUsdCl9ZWxzZSBlLmRpc2Nvbm5lY3QoKX1bZl0oZSl7aWYoZS5tc2cudHlwZT09aC5JTlRFUk5BTF9QQUNLRVRfVFlQRS5ORVRXT1JLKXtpZihcXFwiY29ubmVjdGVkXFxcIj09ZS5tc2cuYWN0aW9uKXtpZighdGhpc1tkXVtlLm1zZy5pZF0pe2xldCB0PW5ldyBTKHRoaXMsbmV3IGcoITEsdGhpcy5pZCxlLm1zZy5pZCx0aGlzW2RdW2UucGVlci5pZF0pKTt0aGlzW3ldKHQpfX1lbHNlIGlmKFxcXCJkaXNjb25uZWN0ZWRcXFwiPT1lLm1zZy5hY3Rpb24pe2lmKCF0aGlzW2RdW2UubXNnLmlkXSlyZXR1cm4gdm9pZCBlLnBlZXIuZGlzY29ubmVjdChcXFwiSW52YWxpZCBwcm94eSByZXF1ZXN0IVxcXCIpO3RoaXNbbV0odGhpc1tkXVtlLm1zZy5pZF0sXFxcIlByb3h5IENvbm5lY3Rpb24gQ2xvc2VkXFxcIil9fWVsc2UgaWYoZS5tc2cudHlwZT09aC5JTlRFUk5BTF9QQUNLRVRfVFlQRS5QUk9YWSl7aWYoXFxcInByb3h5XFxcIj09ZS5tc2cuYWN0aW9uKXtpZighdGhpcy5jYW5Qcm94eShlLnBlZXIuaWQsZS5tc2cuaWQpfHwhdGhpc1tkXVtlLm1zZy5pZF0pcmV0dXJuIHZvaWQgZS5wZWVyLmRpc2Nvbm5lY3QoXFxcIkludmFsaWQgcHJveHkgcmVxdWVzdCFcXFwiKTtpZih0aGlzW2RdW2UubXNnLmlkXS5pc1Byb3h5KCkpcmV0dXJuIHZvaWQgZS5yZXBseSh7b2s6ITF9KTt0aGlzW2RdW2UubXNnLmlkXS5hZGRMaW5rKHRoaXNbZF1bZS5wZWVyLmlkXSksdGhpc1tkXVtlLnBlZXIuaWRdLmFkZExpbmsodGhpc1tkXVtlLm1zZy5pZF0pLHRoaXNbZF1bZS5tc2cuaWRdLnNlbmRJbnRlcm5hbCh7dHlwZTpoLklOVEVSTkFMX1BBQ0tFVF9UWVBFLk5FVFdPUkssYWN0aW9uOlxcXCJjb25uZWN0ZWRcXFwiLGlkOmUucGVlci5pZH0pLGUucmVwbHkoe29rOiEwfSl9ZWxzZSBpZihcXFwidW5wcm94eVxcXCI9PWUubXNnLmFjdGlvbil7aWYoIXRoaXMuY2FuUHJveHkoZS5wZWVyLmlkLGUubXNnLmlkKXx8IXRoaXNbZF1bZS5tc2cuaWRdKXJldHVybiB2b2lkIGUucGVlci5kaXNjb25uZWN0KFxcXCJJbnZhbGlkIHByb3h5IHJlcXVlc3QhXFxcIik7dGhpc1tkXVtlLm1zZy5pZF0ucmVtb3ZlTGluayh0aGlzW2RdW2UucGVlci5pZF0pLHRoaXNbZF1bZS5wZWVyLmlkXS5yZW1vdmVMaW5rKHRoaXNbZF1bZS5tc2cuaWRdKSx0aGlzW2RdW2UubXNnLmlkXS5zZW5kSW50ZXJuYWwoe3R5cGU6aC5JTlRFUk5BTF9QQUNLRVRfVFlQRS5ORVRXT1JLLGFjdGlvbjpcXFwiZGlzY29ubmVjdGVkXFxcIixpZDplLnBlZXIuaWR9KX19ZWxzZSBpZihlLm1zZy50eXBlPT1oLklOVEVSTkFMX1BBQ0tFVF9UWVBFLlJQQyl7bGV0IHQ9ITEscz10aGlzLnJwYztmb3IobGV0IG4gaW4gZS5tc2cubWV0aG9kKWlmKHQ9cyxzPXNbZS5tc2cubWV0aG9kW25dXSwhcylicmVhaztpZih0JiZzJiZcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2Ygcyl0cnl7Zm9yKGxldCB0IG9mIGUubXNnLmJpbillLm1zZy5wYXJhbXNbdF09QS5QYWNrZXIudW5wYWNrKGUubXNnLnBhcmFtc1t0XSk7UHJvbWlzZS5yZXNvbHZlKHMuYXBwbHkodCxlLm1zZy5wYXJhbXMpKS50aGVuKCh0PT57bGV0IHM9ITE7Yy5pc0J1ZmZlcih0KSYmKHQ9QS5QYWNrZXIucGFjayh0KSxzPSEwKSxlLnJlcGx5KHtyZXN1bHQ6dCxiaW46c30pfSkpLmNhdGNoKCh0PT57ZS5yZXBseSh7ZXJyb3I6dCxjb2RlOjUwMH0pfSkpfWNhdGNoKHQpe2UucmVwbHkoe2Vycm9yOnQubWVzc2FnZSxjb2RlOjUwMH0pfWVsc2UgZS5yZXBseSh7ZXJyb3I6XFxcIk1ldGhvZCBub3QgZm91bmRcXFwiLGNvZGU6NDA0fSl9ZWxzZSBlLm1zZy50eXBlPT1oLklOVEVSTkFMX1BBQ0tFVF9UWVBFLlJQQ19OT1RJRlk/Y29uc29sZS5sb2coXFxcIlJQQ19OT1RJRllcXFwiLGUubXNnKTplLm1zZy50eXBlPT1oLklOVEVSTkFMX1BBQ0tFVF9UWVBFLlNZTkNFRF9USU1FP2UucmVwbHkoe286ZS5tc2cudGltZSx0OkRhdGUubm93KCl9KTplLnBlZXIuZGlzY29ubmVjdChcXFwiSW52YWxpZCBpbnRlcm5hbCBtZXNzYWdlXFxcIil9fWUuZXhwb3J0cz1BfSw1NTg6KGUsdCxzKT0+e2NvbnN0IG49cyg1NTUpLGk9cyg1MDEpLHI9ZT0+bi51bnBhY2tJbnQzMihlLnN1YnN0cigyLDQpKSxvPWU9PnBhcnNlSW50KGUuc3Vic3RyKDEsMSkpLGM9e307Y2xhc3MgaHtjb25zdHJ1Y3RvcihlKXt0aGlzLnNlcT0wLHRoaXMudHlwZT0wLHRoaXMuYnVmZmVyPVtdLHRoaXMuZGF0YT1udWxsLGUmJih0aGlzLmRhdGE9ZSl9c2V0VHlwZShlKXtyZXR1cm4gdGhpcy50eXBlPWUsdGhpc31zZXRTZXEoZSl7cmV0dXJuIHRoaXMuc2VxPWUsdGhpc31zZXRSZXBseVRvKGUpe3JldHVybiBlJiYodGhpcy5zZXE9LWUpLHRoaXN9YXN5bmMgc2VyaWFsaXplKGUsdCl7ZT1lfHxOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtsZXQgcz1bSlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhKV07c1swXS5sZW5ndGg+ZSYmKGNbZV09Y1tlXXx8bmV3IFJlZ0V4cChcXFwiKC57MSxcXFwiK2UrXFxcIn0pXFxcIixcXFwiZ1xcXCIpLHM9c1swXS5tYXRjaChjW2VdKSk7Zm9yKGxldCBlPTA7ZTxzLmxlbmd0aDtlKyspc1tlXT0oZT09cy5sZW5ndGgtMT9pLlBBQ0tFVF9MRU5HVEguRlVMTDppLlBBQ0tFVF9MRU5HVEguUEFSVElBTCkudG9TdHJpbmcoKSt0aGlzLnR5cGUudG9TdHJpbmcoKStuLnBhY2tJbnQzMih0aGlzLnNlcSkrYXdhaXQgdChzW2VdLE1hdGguYWJzKHRoaXMuc2VxKSk7cmV0dXJuIHN9YXN5bmMgZGVzZXJpYWxpemUoZSx0LHMpe3M9c3x8KGU9PlByb21pc2UucmVzb2x2ZShlKSk7Y29uc3Qgbj1lLnN1YnN0cigwLDEpPT1pLlBBQ0tFVF9MRU5HVEguRlVMTDtpZih0aGlzLnR5cGU9byhlKSx0aGlzLnNlcT1yKGUpLHRoaXMuYnVmZmVyLnB1c2goYXdhaXQgcyh0LGUuc3Vic3RyKDYpLE1hdGguYWJzKHRoaXMuc2VxKSkpLG4pe3RyeXt0aGlzLmJ1ZmZlcj10aGlzLmJ1ZmZlci5qb2luKFxcXCJcXFwiKTtsZXQgZT1KU09OLnBhcnNlKHRoaXMuYnVmZmVyKTt0aGlzLmJ1ZmZlcj1bXSx0aGlzLmRhdGE9ZX1jYXRjaChlKXt0aGlzLmRhdGE9bnVsbH1yZXR1cm4hMH1yZXR1cm4hMX19ZS5leHBvcnRzPXtkYXRhOmU9Pm5ldyBoKGU9ZXx8e30pLGJ1ZmZlcjooKT0+bmV3IGgsZ2V0U2VxOmU9PnIoZSksZ2V0VHlwZTplPT5vKGUpLGlzRm9yd2FyZFBhY2tldDplPT5lLnN1YnN0cigwLDEpPT1pLlBBQ0tFVF9UWVBFLkZPUldBUkQsVFlQRTppLlBBQ0tFVF9UWVBFfX0sMzY2OihlLHQscyk9Pntjb25zdCBuPXMoNTg2KSxpPXMoMTYyKTtlLmV4cG9ydHM9Y2xhc3MgZXh0ZW5kcyBue2NvbnN0cnVjdG9yKGUsdCxzLG4pe3N1cGVyKG4pLHRoaXMuaWQ9cyx0aGlzLmFueXNvY2tldElEPXQsdGhpcy50eXBlPWU/aS5UWVBFLkNMSUVOVDppLlRZUEUuU0VSVkVSLHRoaXMuaXNQcm94eT0hMCx0aGlzLmluaXQoKX1vbkNvbm5lY3QoKXt9c2VuZChlKXtyZXR1cm4gbmV3IFByb21pc2UoKCh0LHMpPT57dHJ5e3RoaXMuc29ja2V0LmZvcndhcmQoe3RvOnRoaXMuaWQsZnJvbTp0aGlzLmFueXNvY2tldElELG1zZzplfSksdCgpfWNhdGNoKGUpe3MoZSl9fSkpfW9uRGlzY29ubmVjdCgpe319fSw1MDE6ZT0+e2NvbnN0IHQ9e1BBQ0tFVF9UWVBFOntBVVRIOjEsSU5URVJOQUw6MixMSU5LOjMsU1dJVENIOjQsSEVBUlRCRUFUOjUsRk9SV0FSRDo2fSxQQUNLRVRfTEVOR1RIOntGVUxMOjEsUEFSVElBTDoyfSxJTlRFUk5BTF9QQUNLRVRfVFlQRTp7TkVUV09SSzoxLFBST1hZOjIsUlBDOjMsUlBDX05PVElGWTo0LFNZTkNFRF9USU1FOjV9LFBST1RPQ09MX1NUQVRFUzp7RVNUQUJMSVNIRUQ6MCxBVVRISU5HOjEsQ09OTkVDVEVEOjIsU1dJVENISU5HX1BST1RPQ09MOjMsRElTQ09OTkVDVEVEOjR9LFBST1RPQ09MX0VOQ1JZUFRJT046e1BMQUlOOjEsRTJFRToyfSxNQVhfUEFDS0VUX1NJWkU6NTI0Mjg4fTtmb3IobGV0IGUgaW4gdCl0W2VdLl9zdHJpbmc9cz0+e2ZvcihsZXQgbiBpbiB0W2VdKWlmKHRbZV1bbl09PXMpcmV0dXJuIG47cmV0dXJuIHN9O2UuZXhwb3J0cz10fSw1MTA6KGUsdCxzKT0+e2NvbnN0IG49cygxNDcpLGk9cygyMCk7ZS5leHBvcnRzPW5ldyBjbGFzc3t1dWlkdjQoKXtyZXR1cm5cXFwieHh4eHh4eHh4eHh4NHh4eHl4eHh4eHh4eHh4eHh4eHhcXFwiLnJlcGxhY2UoL1t4eV0vZywoZnVuY3Rpb24oZSl7Y29uc3QgdD0xNipNYXRoLnJhbmRvbSgpfDA7cmV0dXJuKFxcXCJ4XFxcIj09ZT90OjMmdHw4KS50b1N0cmluZygxNil9KSl9Z2VuZXJhdGVBRVNLZXkoKXtyZXR1cm4gbmV3IFByb21pc2UoKGFzeW5jKGUsdCk9PntsZXQgcz1hd2FpdCBuLmNyZWF0ZUVDREgoXFxcInNlY3A1MjFyMVxcXCIpLHI9YXdhaXQgcy5nZW5lcmF0ZUtleXMoKTtlKHtwcml2YXRlOnMscHVibGljOmkuYnVmZmVyVG9TdHJpbmcociksbm9uY2U6aS5idWZmZXJUb0hleChuLnJhbmRvbUJ5dGVzKDMyKSl9KX0pKX1jb21wdXRlQUVTc2VjcmV0KGUsdCl7cmV0dXJuIG5ldyBQcm9taXNlKChhc3luYyhzLG4pPT57bGV0IHI9YXdhaXQgZS5jb21wdXRlU2VjcmV0KGkuYnVmZmVyRnJvbVN0cmluZyh0KSxudWxsLFxcXCJoZXhcXFwiKTtyPXIuc3Vic3RyKDAsMTI4KSxzKHIpfSkpfWdldEFFU1Nlc3Npb25LZXkoZSx0LHMpe3JldHVybiBuZXcgUHJvbWlzZSgoYXN5bmMocixvKT0+e3Q9dCtcXFwiX1xcXCIrcyxlPWF3YWl0IG4ucGJrZGYyU3luYyhlLHQsMSwzMixcXFwic2hhMjU2XFxcIikscihlPWkuYnVmZmVyVG9IZXgoZSkpfSkpfWVuY3J5cHRBRVMoZSx0KXtyZXR1cm4gbmV3IFByb21pc2UoKChzLHIpPT57dHJ5e2xldCByPW4ucmFuZG9tQnl0ZXMoMTYpLG89bi5jcmVhdGVDaXBoZXJpdihcXFwiYWVzLTI1Ni1jYmNcXFwiLGkuYnVmZmVyRnJvbUhleChlKSxyKSxjPW8udXBkYXRlKHQpO2M9QnVmZmVyLmNvbmNhdChbYyxvLmZpbmFsKCldKTtsZXQgaD1yLnRvU3RyaW5nKFxcXCJoZXhcXFwiKStjLnRvU3RyaW5nKFxcXCJoZXhcXFwiKTt0aGlzLmRlY3J5cHRBRVMoZSxoKSxzKGgpfWNhdGNoKGUpe3IoZSl9fSkpfWRlY3J5cHRBRVMoZSx0KXtyZXR1cm4gbmV3IFByb21pc2UoKChzLHIpPT57dHJ5e2xldCByPUJ1ZmZlci5mcm9tKHQuc3Vic3RyKDAsMzIpLFxcXCJoZXhcXFwiKSxvPUJ1ZmZlci5mcm9tKHQuc3Vic3RyKDMyKSxcXFwiaGV4XFxcIiksYz1uLmNyZWF0ZURlY2lwaGVyaXYoXFxcImFlcy0yNTYtY2JjXFxcIixpLmJ1ZmZlckZyb21IZXgoZSksciksaD1jLnVwZGF0ZShvKTtoPUJ1ZmZlci5jb25jYXQoW2gsYy5maW5hbCgpXSkscyhoLnRvU3RyaW5nKCkpfWNhdGNoKGUpe3IoZSl9fSkpfX19LDU4NjooZSx0LHMpPT57Y29uc3Qgbj1zKDI2NyksaT1zKDY2MSkscj1zKDE2Mik7ZS5leHBvcnRzPWNsYXNzIGV4dGVuZHMgbntjb25zdHJ1Y3RvcihlKXtzdXBlcigpLHRoaXMuY29ubmVjdGlvbklEPWkudXVpZHY0KCksdGhpcy5jb25uZWN0ZWQ9ITAsdGhpcy5zb2NrZXQ9ZSx0aGlzLnR5cGU9ci5UWVBFLk5PTkUsdGhpcy5pbml0ZWQ9ITF9aW5pdCgpe3RoaXMuaW5pdGVkfHwodGhpcy5pbml0ZWQ9ITAsdGhpcy5vbkNvbm5lY3QoKSx0aGlzLmVtaXQoXFxcImNvbm5lY3RlZFxcXCIsdGhpcykpfWlzQ2xpZW50KCl7aWYodGhpcy50eXBlPT1yLlRZUEUuTk9ORSl0aHJvdyBuZXcgRXJyb3IoXFxcIkludmFsaWQgdHJhbnNwb3J0IHR5cGUhISFcXFwiKTtyZXR1cm4gdGhpcy50eXBlPT1yLlRZUEUuQ0xJRU5UfWRpc2Nvbm5lY3QoZSl7dGhpcy5jb25uZWN0ZWQmJih0aGlzLmNvbm5lY3RlZD0hMSx0aGlzLm9uRGlzY29ubmVjdCgpLHRoaXMuZW1pdChcXFwiZGlzY29ubmVjdGVkXFxcIix0aGlzLGUpKX1zZW5kKGUpe3Rocm93IG5ldyBFcnJvcihcXFwic2VuZCgpIG11c3QgYmUgaW1wbGVtZW50ZWRcXFwiKX1vbkNvbm5lY3QoKXt0aHJvdyBuZXcgRXJyb3IoXFxcIm9uQ29ubmVjdCgpIG11c3QgYmUgaW1wbGVtZW50ZWRcXFwiKX1vbkRpc2Nvbm5lY3QoKXt0aHJvdyBuZXcgRXJyb3IoXFxcIm9uRGlzY29ubmVjdCgpIG11c3QgYmUgaW1wbGVtZW50ZWRcXFwiKX19fSwxNjI6KGUsdCxzKT0+e2NvbnN0IG49cygyNjcpLGk9cyg2NjEpO2NsYXNzIHIgZXh0ZW5kcyBue2NvbnN0cnVjdG9yKGUsdCl7c3VwZXIoKSx0aGlzLmlkPWkudXVpZHY0KCksdGhpcy5vcHRpb25zPU9iamVjdC5hc3NpZ24oe30sdCksdGhpcy50eXBlPWUsdGhpcy5wZWVycz1uZXcgTWFwLHRoaXMuc3RhcnRlZD0hMX1saXN0ZW4oKXtyZXR1cm4gbmV3IFByb21pc2UoKChlLHQpPT57dGhpcy5zdGFydGVkP2UoKTp0aGlzLm9uTGlzdGVuKCkudGhlbigoKCk9Pnt0aGlzLnN0YXJ0ZWQ9ITAsZSgpfSkpLmNhdGNoKChlPT57dChlKX0pKX0pKX1jb25uZWN0KCl7cmV0dXJuIG5ldyBQcm9taXNlKCgoZSx0KT0+e3RoaXMuc3RhcnRlZD9lKCk6dGhpcy5vbkNvbm5lY3QoKS50aGVuKCgoKT0+e3RoaXMuc3RhcnRlZD0hMCxlKCl9KSkuY2F0Y2goKGU9Pnt0KGUpfSkpfSkpfXN0b3AoKXtyZXR1cm4gbmV3IFByb21pc2UoKChlLHQpPT57aWYodGhpcy5zdGFydGVkKXt0aGlzLnN0YXJ0ZWQ9ITE7Zm9yKGNvbnN0IGUgb2YgdGhpcy5wZWVycy52YWx1ZXMoKSllLmRpc2Nvbm5lY3QoXFxcIkxvY2FsIENvbm5lY3Rpb24gQ2xvc2VkXFxcIik7dGhpcy5vblN0b3AoKS50aGVuKCgoKT0+e2UoKX0pKS5jYXRjaCgoZT0+e3QoZSl9KSl9ZWxzZSBlKCl9KSl9YWRkUGVlcihlKXtlLnR5cGU9dGhpcy50eXBlLGUub24oXFxcImNvbm5lY3RlZFxcXCIsKCgpPT57dGhpcy5wZWVycy5zZXQoZS5jb25uZWN0aW9uSUQsZSksdGhpcy5lbWl0KFxcXCJjb25uZWN0ZWRcXFwiLGUpfSkpLGUub24oXFxcImRpc2Nvbm5lY3RlZFxcXCIsKChlLHQpPT57dGhpcy5wZWVycy5kZWxldGUoZS5jb25uZWN0aW9uSUQpLHRoaXMuZW1pdChcXFwiZGlzY29ubmVjdGVkXFxcIixlLHQpfSkpLGUuaW5pdCgpfW9uQ29ubmVjdCgpe3Rocm93IG5ldyBFcnJvcihcXFwib25Db25uZWN0KCkgbXVzdCBiZSBpbXBsZW1lbnRlZFxcXCIpfW9uTGlzdGVuKCl7dGhyb3cgbmV3IEVycm9yKFxcXCJvbkxpc3RlbigpIG11c3QgYmUgaW1wbGVtZW50ZWRcXFwiKX1vblN0b3AoKXt0aHJvdyBuZXcgRXJyb3IoXFxcIm9uU3RvcCgpIG11c3QgYmUgaW1wbGVtZW50ZWRcXFwiKX19dmFyIG8sYyxoO2g9KCk9Pnt0aHJvdyBuZXcgRXJyb3IoXFxcInN0YXRpYyBzY2hlbWUoKSBtdXN0IGJlIGltcGxlbWVudGVkXFxcIil9LChjPVxcXCJzY2hlbWVcXFwiKWluKG89cik/T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sYyx7dmFsdWU6aCxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOm9bY109aCxlLmV4cG9ydHM9cixyLlRZUEU9e0NMSUVOVDpcXFwiY2xpZW50XFxcIixTRVJWRVI6XFxcInNlcnZlclxcXCIsSFRUUDpcXFwiaHR0cFxcXCJ9fSw2ODM6KGUsdCxzKT0+e2NvbnN0IG49cyg1ODYpO2UuZXhwb3J0cz1jbGFzcyBleHRlbmRzIG57b25Db25uZWN0KCl7dGhpcy5zb2NrZXQub24oXFxcImNsb3NlXFxcIiwoKCk9Pnt0aGlzLmRpc2Nvbm5lY3QoXFxcIlJlbW90ZSBDb25uZWN0aW9uIENsb3NlZFxcXCIpfSkpLHRoaXMuc29ja2V0Lm9uKFxcXCJlcnJvclxcXCIsKGU9Pnt0aGlzLmVtaXQoXFxcImVycm9yXFxcIix0aGlzLGUpfSkpLHRoaXMuc29ja2V0Lm9uKFxcXCJtZXNzYWdlXFxcIiwoZT0+e3RoaXMuZW1pdChcXFwibWVzc2FnZVxcXCIsdGhpcyxlKX0pKX1zZW5kKGUpe3JldHVybiBuZXcgUHJvbWlzZSgoKHQscyk9Pnt0cnl7dGhpcy5zb2NrZXQuc2VuZChlKSx0KCl9Y2F0Y2goZSl7cyhlKX19KSl9b25EaXNjb25uZWN0KCl7dGhpcy5zb2NrZXQmJih0aGlzLnNvY2tldC5jbG9zZSgpLHRoaXMuc29ja2V0LnRlcm1pbmF0ZSgpLHRoaXMuc29ja2V0PW51bGwpfX19LDg2NjooZSx0LHMpPT57Y29uc3Qgbj1zKDE2MiksaT1zKDY4Mykscj1zKDk2Nik7ZS5leHBvcnRzPWNsYXNzIGV4dGVuZHMgbntjb25zdHJ1Y3RvcihlLHQpe3N1cGVyKGUsdCl9c3RhdGljIHNjaGVtZSgpe3JldHVyblxcXCJ3c1xcXCJ9b25MaXN0ZW4oKXtyZXR1cm4gbmV3IFByb21pc2UoKChlLHQpPT57dGhpcy53cz1uZXcgci5TZXJ2ZXIoe3NlcnZlcjp0aGlzLm9wdGlvbnMuc2VydmVyfSksdGhpcy53cy5vbihcXFwiY29ubmVjdGlvblxcXCIsKGU9Pnt0aGlzLmFkZFBlZXIobmV3IGkoZSkpfSkpLHRoaXMud3Mub24oXFxcImVycm9yXFxcIiwoZT0+e3QoZSl9KSksdGhpcy53cy5vbihcXFwibGlzdGVuaW5nXFxcIiwoKCk9PntlKCl9KSl9KSl9b25Db25uZWN0KGUpe3JldHVybiBuZXcgUHJvbWlzZSgoKHQscyk9PntsZXQgbj0hMSxvPW51bGw7dGhpcy5vcHRpb25zLmNvb2tpZXMmJihvPXtoZWFkZXJzOntDb29raWU6dGhpcy5fZm9ybWF0Q29va2llcyh0aGlzLm9wdGlvbnMuY29va2llcyl9fSk7bGV0IGM9bmV3IHIoKGU/XFxcIndzXFxcIjpcXFwid3NzXFxcIikrXFxcIjovL1xcXCIrdGhpcy5vcHRpb25zLmlwK1xcXCI6XFxcIit0aGlzLm9wdGlvbnMucG9ydCtcXFwiL1xcXCIsbyk7Yy5vbihcXFwib3BlblxcXCIsKGU9PntuPSEwLHRoaXMuYWRkUGVlcihuZXcgaShjKSksdCgpfSkpLGMub24oXFxcImVycm9yXFxcIiwoaT0+e2V8fG4/cyhpKTp0aGlzLm9uQ29ubmVjdCghMCkudGhlbih0KS5jYXRjaChzKSxuPSExfSkpfSkpfW9uU3RvcCgpe3JldHVybiBuZXcgUHJvbWlzZSgoKGUsdCk9Pnt0aGlzLndzJiYodGhpcy53cy5jbG9zZSgpLHRoaXMud3M9bnVsbCksZSgpfSkpfV9mb3JtYXRDb29raWVzKGUpe2xldCB0PVtdO2ZvcihsZXQgcyBpbiBlKXQucHVzaChzK1xcXCI9XFxcIitlW3NdKTtyZXR1cm4gdC5qb2luKFxcXCI7IFxcXCIpfX19LDM3MzooZSx0LHMpPT57XFxcInVzZSBzdHJpY3RcXFwiO3ZhciBuPXMoNjUwKTtmdW5jdGlvbiBpKGUsdCxzKXtpZihcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgZSYmKHM9dCx0PWUsZT1udWxsKSxzPDEpdGhyb3cgbmV3IEVycm9yKFxcXCJmYXN0cXVldWUgY29uY3VycmVuY3kgbXVzdCBiZSBncmVhdGVyIHRoYW4gMVxcXCIpO3ZhciBpPW4obyksYz1udWxsLGg9bnVsbCxhPTAsdT1udWxsLGw9e3B1c2g6ZnVuY3Rpb24ocyxuKXt2YXIgbz1pLmdldCgpO28uY29udGV4dD1lLG8ucmVsZWFzZT1kLG8udmFsdWU9cyxvLmNhbGxiYWNrPW58fHIsby5lcnJvckhhbmRsZXI9dSxhPT09bC5jb25jdXJyZW5jeXx8bC5wYXVzZWQ/aD8oaC5uZXh0PW8saD1vKTooYz1vLGg9byxsLnNhdHVyYXRlZCgpKTooYSsrLHQuY2FsbChlLG8udmFsdWUsby53b3JrZWQpKX0sZHJhaW46cixzYXR1cmF0ZWQ6cixwYXVzZTpmdW5jdGlvbigpe2wucGF1c2VkPSEwfSxwYXVzZWQ6ITEsY29uY3VycmVuY3k6cyxydW5uaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIGF9LHJlc3VtZTpmdW5jdGlvbigpe2lmKGwucGF1c2VkKXtsLnBhdXNlZD0hMTtmb3IodmFyIGU9MDtlPGwuY29uY3VycmVuY3k7ZSsrKWErKyxkKCl9fSxpZGxlOmZ1bmN0aW9uKCl7cmV0dXJuIDA9PT1hJiYwPT09bC5sZW5ndGgoKX0sbGVuZ3RoOmZ1bmN0aW9uKCl7Zm9yKHZhciBlPWMsdD0wO2U7KWU9ZS5uZXh0LHQrKztyZXR1cm4gdH0sZ2V0UXVldWU6ZnVuY3Rpb24oKXtmb3IodmFyIGU9Yyx0PVtdO2U7KXQucHVzaChlLnZhbHVlKSxlPWUubmV4dDtyZXR1cm4gdH0sdW5zaGlmdDpmdW5jdGlvbihzLG4pe3ZhciBvPWkuZ2V0KCk7by5jb250ZXh0PWUsby5yZWxlYXNlPWQsby52YWx1ZT1zLG8uY2FsbGJhY2s9bnx8cixhPT09bC5jb25jdXJyZW5jeXx8bC5wYXVzZWQ/Yz8oby5uZXh0PWMsYz1vKTooYz1vLGg9byxsLnNhdHVyYXRlZCgpKTooYSsrLHQuY2FsbChlLG8udmFsdWUsby53b3JrZWQpKX0sZW1wdHk6cixraWxsOmZ1bmN0aW9uKCl7Yz1udWxsLGg9bnVsbCxsLmRyYWluPXJ9LGtpbGxBbmREcmFpbjpmdW5jdGlvbigpe2M9bnVsbCxoPW51bGwsbC5kcmFpbigpLGwuZHJhaW49cn0sZXJyb3I6ZnVuY3Rpb24oZSl7dT1lfX07cmV0dXJuIGw7ZnVuY3Rpb24gZChzKXtzJiZpLnJlbGVhc2Uocyk7dmFyIG49YztuP2wucGF1c2VkP2EtLTooaD09PWMmJihoPW51bGwpLGM9bi5uZXh0LG4ubmV4dD1udWxsLHQuY2FsbChlLG4udmFsdWUsbi53b3JrZWQpLG51bGw9PT1oJiZsLmVtcHR5KCkpOjA9PS0tYSYmbC5kcmFpbigpfX1mdW5jdGlvbiByKCl7fWZ1bmN0aW9uIG8oKXt0aGlzLnZhbHVlPW51bGwsdGhpcy5jYWxsYmFjaz1yLHRoaXMubmV4dD1udWxsLHRoaXMucmVsZWFzZT1yLHRoaXMuY29udGV4dD1udWxsLHRoaXMuZXJyb3JIYW5kbGVyPW51bGw7dmFyIGU9dGhpczt0aGlzLndvcmtlZD1mdW5jdGlvbih0LHMpe3ZhciBuPWUuY2FsbGJhY2ssaT1lLmVycm9ySGFuZGxlcixvPWUudmFsdWU7ZS52YWx1ZT1udWxsLGUuY2FsbGJhY2s9cixlLmVycm9ySGFuZGxlciYmaSh0LG8pLG4uY2FsbChlLmNvbnRleHQsdCxzKSxlLnJlbGVhc2UoZSl9fWUuZXhwb3J0cz1pLGUuZXhwb3J0cy5wcm9taXNlPWZ1bmN0aW9uKGUsdCxzKXtcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgZSYmKHM9dCx0PWUsZT1udWxsKTt2YXIgbj1pKGUsKGZ1bmN0aW9uKGUscyl7dC5jYWxsKHRoaXMsZSkudGhlbigoZnVuY3Rpb24oZSl7cyhudWxsLGUpfSkscyl9KSxzKSxyPW4ucHVzaCxvPW4udW5zaGlmdDtyZXR1cm4gbi5wdXNoPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCxzKXtyKGUsKGZ1bmN0aW9uKGUsbil7ZT9zKGUpOnQobil9KSl9KSl9LG4udW5zaGlmdD1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKHQscyl7byhlLChmdW5jdGlvbihlLG4pe2U/cyhlKTp0KG4pfSkpfSkpfSxufX0sNjUwOmU9PntcXFwidXNlIHN0cmljdFxcXCI7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBlLHM9dDtyZXR1cm57Z2V0OmZ1bmN0aW9uKCl7dmFyIG49dDtyZXR1cm4gbi5uZXh0P3Q9bi5uZXh0Oih0PW5ldyBlLHM9dCksbi5uZXh0PW51bGwsbn0scmVsZWFzZTpmdW5jdGlvbihlKXtzLm5leHQ9ZSxzPWV9fX19fSx0PXt9O3JldHVybiBmdW5jdGlvbiBzKG4pe2lmKHRbbl0pcmV0dXJuIHRbbl0uZXhwb3J0czt2YXIgaT10W25dPXtleHBvcnRzOnt9fTtyZXR1cm4gZVtuXShpLGkuZXhwb3J0cyxzKSxpLmV4cG9ydHN9KDUwNil9KSgpO1wiKVxuXHR9XG59XG4iLCAiLy8gQHRzLW5vY2hlY2tcclxuZXhwb3J0IGRlZmF1bHQgbmV3IChjbGFzcyBVdGlscyB7XHJcblx0YXN5bmMgZ2V0U0hBKGRhdGE6IGFueSkge1xyXG5cdFx0aWYoIWRhdGEpXHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cclxuXHRcdGxldCBzaGEgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdChcIlNIQS0yNTZcIiwgbmV3IFRleHRFbmNvZGVyKFwidXRmLThcIikuZW5jb2RlKGRhdGEpKTtcclxuXHRcdHJldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwobmV3IFVpbnQ4QXJyYXkoc2hhKSwgeD0+KCgnMDAnK3gudG9TdHJpbmcoMTYpKS5zbGljZSgtMikpKS5qb2luKCcnKTtcclxuXHR9XHJcbn0pKCk7XHJcbiIsICIvLyBAdHMtbm9jaGVja1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGU0FkYXB0ZXIge1xyXG5cdGNvbnN0cnVjdG9yKGJhc2VQYXRoOiBzdHJpbmcpIHtcclxuXHRcdHRoaXMuYmFzZVBhdGggPSBiYXNlUGF0aDtcclxuXHR9XHJcblxyXG5cdGFzeW5jIG1ha2VGb2xkZXIocGF0aDogc3RyaW5nKSB7XHJcblx0XHRhd2FpdCBhcHAudmF1bHQuY3JlYXRlRm9sZGVyKHRoaXMuYmFzZVBhdGggKyBwYXRoKS5jYXRjaCgoKSA9PiB7XHJcblx0XHRcdC8vIGlnbm9yZWRcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgd3JpdGUocGF0aDogc3RyaW5nLCBkYXRhOiBhbnksIG10aW1lOiBhbnkpIHtcclxuXHRcdGlmKCFhd2FpdCB0aGlzLmV4aXN0cyhwYXRoKSkge1xyXG5cdFx0XHRsZXQgZm9sZGVyID0gcGF0aC5zcGxpdChcIi9cIikuc2xpY2UoMCwgLTEpLmpvaW4oXCIvXCIpO1xyXG5cdFx0XHRpZihmb2xkZXIpIHtcclxuXHRcdFx0XHRhd2FpdCB0aGlzLm1ha2VGb2xkZXIoZm9sZGVyKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYoZGF0YSAhPSBudWxsKSB7XHJcblx0XHRcdGxldCBvcHRpb25zID0gbnVsbDtcclxuXHRcdFx0aWYobXRpbWUpIHtcclxuXHRcdFx0XHRvcHRpb25zID0ge1xyXG5cdFx0XHRcdFx0bXRpbWU6IG10aW1lXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fVxyXG5cdFx0XHRhd2FpdCBhcHAudmF1bHQuYWRhcHRlci53cml0ZSh0aGlzLmJhc2VQYXRoICsgcGF0aCwgZGF0YSwgb3B0aW9ucyk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHJlYWQocGF0aDogc3RyaW5nKSB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRyZXR1cm4gYXdhaXQgYXBwLnZhdWx0LmFkYXB0ZXIucmVhZCh0aGlzLmJhc2VQYXRoICsgcGF0aCk7XHJcblx0XHR9XHJcblx0XHRjYXRjaChlKSB7XHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgZXhpc3RzKHBhdGg6IHN0cmluZykge1xyXG5cdFx0cmV0dXJuIGF3YWl0IGFwcC52YXVsdC5hZGFwdGVyLmV4aXN0cyh0aGlzLmJhc2VQYXRoICsgcGF0aClcclxuXHR9XHJcblxyXG5cdGFzeW5jIGRlbGV0ZShwYXRoOiBhbnkpIHtcclxuXHRcdGF3YWl0IGFwcC52YXVsdC5kZWxldGUodGhpcy5nZXRGaWxlKHBhdGgpLCB0cnVlKVxyXG5cdH1cclxuXHJcblx0YXN5bmMgaXRlcmF0ZShjYWxsYmFjaykge1xyXG5cdFx0bGV0IGZpbGVzID0gYXBwLnZhdWx0LmdldEFsbExvYWRlZEZpbGVzKCk7XHJcblx0XHRmb3IobGV0IGZpbGUgb2YgZmlsZXMpIHtcclxuXHRcdFx0YXdhaXQgY2FsbGJhY2soZmlsZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXRGaWxlKHBhdGg6IHN0cmluZykge1xyXG5cdFx0cmV0dXJuIGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgocGF0aCk7XHJcblx0fVxyXG59XHJcbiIsICIvLyBAdHMtbm9jaGVja1xuaW1wb3J0IEZTQWRhcHRlciBmcm9tIFwiLi9GU0FkYXB0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RvcmFnZSB7XG5cdHN0YXRpYyB0cmVlOiBhbnkgPSBudWxsO1xuXHRmc1ZhdWx0OiBGU0FkYXB0ZXI7XG5cdGZzSW50ZXJuYWw6IEZTQWRhcHRlcjtcblx0cHJpdmF0ZSBpbml0ZWQgPSBmYWxzZTtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLmZzVmF1bHQgPSBuZXcgRlNBZGFwdGVyKFwiLi9cIik7XG5cdFx0dGhpcy5mc0ludGVybmFsID0gbmV3IEZTQWRhcHRlcihcIi5vYnNpZGlhbi9wbHVnaW5zL2FueXNvY2tldC1zeW5jL1wiKTtcblx0fVxuXG5cdGFzeW5jIGluaXQoKSB7XG5cdFx0aWYodGhpcy5pbml0ZWQpXG5cdFx0XHRyZXR1cm47XG5cblx0XHR0aGlzLnRyZWUgPSB7fTtcblx0XHR0aGlzLmluaXRlZCA9IHRydWU7XG5cdH1cblxuXHRhc3luYyB3cml0ZShwYXRoOiBzdHJpbmcsIGRhdGE6IHN0cmluZywgbWV0YWRhdGE6IGFueSkge1xuXHRcdGF3YWl0IHRoaXMud3JpdGVNZXRhZGF0YShwYXRoLCBtZXRhZGF0YSk7XG5cdFx0cmV0dXJuIGF3YWl0IHRoaXMuZnNWYXVsdC53cml0ZShwYXRoLCBkYXRhLCBtZXRhZGF0YS5tdGltZSk7XG5cdH1cblxuXHRhc3luYyBtYWtlRm9sZGVyKHBhdGg6IHN0cmluZywgbWV0YWRhdGE6IGFueSkge1xuXHRcdGF3YWl0IHRoaXMud3JpdGVNZXRhZGF0YShwYXRoLCBtZXRhZGF0YSk7XG5cdFx0cmV0dXJuIGF3YWl0IHRoaXMuZnNWYXVsdC5tYWtlRm9sZGVyKHBhdGgpO1xuXHR9XG5cblx0YXN5bmMgcmVhZChwYXRoOiBzdHJpbmcpIHtcblx0XHRyZXR1cm4gYXdhaXQgdGhpcy5mc1ZhdWx0LnJlYWQocGF0aCk7XG5cdH1cblxuXHRhc3luYyBkZWxldGUocGF0aDogc3RyaW5nLCBtZXRhZGF0YTogYW55KSB7XG5cdFx0YXdhaXQgdGhpcy53cml0ZU1ldGFkYXRhKHBhdGgsIG1ldGFkYXRhKTtcblx0XHRyZXR1cm4gYXdhaXQgdGhpcy5mc1ZhdWx0LmRlbGV0ZShwYXRoKTtcblx0fVxuXG5cdGFzeW5jIGV4aXN0cyhwYXRoOiBzdHJpbmcpIHtcblx0XHRyZXR1cm4gYXdhaXQgdGhpcy5mc1ZhdWx0LmV4aXN0cyhwYXRoKTtcblx0fVxuXG5cdGFzeW5jIGl0ZXJhdGUoY2FsbGJhY2s6IGFueSkge1xuXHRcdGF3YWl0IHRoaXMuZnNWYXVsdC5pdGVyYXRlKGFzeW5jIChpdGVtKSA9PiB7XG5cdFx0XHQvLyBza2lwIHJvb3Rcblx0XHRcdGlmKGl0ZW0ucGF0aCA9PSBcIi9cIilcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0YXdhaXQgY2FsbGJhY2soaXRlbSk7XG5cdFx0fSk7XG5cdH1cblxuXHRhc3luYyByZWFkTWV0YWRhdGEocGF0aDogc3RyaW5nKSB7XG5cdFx0aWYoIXRoaXMudHJlZVtwYXRoXSkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMudHJlZVtwYXRoXTtcblx0fVxuXG5cdGFzeW5jIHdyaXRlTWV0YWRhdGEocGF0aDogc3RyaW5nLCBtZXRhZGF0YTogYW55KSB7XG5cdFx0aWYoIXRoaXMudHJlZVtwYXRoXSkge1xuXHRcdFx0dGhpcy50cmVlW3BhdGhdID0ge307XG5cdFx0fVxuXHRcdGZvcihsZXQga2V5IGluIG1ldGFkYXRhKSB7XG5cdFx0XHR0aGlzLnRyZWVbcGF0aF1ba2V5XSA9IG1ldGFkYXRhW2tleV07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMudHJlZVtwYXRoXTtcblx0fVxuXG5cdGFzeW5jIHVwZGF0ZVBsdWdpbihmaWxlcykge1xuXHRcdGZvcihsZXQgaXRlbSBvZiBmaWxlcykge1xuXHRcdFx0YXdhaXQgdGhpcy5mc0ludGVybmFsLndyaXRlKGl0ZW0ucGF0aCwgaXRlbS5kYXRhKTtcblx0XHR9XG5cdH1cblxuXHRnZXRGaWxlQnlQYXRoKHBhdGgpIHtcblx0XHRpZihwYXRoLnN1YnN0cmluZygwLCAxKSA9PSBcIi9cIikge1xuXHRcdFx0cGF0aCA9IHBhdGguc3Vic3RyaW5nKDEpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5mc1ZhdWx0LmdldEZpbGUocGF0aCk7XG5cdH1cbn1cbiIsICJpbXBvcnQge1N1Z2dlc3RNb2RhbH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgQW55U29ja2V0U3luY1BsdWdpbiBmcm9tIFwiLi4vLi4vbWFpblwiO1xuaW1wb3J0IHtGaWxlc0hpc3RvcnlNb2RhbH0gZnJvbSBcIi4vRmlsZXNIaXN0b3J5TW9kYWxcIjtcblxuaW50ZXJmYWNlIENvbW1hbmQge1xuXHRpZDogbnVtYmVyXG5cdG5hbWU6IHN0cmluZ1xuXHRjYW5TaG93PzogKHBsdWdpbjogQW55U29ja2V0U3luY1BsdWdpbikgPT4ge307XG59XG5cbmNvbnN0IENPTU1BTkRfVFlQRVMgPSB7XG5cdFNFVFRJTkdTOiAxLFxuXHRERUxFVEVEX0ZJTEVTOiAyLFxuXHRWRVJTSU9OX0hJU1RPUlk6IDMsXG5cdFBMVUdJTl9TVEFURTogNFxufVxuY29uc3QgY29tbWFuZExpc3QgPSBbXG5cdHtcblx0XHRpZDogQ09NTUFORF9UWVBFUy5TRVRUSU5HUyxcblx0XHRuYW1lOiBcIlNldHRpbmdzXCIsXG5cdFx0Y2FuU2hvdzogKHBsdWdpbjogQW55U29ja2V0U3luY1BsdWdpbikgPT4ge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9LFxuXHR7XG5cdFx0aWQ6IENPTU1BTkRfVFlQRVMuREVMRVRFRF9GSUxFUyxcblx0XHRuYW1lOiBcIkRlbGV0ZWQgRmlsZXNcIixcblx0XHRjYW5TaG93OiAocGx1Z2luOiBBbnlTb2NrZXRTeW5jUGx1Z2luKSA9PiB7XG5cdFx0XHRyZXR1cm4gcGx1Z2luLnhTeW5jLmFueXNvY2tldC5pc0Nvbm5lY3RlZDtcblx0XHR9XG5cdH0sXG5cdHtcblx0XHRpZDogQ09NTUFORF9UWVBFUy5WRVJTSU9OX0hJU1RPUlksXG5cdFx0bmFtZTogXCJWZXJzaW9uIEhpc3RvcnlcIixcblx0XHRjYW5TaG93OiAocGx1Z2luOiBBbnlTb2NrZXRTeW5jUGx1Z2luKSA9PiB7XG5cdFx0XHRyZXR1cm4gcGx1Z2luLnhTeW5jLmFueXNvY2tldC5pc0Nvbm5lY3RlZDtcblx0XHR9XG5cdH0sXG5cdHtcblx0XHRpZDogQ09NTUFORF9UWVBFUy5QTFVHSU5fU1RBVEUsXG5cdFx0bmFtZTogXCJFbmFibGUgU3luY1wiLFxuXHRcdGNhblNob3c6IChwbHVnaW46IEFueVNvY2tldFN5bmNQbHVnaW4pID0+IHtcblx0XHRcdHJldHVybiAhcGx1Z2luLnhTeW5jLmlzRW5hYmxlZDtcblx0XHR9XG5cdH0sXG5cdHtcblx0XHRpZDogQ09NTUFORF9UWVBFUy5QTFVHSU5fU1RBVEUsXG5cdFx0bmFtZTogXCJEaXNhYmxlIFN5bmNcIixcblx0XHRjYW5TaG93OiAocGx1Z2luOiBBbnlTb2NrZXRTeW5jUGx1Z2luKSA9PiB7XG5cdFx0XHRyZXR1cm4gcGx1Z2luLnhTeW5jLmlzRW5hYmxlZDtcblx0XHR9XG5cdH1cbl1cblxuZXhwb3J0IGNsYXNzIFJpYmJvbk1vZGFsIGV4dGVuZHMgU3VnZ2VzdE1vZGFsPENvbW1hbmQ+IHtcblx0cGx1Z2luOiBBbnlTb2NrZXRTeW5jUGx1Z2luO1xuXG5cdGNvbnN0cnVjdG9yKHBsdWdpbjogQW55U29ja2V0U3luY1BsdWdpbikge1xuXHRcdHN1cGVyKGFwcCk7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdFx0dGhpcy5zZXRQbGFjZWhvbGRlcihcIlR5cGUgYSBjb21tYW5kLi4uXCIpO1xuXHR9XG5cblx0Z2V0U3VnZ2VzdGlvbnMocXVlcnk6IHN0cmluZyk6IENvbW1hbmRbXSB8IFByb21pc2U8Q29tbWFuZFtdPiB7XG5cdFx0cmV0dXJuIGNvbW1hbmRMaXN0LmZpbHRlcigoaXRlbSkgPT4ge1xuXHRcdFx0aWYgKGl0ZW0uY2FuU2hvdyh0aGlzLnBsdWdpbikpIHtcblx0XHRcdFx0cmV0dXJuIGl0ZW0ubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5LnRvTG93ZXJDYXNlKCkpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0YXN5bmMgb25DaG9vc2VTdWdnZXN0aW9uKGl0ZW06IENvbW1hbmQsIGV2dDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpIHtcblx0XHRzd2l0Y2ggKGl0ZW0uaWQpIHtcblx0XHRcdGNhc2UgQ09NTUFORF9UWVBFUy5TRVRUSU5HUzpcblx0XHRcdFx0Y29uc3Qgc2V0dGluZyA9ICh0aGlzLmFwcCBhcyBhbnkpLnNldHRpbmc7XG5cdFx0XHRcdGF3YWl0IHNldHRpbmcub3BlbigpXG5cdFx0XHRcdHNldHRpbmcub3BlblRhYkJ5SWQoXCJhbnlzb2NrZXQtc3luY1wiKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIENPTU1BTkRfVFlQRVMuVkVSU0lPTl9ISVNUT1JZOlxuXHRcdFx0XHRuZXcgRmlsZXNIaXN0b3J5TW9kYWwodGhpcy5wbHVnaW4sIGZhbHNlKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIENPTU1BTkRfVFlQRVMuREVMRVRFRF9GSUxFUzpcblx0XHRcdFx0bmV3IEZpbGVzSGlzdG9yeU1vZGFsKHRoaXMucGx1Z2luLCB0cnVlKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIENPTU1BTkRfVFlQRVMuUExVR0lOX1NUQVRFOlxuXHRcdFx0XHRpZiAodGhpcy5wbHVnaW4uaXNMb2FkaW5nKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5wbHVnaW4uaXNMb2FkaW5nID0gdHJ1ZTtcblx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4ueFN5bmMuZW5hYmxlZCghdGhpcy5wbHVnaW4ueFN5bmMuaXNFbmFibGVkKTtcblx0XHRcdFx0dGhpcy5wbHVnaW4uaXNMb2FkaW5nID0gZmFsc2U7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdHJlbmRlclN1Z2dlc3Rpb24odmFsdWU6IENvbW1hbmQsIGVsOiBIVE1MRWxlbWVudCk6IGFueSB7XG5cdFx0ZWwuY3JlYXRlRWwoXCJkaXZcIiwgeyBjbHM6IFwiYXMtaXRlbVwiLCB0ZXh0OiB2YWx1ZS5uYW1lIH0pO1xuXHR9XG59XG4iLCAiLy9AdHMtbm9jaGVja1xuaW1wb3J0IHtTdWdnZXN0TW9kYWx9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IEFueVNvY2tldFN5bmNQbHVnaW4gZnJvbSBcIi4uLy4uL21haW5cIjtcbmltcG9ydCB7VmVyc2lvbkhpc3RvcnlNb2RhbH0gZnJvbSBcIi4vVmVyc2lvbkhpc3RvcnlNb2RhbFwiO1xuXG5pbnRlcmZhY2UgRGVsZXRlZEZpbGUge1xuXHRwYXRoOiBzdHJpbmc7XG5cdG10aW1lOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBGaWxlc0hpc3RvcnlNb2RhbCBleHRlbmRzIFN1Z2dlc3RNb2RhbDxEZWxldGVkRmlsZT4ge1xuXHRwbHVnaW46IEFueVNvY2tldFN5bmNQbHVnaW47XG5cdGRhdGE6IGFueTtcblxuXHRjb25zdHJ1Y3RvcihwbHVnaW46IEFueVNvY2tldFN5bmNQbHVnaW4sIGRlbGV0ZWRPbmx5ID0gZmFsc2UpIHtcblx0XHRzdXBlcihhcHApO1xuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xuXHRcdHRoaXMuZGF0YSA9IFtdO1xuXHRcdHRoaXMuZGVsZXRlZE9ubHkgPSBkZWxldGVkT25seTtcblxuXHRcdGlmKHRoaXMuZGVsZXRlZE9ubHkpIHtcblx0XHRcdHRoaXMuc2V0UGxhY2Vob2xkZXIoXCJTZWFyY2ggZm9yIGRlbGV0ZWQgZmlsZXMuLi5cIik7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0dGhpcy5zZXRQbGFjZWhvbGRlcihcIlNlYXJjaCBmb3IgZmlsZXMuLi5cIik7XG5cdFx0fVxuXG5cdFx0dGhpcy5wbHVnaW4ueFN5bmMubGlzdEZpbGVzSGlzdG9yeSh0aGlzLmRlbGV0ZWRPbmx5LChkYXRhOiBhbnkpID0+IHtcblx0XHRcdHRoaXMuZGF0YSA9IGRhdGE7XG5cdFx0XHR0aGlzLm9wZW4oKTtcblx0XHR9KTtcblx0XHR0aGlzLmNvbnRhaW5lckVsLmFkZENsYXNzKFwiYW55c29ja2V0LWZpbGVzLWhpc3RvcnlcIik7XG5cdH1cblxuXHRnZXRTdWdnZXN0aW9ucyhxdWVyeTogc3RyaW5nKTogRGVsZXRlZEZpbGVbXSB8IFByb21pc2U8RGVsZXRlZEZpbGVbXT4ge1xuXHRcdHJldHVybiB0aGlzLmRhdGEuZmlsdGVyKGl0ZW0gPT4gaXRlbS5wYXRoLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocXVlcnkudG9Mb3dlckNhc2UoKSkpXG5cdH1cblxuXHRhc3luYyBvbkNob29zZVN1Z2dlc3Rpb24oaXRlbTogRGVsZXRlZEZpbGUsIGV2dDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpIHtcblx0XHRuZXcgVmVyc2lvbkhpc3RvcnlNb2RhbCh0aGlzLnBsdWdpbiwgaXRlbS5wYXRoKTtcblx0fVxuXG5cdHJlbmRlclN1Z2dlc3Rpb24odmFsdWU6IERlbGV0ZWRGaWxlLCBlbDogSFRNTEVsZW1lbnQpOiBhbnkge1xuXHRcdGVsLmNyZWF0ZUVsKFwiZGl2XCIsIHsgdGV4dDogdmFsdWUucGF0aCB9KS5hZGRDbGFzcyhcIml0ZW0tcGF0aFwiKTtcblxuXHRcdGxldCBwcmVmaXggPSBcIk1vZGlmaWVkOiBcIjtcblx0XHRpZih0aGlzLmRlbGV0ZWRPbmx5KSB7XG5cdFx0XHRwcmVmaXggPSBcIkRlbGV0ZWQ6IFwiO1xuXHRcdH1cblx0XHRlbC5jcmVhdGVFbChcImRpdlwiLCB7IHRleHQ6IHByZWZpeCArIHRoaXMuZm9ybWF0VGltZXN0YW1wKHZhbHVlLm10aW1lKSB9KS5hZGRDbGFzcyhcIml0ZW0tbWV0YWRhdGFcIik7XG5cdH1cblxuXHRwcml2YXRlIGZvcm1hdFRpbWVzdGFtcCh0aW1lc3RhbXApIHtcblx0XHRsZXQgZGF0ZSA9ICBuZXcgRGF0ZSh0aW1lc3RhbXApO1xuXG5cdFx0bGV0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMTsgLy8gTW9udGhzIGFyZSB6ZXJvLWJhc2VkIGluIEphdmFTY3JpcHRcblx0XHRsZXQgZGF5ID0gZGF0ZS5nZXREYXRlKCk7XG5cdFx0bGV0IHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG5cdFx0bGV0IGhvdXJzID0gZGF0ZS5nZXRIb3VycygpO1xuXHRcdGxldCBtaW51dGVzID0gZGF0ZS5nZXRNaW51dGVzKCk7XG5cdFx0bGV0IGFtcG0gPSBob3VycyA+PSAxMiA/ICdQTScgOiAnQU0nO1xuXG5cdFx0aG91cnMgPSBob3VycyAlIDEyO1xuXHRcdGhvdXJzID0gaG91cnMgPyBob3VycyA6IDEyOyAvLyB0aGUgaG91ciAnMCcgc2hvdWxkIGJlICcxMidcblx0XHRtaW51dGVzID0gbWludXRlcyA8IDEwID8gJzAnICsgbWludXRlcyA6IG1pbnV0ZXM7IC8vIHplcm8tcGFkZGluZyBtaW51dGVzXG5cblx0XHRyZXR1cm4gYCR7bW9udGh9LyR7ZGF5fS8ke3llYXJ9ICR7aG91cnN9OiR7bWludXRlc30gJHthbXBtfWA7XG5cdH1cbn1cbiIsICIvLyBAdHMtbm9jaGVja1xuaW1wb3J0IHtNYXJrZG93blByZXZpZXdWaWV3LCBNb2RhbCwgTm90aWNlfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCBBbnlTb2NrZXRTeW5jUGx1Z2luIGZyb20gXCIuLi8uLi9tYWluXCI7XG5cbmV4cG9ydCBjbGFzcyBWZXJzaW9uSGlzdG9yeU1vZGFsIGV4dGVuZHMgTW9kYWwge1xuXHRwbHVnaW46IEFueVNvY2tldFN5bmNQbHVnaW47XG5cdG1hcmtkb3duVmlldzogTWFya2Rvd25QcmV2aWV3Vmlldztcblx0dmVyc2lvbnM6IGFueTtcblxuXHRjb25zdHJ1Y3RvcihwbHVnaW46IEFueVNvY2tldFN5bmNQbHVnaW4sIHBhdGg6IHN0cmluZykge1xuXHRcdHN1cGVyKGFwcCk7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdFx0dGhpcy5wYXRoID0gcGF0aDtcblx0XHR0aGlzLm5hbWUgPSBcIlVua25vd25cIjtcblx0XHR0aGlzLnZlcnNpb25zID0gW107XG5cdFx0dGhpcy50eXBlID0gXCJjcmVhdGVkXCI7XG5cblx0XHR0aGlzLm9wZW4oKTtcblxuXHRcdHRoaXMuc2V0dXAoKTtcblx0fVxuXG5cdHNldHVwKCkge1xuXHRcdHRoaXMubW9kYWxFbC5hZGRDbGFzcyhcImFueXNvY2tldC12ZXJzaW9uLWhpc3RvcnlcIik7XG5cblx0XHRsZXQgZWxMaXN0ID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KFwiaGlzdG9yeS1saXN0XCIpO1xuXHRcdGxldCBlbENvbnRhaW5lciA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdihcInZlcnNpb24tY29udGFpbmVyXCIpO1xuXHRcdGxldCBlbENvbnRlbnQgPSBlbENvbnRhaW5lci5jcmVhdGVEaXYoXCJ2ZXJzaW9uLWNvbnRlbnRcIik7XG5cblx0XHQvLyBUaXRsZWJhciBzZXR1cFxuXHRcdGxldCBlbFRpdGxlID0gZWxDb250ZW50LmNyZWF0ZURpdihcInZlcnNpb24tdGl0bGViYXJcIik7XG5cdFx0bGV0IHBhcnRzID0gdGhpcy5wYXRoLnNwbGl0KFwiL1wiKTtcblx0XHR0aGlzLm5hbWUgPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXTtcblx0XHRsZXQgZmlsZU5hbWUgPSBlbFRpdGxlLmNyZWF0ZURpdihcInZlcnNpb24tZmlsZW5hbWVcIikudGV4dENvbnRlbnQgPSB0aGlzLm5hbWU7XG5cdFx0bGV0IGFjdGlvbnMgPSBlbFRpdGxlLmNyZWF0ZURpdihcInZlcnNpb24tYWN0aW9uc1wiKTtcblx0XHR0aGlzLmJ1dHRvblJlc3RvcmUgPSBhY3Rpb25zLmNyZWF0ZUVsKFwiYnV0dG9uXCIsIHt0ZXh0OiBcIlJlc3RvcmVcIiwgb25jbGljazogdGhpcy5vblJlc3RvcmUuYmluZCh0aGlzKX0pO1xuXHRcdHRoaXMuYnV0dG9uUmVzdG9yZS5kaXNhYmxlZCA9IHRydWU7XG5cblx0XHQvLy8vLy8gQ29udGVudCBTZXR1cFxuXHRcdC8vIGhhY2sgZm9yIG1hcmtkb3duIHByZXZpZXdcblx0XHRsZXQgX29yaWdpbmFsQ29udGVudEVsID0gdGhpcy5jb250ZW50RWw7XG5cdFx0dGhpcy5jb250ZW50RWwgPSBlbENvbnRlbnQ7XG5cdFx0dGhpcy5tYXJrZG93blZpZXcgPSBuZXcgTWFya2Rvd25QcmV2aWV3Vmlldyh0aGlzKTtcblx0XHR0aGlzLmNvbnRlbnRFbCA9IF9vcmlnaW5hbENvbnRlbnRFbDtcblxuXG5cdFx0Ly8gc2hvdyB2ZXJzaW9uIGNvbnRlbnRcblx0XHR0aGlzLnBsdWdpbi54U3luYy5saXN0VmVyc2lvbkhpc3RvcnkodGhpcy5wYXRoLCAoZGF0YTogYW55KSA9PiB7XG5cdFx0XHR0aGlzLnZlcnNpb25zID0gW107XG5cdFx0XHRpZiAoZGF0YSAmJiBkYXRhLmRhdGEubGVuZ3RoIDw9IDApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYoZGF0YS5kZWxldGVkKSB7XG5cdFx0XHRcdHRoaXMudHlwZSA9IFwiZGVsZXRlZFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IobGV0IHRpbWVzdGFtcCBvZiBkYXRhLmRhdGEpIHtcblx0XHRcdFx0bGV0IGl0ZW0gPSBlbExpc3QuY3JlYXRlRGl2KFwidmVyc2lvbi10aW1lc3RhbXBcIik7XG5cdFx0XHRcdGxldCB2ZXJzaW9uSXRlbSA9IHtcblx0XHRcdFx0XHR0aW1lc3RhbXA6IHRpbWVzdGFtcCxcblx0XHRcdFx0XHRlbDogaXRlbVxuXHRcdFx0XHR9O1xuXHRcdFx0XHRpdGVtLnRleHRDb250ZW50ID0gdGhpcy5mb3JtYXRUaW1lc3RhbXAodGltZXN0YW1wKTtcblx0XHRcdFx0aXRlbS5vbmNsaWNrID0gKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuaW50ZXJuYWxJdGVtU2VsZWN0KHZlcnNpb25JdGVtKTtcblx0XHRcdFx0fTtcblx0XHRcdFx0dGhpcy52ZXJzaW9ucy5wdXNoKHZlcnNpb25JdGVtKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuaW50ZXJuYWxJdGVtU2VsZWN0KHRoaXMudmVyc2lvbnNbMF0pO1xuXHRcdH0pO1xuXHR9XG5cblx0cHJpdmF0ZSBmb3JtYXRUaW1lc3RhbXAodGltZXN0YW1wKSB7XG5cdFx0bGV0IGRhdGUgPSAgbmV3IERhdGUodGltZXN0YW1wKTtcblxuXHRcdGxldCBtb250aCA9IGRhdGUuZ2V0TW9udGgoKSArIDE7IC8vIE1vbnRocyBhcmUgemVyby1iYXNlZCBpbiBKYXZhU2NyaXB0XG5cdFx0bGV0IGRheSA9IGRhdGUuZ2V0RGF0ZSgpO1xuXHRcdGxldCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuXHRcdGxldCBob3VycyA9IGRhdGUuZ2V0SG91cnMoKTtcblx0XHRsZXQgbWludXRlcyA9IGRhdGUuZ2V0TWludXRlcygpO1xuXHRcdGxldCBhbXBtID0gaG91cnMgPj0gMTIgPyAnUE0nIDogJ0FNJztcblxuXHRcdGhvdXJzID0gaG91cnMgJSAxMjtcblx0XHRob3VycyA9IGhvdXJzID8gaG91cnMgOiAxMjsgLy8gdGhlIGhvdXIgJzAnIHNob3VsZCBiZSAnMTInXG5cdFx0bWludXRlcyA9IG1pbnV0ZXMgPCAxMCA/ICcwJyArIG1pbnV0ZXMgOiBtaW51dGVzOyAvLyB6ZXJvLXBhZGRpbmcgbWludXRlc1xuXG5cdFx0cmV0dXJuIGAke21vbnRofS8ke2RheX0vJHt5ZWFyfSAke2hvdXJzfToke21pbnV0ZXN9ICR7YW1wbX1gO1xuXHR9XG5cblx0cHJpdmF0ZSBpbnRlcm5hbEl0ZW1TZWxlY3QoaXRlbSkge1xuXHRcdHRoaXMudmVyc2lvbnMubWFwKHYgPT4gdi5lbC5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKSk7XG5cdFx0aXRlbS5lbC5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcblxuXHRcdHRoaXMucGx1Z2luLnhTeW5jLnJlYWRWZXJzaW9uSGlzdG9yeSh0aGlzLnBhdGgsIGl0ZW0udGltZXN0YW1wLCAoZGF0YTogYW55KSA9PiB7XG5cdFx0XHR0aGlzLm1hcmtkb3duVmlldy5zZXQoZGF0YSwgdHJ1ZSk7XG5cdFx0XHR0aGlzLm1hcmtkb3duVmlldy5hcHBseVNjcm9sbCgwKTtcblx0XHR9KTtcblx0XHR0aGlzLnNlbGVjdGVkVmVyc2lvbiA9IGl0ZW07XG5cblx0XHR0aGlzLmJ1dHRvblJlc3RvcmUudGV4dENvbnRlbnQgPSBcIlJlc3RvcmVcIlxuXHRcdHRoaXMuYnV0dG9uUmVzdG9yZS5kaXNhYmxlZCA9IGZhbHNlO1xuXG5cdFx0aWYodGhpcy50eXBlID09IFwiY3JlYXRlZFwiKSB7XG5cdFx0XHRpZiAodGhpcy5zZWxlY3RlZFZlcnNpb24udGltZXN0YW1wID09IHRoaXMudmVyc2lvbnNbMF0udGltZXN0YW1wKSB7XG5cdFx0XHRcdHRoaXMuYnV0dG9uUmVzdG9yZS50ZXh0Q29udGVudCA9IFwiQ3VycmVudFwiXG5cdFx0XHRcdHRoaXMuYnV0dG9uUmVzdG9yZS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmJ1dHRvblJlc3RvcmUudGV4dENvbnRlbnQgPSBcIlJlc3RvcmVcIlxuXHRcdFx0XHR0aGlzLmJ1dHRvblJlc3RvcmUuZGlzYWJsZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGFzeW5jIG9uUmVzdG9yZSgpIHtcblx0XHRsZXQgZGF0YSA9IHRoaXMubWFya2Rvd25WaWV3LmdldCgpO1xuXHRcdGxldCBtZXRhZGF0YSA9IGF3YWl0IHRoaXMucGx1Z2luLnhTeW5jLmdldE1ldGFkYXRhKFxuXHRcdFx0XCJyZXN0b3JlXCIsXG5cdFx0XHRkYXRhXG5cdFx0KTtcblx0XHQvLyBmb3JjZSBhbiB1cGRhdGVcblx0XHRtZXRhZGF0YS5zaGExID0gbnVsbDtcblxuXHRcdGF3YWl0IHRoaXMucGx1Z2luLnhTeW5jLnN0b3JhZ2Uud3JpdGUodGhpcy5wYXRoLCBkYXRhLCBtZXRhZGF0YSk7XG5cdFx0bmV3IE5vdGljZShcIlJlc3RvcmVkIC0gXCIgKyB0aGlzLm5hbWUgKyBcIiAoXCIrIHRoaXMuZm9ybWF0VGltZXN0YW1wKHRoaXMuc2VsZWN0ZWRWZXJzaW9uLnRpbWVzdGFtcCkgK1wiKVwiKVxuXHRcdHRoaXMuY2xvc2UoKTtcblx0fVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBLFlBQU8sVUFBVSxNQUFNLGFBQWE7QUFBQSxNQUNuQyxjQUFjO0FBQ2IsYUFBSyxZQUFZLENBQUM7QUFDbEIsYUFBSyxpQkFBaUIsQ0FBQztBQUFBLE1BQ3hCO0FBQUEsTUFFQSxHQUFHLE9BQU8sSUFBSTtBQUNiLFlBQUksQ0FBQyxLQUFLLFVBQVU7QUFDbkIsZUFBSyxVQUFVLFNBQVMsQ0FBQztBQUMxQixhQUFLLFVBQVUsT0FBTyxLQUFLLEVBQUU7QUFBQSxNQUM5QjtBQUFBLE1BRUEsSUFBSSxPQUFPLElBQUk7QUFDZCxZQUFHLEtBQUssVUFBVSxRQUFRO0FBQ3pCLGVBQUssVUFBVSxTQUFTLEtBQUssVUFBVSxPQUFPLE9BQU8sVUFBUSxTQUFTLEVBQUU7QUFBQSxRQUN6RTtBQUFBLE1BQ0Q7QUFBQSxNQUVBLGVBQWUsT0FBTyxJQUFJO0FBQ3pCLGFB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
